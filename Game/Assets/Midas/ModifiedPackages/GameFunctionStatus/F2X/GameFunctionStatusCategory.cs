//-----------------------------------------------------------------------
// <copyright file = "GameFunctionStatusCategory.cs" company = "IGT">
//     Copyright (c) 2024 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
	using System;
	using System.Collections.Generic;
	using F2XTransport;
	using Schemas.Internal.GameFunctionStatus;

	/// <summary>
	/// Implementation of the F2X <see cref="GameFunctionStatus"/> category.
	/// Provides functionality for controlling the behaviour of the denomination selection screen and various on screen
	/// game buttons
	/// Category: 1041; Major Version: 1
	/// </summary>
	public class GameFunctionStatusCategory : F2XTransactionalCategoryBase<GameFunctionStatus>, IGameFunctionStatusCategory
	{
		#region Fields

		/// <summary>
		/// Object which implements the GameFunctionStatusCategory callbacks.
		/// </summary>
		private readonly IGameFunctionStatusCategoryCallbacks callbackHandler;

		#endregion

		#region Constructor

		/// <summary>
		/// Instantiates a new <see cref="GameFunctionStatusCategory"/>.
		/// </summary>
		/// <param name="transport">
		/// Transport that this category will be installed in.
		/// </param>
		/// <param name="callbackHandler">
		/// GameFunctionStatusCategory callback handler.
		/// </param>
		/// <exception cref="ArgumentNullException">
		/// Thrown if the <paramref name="callbackHandler"/> is null.
		/// </exception>
		public GameFunctionStatusCategory(IF2XTransport transport, IGameFunctionStatusCategoryCallbacks callbackHandler)
			: base(transport)
		{
			this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
			AddMessagehandler<ButtonStatusChangedSend>(HandleButtonStatusChanged);
			AddMessagehandler<ChangeDenominationPlayableStatusSend>(HandleChangeDenominationPlayableStatus);
			AddMessagehandler<SetDenominationTimeoutSend>(HandleSetDenominationTimeout);
		}


		#endregion

		#region IApiCategory Members

		/// <inheritdoc/>
		public override MessageCategory Category => (MessageCategory)1041;

		/// <inheritdoc/>
		public override uint MajorVersion => 1;

		/// <inheritdoc/>
		public override uint MinorVersion => 0;

		#endregion

		#region IGameFunctionStatusCategory Members

		/// <inheritdoc/>
		public DenominationStatusList GetDenominationPlayableStatus()
		{
			Transport.MustHaveHeavyweightTransaction();
			var request = CreateTransactionalRequest<GetDenominationPlayableStatusSend>();
			
			var reply = SendMessageAndGetReply<GetDenominationPlayableStatusReply>(Channel.Foundation, request);
			CheckReply(reply.Exception);
			return reply.Content.StatusList;
		}

		/// <inheritdoc/>
		public GetDenominationTimeoutReplyMessage GetDenominationTimeout()
		{
			Transport.MustHaveHeavyweightTransaction();
			var request = CreateTransactionalRequest<GetDenominationTimeoutSend>();

			var reply = SendMessageAndGetReply<GetDenominationTimeoutReply>(Channel.Foundation, request);
			CheckReply(reply.Exception);
			return reply.Content;
		}

		/// <inheritdoc/>
		public IEnumerable<GameButtonBehaviorType> GetGameButtonStatus()
		{
			Transport.MustHaveHeavyweightTransaction();
			var request = CreateTransactionalRequest<GetGameButtonStatusSend>();

			var reply = SendMessageAndGetReply<GetGameButtonStatusReply>(Channel.Foundation, request);
			CheckReply(reply.Exception);
			return reply.Content.GameButtons;
		}

		#endregion

		#region Message Handlers

		/// <summary>
		/// Handler for the ButtonStatusChangedSend message.
		/// </summary>
		/// <param name="message">
		/// Message from the Foundation to handle.
		/// </param>
		private void HandleButtonStatusChanged(ButtonStatusChangedSend message)
		{
			var errorMessage = callbackHandler.ProcessButtonStatusChanged(message.GameButtonBehavior);
			var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
			var replyMessage = CreateReply<ButtonStatusChangedReply>(errorCode, errorMessage);
			SendFoundationChannelResponse(replyMessage);
		}

		/// <summary>
		/// Handler for the ChangeDenominationPlayableStatusSend message.
		/// </summary>
		/// <param name="message">
		/// Message from the Foundation to handle.
		/// </param>
		private void HandleChangeDenominationPlayableStatus(ChangeDenominationPlayableStatusSend message)
		{
			var errorMessage = callbackHandler.ProcessChangeDenominationPlayableStatus(message.DenominationSelectionStatus);
			var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
			var replyMessage = CreateReply<ChangeDenominationPlayableStatusReply>(errorCode, errorMessage);
			SendFoundationChannelResponse(replyMessage);
		}

		/// <summary>
		/// Handler for the SetDenominationTimeoutSend message.
		/// </summary>
		/// <param name="message">
		/// Message from the Foundation to handle.
		/// </param>
		private void HandleSetDenominationTimeout(SetDenominationTimeoutSend message)
		{
			var errorMessage = callbackHandler.ProcessSetDenominationTimeout(message.DenominationTimeout, message.TimeoutActive);
			var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
			var replyMessage = CreateReply<SetDenominationTimeoutReply>(errorCode, errorMessage);
			SendFoundationChannelResponse(replyMessage);
		}

		#endregion
	}
}