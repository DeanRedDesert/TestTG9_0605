//-----------------------------------------------------------------------
// <copyright file = "IGameFunctionStatusCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2024 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.GameFunctionStatus;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="GameFunctionStatus"/> category.
    /// Provides functionality for controlling the behaviour of the denomination selection screen and various on screen
    /// game buttons
    /// Category: 1041; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IGameFunctionStatusCategoryCallbacks
    {
        /// <summary>
        /// Message from the foundation to the bin to request the denomination selection status of the bin be updated.
        /// </summary>
        /// <param name="gameButtonBehavior">
        /// A list of game buttons sent by the foundation which need to have their statuses updated.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessButtonStatusChanged(IEnumerable<GameButtonBehaviorType> gameButtonBehavior);

        /// <summary>
        /// Message from the foundation to the game to request the denomination selection status of the bin to be
        /// changed.
        /// </summary>
        /// <param name="denominationSelectionStatus">
        /// A list of denomination selections statuses of the bin to be changed
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessChangeDenominationPlayableStatus(IEnumerable<DenominationPlayableStatusType> denominationSelectionStatus);

        /// <summary>
        /// Initiates a timeout period in milliseconds, that when elapsed will cause the bin to display a denomination
        /// selection screen with the given timeout message.
        /// </summary>
        /// <param name="denominationTimeout">
        /// Indicates the timeout value in milliseconds that the bin should set the denomination display countdown to.
        /// </param>
        /// <param name="timeoutActive">
        /// If set to true, then the bin must defer control of the denomination menu timeout to the foundation. If it is
        /// set to false, then the bin itself may have full control over the timeout functionality
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessSetDenominationTimeout(uint denominationTimeout, bool timeoutActive);

    }

}

