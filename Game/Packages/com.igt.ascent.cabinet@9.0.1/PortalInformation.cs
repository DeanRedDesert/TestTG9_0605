//-----------------------------------------------------------------------
// <copyright file = "PortalInformation.cs" company = "IGT">
//     Copyright (c) 2017 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Cabinet
{
    using System;
    using System.Text;

    /// <summary>
    /// Contains all available information for a specific portal.
    /// </summary>
    [Serializable]
    public class PortalInformation : IEquatable<PortalInformation>
    {
        #region Private Fields

        private const int DefaultMediaDisplayId = 0;

        #endregion

        /// <summary>
        /// The portal Id.
        /// </summary>
        public string PortalId { get; }

        /// <summary>
        /// The portal name (string representation).
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// The portal priority.
        /// </summary>
        public uint Priority { get; }

        /// <summary>
        /// The screen that the portal will reside on.
        /// </summary>
        public PortalScreen Screen { get; }

        /// <summary>
        /// The portal type. 
        /// </summary>
        public PortalType Type { get; }

        /// <summary>
        /// The position layout of the portal on the monitor.
        /// </summary>
        public PortalPosition Position { get; }

        /// <summary>
        /// The bounds (location and size) of the portal.
        /// </summary>
        public Rect Bounds { get; }

        /// <summary>
        /// The texture size of the portal.
        /// </summary>
        public SizeRect TextureSize { get; }

        /// <summary>
        /// The minimum size extents of the portal.
        /// </summary>
        public SizeRect MinExtents { get; }

        /// <summary>
        /// The maximum size extents of the portal.
        /// </summary>
        public SizeRect MaxExtents { get; }

        /// <summary>
        /// The default EMDI access token.
        /// </summary>
        public long DefaultEmdiAccessToken { get; }

        /// <summary>
        /// The sound group name.
        /// </summary>
        public SoundGroupName SoundGroup { get; }

        /// <summary>
        /// Whether the portal supports touch.
        /// </summary>
        public bool TouchSupported { get; }

        /// <summary>
        /// Whether the portal supports audio.
        /// </summary>
        public bool AudioSupported { get; }

        /// <summary>
        /// The configuration group the portal belongs to.
        /// </summary>
        public uint ConfigGroup { get; }

        /// <summary>
        /// The media display id (generated by the Foundation) of this portal.
        /// The Foundation does not use this value if a client sends it and it
        /// is only meaningful when sent by the Foundation to the client. Defaults
        /// to zero.
        /// </summary>
        public int MediaDisplayId { get; }

        /// <summary>
        /// Instantiates an object that holds all input portal information.
        /// </summary>
        /// <param name="portalId">The portal Id.</param>
        /// <param name="name">The name (string representation) of the portal.</param>
        /// <param name="priority">The priority of the portal.</param>
        /// <param name="screen">The screen that the portal will reside on.</param>
        /// <param name="type">The portal type.</param>
        /// <param name="position">The position layout of the portal on the monitor.</param>
        /// <param name="bounds">The bounds (location and size) of the portal.</param>
        /// <param name="textureSize">The texture size of the portal.</param>
        /// <param name="minExtents">The minimum size extents of the portal.</param>
        /// <param name="maxExtents">The maximum size extents of the portal.</param>
        /// <param name="defaultEmdiAccessToken">The default EMDI access token.</param>
        /// <param name="soundGroup">The sounds group name of the portal.</param>
        /// <param name="touchSupported">Whether the portal supports touch.</param>
        /// <param name="audioSupported">Whether the portal supports audio.</param>
        /// <param name="configGroup">The configuration group the portal belongs to.</param>
        /// <param name="mediaDisplayId">The media display id (Foundation generated) of this portal.</param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if any of the reference types passed to this function are null.
        /// </exception>
        public PortalInformation(string portalId, string name, uint priority, PortalScreen screen,
            PortalType type, PortalPosition position, Rect bounds, SizeRect textureSize,
            SizeRect minExtents, SizeRect maxExtents, long defaultEmdiAccessToken, SoundGroupName soundGroup,
            bool touchSupported, bool audioSupported, uint configGroup, int mediaDisplayId = DefaultMediaDisplayId)
        {
            if(string.IsNullOrEmpty(portalId))
            {
                throw new ArgumentNullException(nameof(portalId));
            }
            if(string.IsNullOrEmpty(name))
            {
                throw new ArgumentNullException(nameof(name));
            }

            PortalId = portalId;
            Name = name;
            Priority = priority;
            Screen = screen;
            Type = type;
            Position = position;
            Bounds = bounds;
            TextureSize = textureSize;
            MinExtents = minExtents;
            MaxExtents = maxExtents;
            DefaultEmdiAccessToken = defaultEmdiAccessToken;
            SoundGroup = soundGroup;
            TouchSupported = touchSupported;
            AudioSupported = audioSupported;
            ConfigGroup = configGroup;
            MediaDisplayId = mediaDisplayId;
        }

        /// <summary>
        /// Override base implementation to provide better information.
        /// </summary>
        /// <returns>A string that specifically describes the object.</returns>
        public override string ToString()
        {
            return new StringBuilder()
                .AppendLine("PortalInformation:")
                .AppendLine($"\t PortalId: {PortalId}")
                .AppendLine($"\t Name: {Name}")
                .AppendLine($"\t Priority: {Priority}")
                .AppendLine($"\t Screen: {Screen}")
                .AppendLine($"\t Type: {Type}")
                .AppendLine($"\t Position: {Position}")
                .AppendLine($"\t Bounds: {Bounds}")
                .AppendLine($"\t TextureSize: {TextureSize}")
                .AppendLine($"\t MinExtents: {MinExtents}")
                .AppendLine($"\t MaxExtents: {MaxExtents}")
                .AppendLine($"\t DefaultEMDIAccessToken: {DefaultEmdiAccessToken}")
                .AppendLine($"\t SoundGroup: {SoundGroup}")
                .AppendLine($"\t TouchSupported: {TouchSupported}")
                .AppendLine($"\t AudioSupported: {AudioSupported}")
                .AppendLine($"\t ConfigGroup: {ConfigGroup}")
                .AppendLine($"\t MediaDisplayId: {MediaDisplayId}")
                .ToString();
        }

        #region Equality

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if(ReferenceEquals(null, obj))
            {
                return false;
            }
            if(ReferenceEquals(this, obj))
            {
                return true;
            }

            return obj.GetType() == GetType() && Equals((PortalInformation)obj);
        }

        /// <inheritdoc />
        public override int GetHashCode()
        {
            unchecked
            {
                return PortalId.GetHashCode() +
                    Name.GetHashCode() +
                    Priority.GetHashCode() +
                    Screen.GetHashCode() +
                    Type.GetHashCode() +
                    Position.GetHashCode() +
                    Bounds.GetHashCode() +
                    TextureSize.GetHashCode() +
                    MinExtents.GetHashCode() +
                    MaxExtents.GetHashCode() +
                    DefaultEmdiAccessToken.GetHashCode() +
                    SoundGroup.GetHashCode() +
                    TouchSupported.GetHashCode() +
                    AudioSupported.GetHashCode() +
                    ConfigGroup.GetHashCode() +
                    MediaDisplayId.GetHashCode();
            }
        }

        /// <summary>
        /// Override base implementation to go with the overridden Equals method.
        /// </summary>
        /// <param name="left">Left operand.</param>
        /// <param name="right">Right operand.</param>
        /// <returns>True if two operands are considered equal. False otherwise.</returns>
        public static bool operator ==(PortalInformation left, PortalInformation right)
        {
            if(ReferenceEquals(left, right))
            {
                return true;
            }
            if(ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }
            return left.Equals(right);
        }

        /// <summary>
        /// Override base implementation to go with the overridden not-equals method.
        /// </summary>
        /// <param name="left">Left operand.</param>
        /// <param name="right">Right operand.</param>
        /// <returns>True if two operands are not equal. False otherwise.</returns>
        public static bool operator !=(PortalInformation left, PortalInformation right)
        {
            return !(left == right);
        }

        #endregion

        #region IEquatable<PortalInformation>

        /// <inheritdoc />
        public bool Equals(PortalInformation other)
        {
            if(ReferenceEquals(null, other))
            {
                return false;
            }
            if(ReferenceEquals(this, other))
            {
                return true;
            }

            return PortalId == other.PortalId &&
                   Name == other.Name &&
                   Priority == other.Priority &&
                   Screen == other.Screen &&
                   Type == other.Type &&
                   Position == other.Position &&
                   Bounds == other.Bounds &&
                   TextureSize == other.TextureSize &&
                   MinExtents == other.MinExtents &&
                   MaxExtents == other.MaxExtents &&
                   DefaultEmdiAccessToken == other.DefaultEmdiAccessToken &&
                   SoundGroup == other.SoundGroup &&
                   TouchSupported == other.TouchSupported &&
                   AudioSupported == other.AudioSupported &&
                   ConfigGroup == other.ConfigGroup &&
                   MediaDisplayId == other.MediaDisplayId;
        }

        #endregion  
    }
}