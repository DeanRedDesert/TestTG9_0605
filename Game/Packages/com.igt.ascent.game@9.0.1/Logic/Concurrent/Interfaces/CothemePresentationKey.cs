// -----------------------------------------------------------------------
// <copyright file = "CothemePresentationKey.cs" company = "IGT">
//     Copyright (c) 2018 IGT.  All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace IGT.Ascent.Logic.Concurrent.Interfaces
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.IO;
    using Game.Core.Cloneable;
    using Game.Core.CompactSerialization;

    /// <summary>
    /// This data type defines a key  that uniquely identifies a theme's presentation
    /// being displayed in a Shell Application.
    /// </summary>
    [Serializable]
    public class CothemePresentationKey : IEquatable<CothemePresentationKey>, ICompactSerializable, IDeepCloneable
    {
        #region Constants and Static Members

        /// <summary>
        /// The constant string identifying a shell, since it does not have G2SThemeId.
        /// </summary>
        public const string ShellG2S = "ShellG2S";

        /// <summary>
        /// The constant used in the place of a "coplayer id" for a shell.
        /// </summary>
        private const int ShellPlayerId = -1;

        /// <summary>
        /// The key dedicated to a shell presentation.
        /// </summary>
        public static CothemePresentationKey ShellKey = new CothemePresentationKey(ShellPlayerId, ShellG2S);

        #endregion

        #region Private Fields

        /// <summary>
        /// The flag indicating whether this instance has been assigned a value before.
        /// </summary>
        private bool hasValue;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the coplayer ID where this theme is being played.
        /// </summary>
        public int CoplayerId { get; private set; }

        /// <summary>
        /// Gets the G2S theme ID defined in the theme registry.
        /// </summary>
        public string G2SThemeId { get; private set; }

        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor for <see cref="ICompactSerializable"/>.
        /// </summary>
        public CothemePresentationKey()
        {
        }

        /// <summary>
        /// Initializes a new instance of <see cref="CothemePresentationKey"/>
        /// </summary>
        /// <param name="coplayerId">
        /// The coplayer ID where this theme is being played.
        /// Constant <see cref="ShellG2S"/> indicates the key is for Shell.
        /// </param>
        /// <param name="g2SThemeId">
        /// The G2S theme ID defined in the theme registry.
        /// </param>
        /// <exception cref="ArgumentException">
        /// Thrown when <paramref name="g2SThemeId"/> is null or empty.
        /// </exception>
        public CothemePresentationKey(int coplayerId, string g2SThemeId)
        {
            if(string.IsNullOrEmpty(g2SThemeId))
            {
                throw new ArgumentException("G2S theme ID  cannot be null or empty.", nameof(g2SThemeId));
            }

            CoplayerId = coplayerId;
            G2SThemeId = g2SThemeId;

            hasValue = true;
        }

        #endregion

        #region IEquatable<CothemePresentationKey> Implementation

        // Generated by ReSharper

        /// <inheritdoc/>
        public bool Equals(CothemePresentationKey other)
        {
            if(ReferenceEquals(null, other))
            {
                return false;
            }

            if(ReferenceEquals(this, other))
            {
                return true;
            }

            return CoplayerId == other.CoplayerId && string.Equals(G2SThemeId, other.G2SThemeId);
        }

        #endregion

        #region Equality Overrides

        // Generated by ReSharper

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if(ReferenceEquals(null, obj))
            {
                return false;
            }

            if(ReferenceEquals(this, obj))
            {
                return true;
            }

            if(obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CothemePresentationKey)obj);
        }

        /// <inheritdoc/>
        [SuppressMessage("ReSharper", "NonReadonlyMemberInGetHashCode")]
        public override int GetHashCode()
        {
            unchecked
            {
                return (CoplayerId * 397) ^ (G2SThemeId != null ? G2SThemeId.GetHashCode() : 0);
            }
        }

        /// <summary>
        /// Overloads the operator ==.
        /// </summary>
        public static bool operator ==(CothemePresentationKey left, CothemePresentationKey right)
        {
            return Equals(left, right);
        }

        /// <summary>
        /// Overloads the operator !=.
        /// </summary>
        public static bool operator !=(CothemePresentationKey left, CothemePresentationKey right)
        {
            return !Equals(left, right);
        }

        #endregion

        #region ToString Overrides

        /// <inheritdoc/>
        public override string ToString()
        {
            // Example: Game02000101S002#0
            return $"{G2SThemeId ?? "Empty"}#{CoplayerId}";
        }

        #endregion

        #region ICompactSerializable Implementation

        /// <inheritdoc/>
        public void Serialize(Stream stream)
        {
            CompactSerializer.Write(stream, CoplayerId);
            CompactSerializer.Write(stream, G2SThemeId);
        }

        /// <inheritdoc/>
        public void Deserialize(Stream stream)
        {
            if(hasValue)
            {
                throw new InvalidOperationException("Cannot deserialize into a CothemePresentationKey instance that has been assigned a value before.");
            }

            CoplayerId = CompactSerializer.ReadInt(stream);
            G2SThemeId = CompactSerializer.ReadString(stream);
            hasValue = true;
        }

        #endregion

        #region IDeepCloneable Implementation

        /// <inheritdoc />
        public object DeepClone()
        {
            return hasValue
                       ? new CothemePresentationKey(CoplayerId, G2SThemeId)
                       : new CothemePresentationKey();
        }

        #endregion
    }
}