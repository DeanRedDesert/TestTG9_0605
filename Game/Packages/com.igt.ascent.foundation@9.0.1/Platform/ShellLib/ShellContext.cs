// -----------------------------------------------------------------------
// <copyright file = "ShellContext.cs" company = "IGT">
//     Copyright (c) 2018 IGT.  All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace IGT.Ascent.Communication.Platform.ShellLib
{
    using System;
    using Interfaces;
    using Platform.Interfaces;

    /// <inheritdoc cref="IShellContext"/>
    /// <summary>
    /// A simple implementation of <see cref="IShellContext"/>.
    /// </summary>
    [Serializable]
    internal sealed class ShellContext : IShellContext, IEquatable<ShellContext>
    {
        #region Constructors

        /// <summary>
        /// Initializes a new instance of <see cref="ShellContext"/> with default, non-null values.
        /// </summary>
        public ShellContext()
        {
            MountPoint = string.Empty;
            GameMode = GameMode.Invalid;
            ShellTag = string.Empty;
            ShellTagDataFile = string.Empty;
        }

        /// <summary>
        /// Initializes a new instance of <see cref="ShellContext"/>.
        /// </summary>
        /// <param name="mountPoint">
        /// The mount point of the shell application package.
        /// </param>
        /// <param name="gameMode">
        /// The game mode in which the shell is running.
        /// </param>
        /// <param name="shellTag">
        /// The TagData defined in the shell registry.
        /// </param>
        /// <param name="shellTagDataFile">
        /// The TagDataFile defined in the shell registry.
        /// </param>
        public ShellContext(string mountPoint, GameMode gameMode, string shellTag, string shellTagDataFile)
        {
            MountPoint = mountPoint ?? string.Empty;
            GameMode = gameMode;
            ShellTag = shellTag ?? string.Empty;
            ShellTagDataFile = shellTagDataFile ?? string.Empty;
        }

        /// <summary>
        /// Initializes a new instance of <see cref="ShellContext"/> by
        /// an object implementing <see cref="IShellContext"/> interface.
        /// </summary>
        /// <exception cref="ArgumentNullException">
        /// Thrown when <paramref name="other"/> is null.
        /// </exception>
        public ShellContext(IShellContext other)
        {
            if(other == null)
            {
                throw new ArgumentNullException(nameof(other));
            }

            MountPoint = other.MountPoint ?? string.Empty;
            GameMode = other.GameMode;
            ShellTag = other.ShellTag ?? string.Empty;
            ShellTagDataFile = other.ShellTagDataFile ?? string.Empty;
        }

        #endregion

        #region IShellContext Implementation

        /// <inheritdoc/>
        public string MountPoint { get; }

        /// <inheritdoc/>
        public GameMode GameMode { get; }

        /// <inheritdoc />
        public string ShellTag { get; }

        /// <inheritdoc/>
        public string ShellTagDataFile { get; }

        #endregion

        #region Equality Overrides

        // Generated by ReSharper

        /// <inheritdoc/>
        public bool Equals(ShellContext other)
        {
            if(ReferenceEquals(null, other))
            {
                return false;
            }
            if(ReferenceEquals(this, other))
            {
                return true;
            }
            return string.Equals(MountPoint, other.MountPoint) &&
                   GameMode == other.GameMode &&
                   string.Equals(ShellTag, other.ShellTag) &&
                   string.Equals(ShellTagDataFile, other.ShellTagDataFile);
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if(ReferenceEquals(null, obj))
            {
                return false;
            }
            if(ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = obj as ShellContext;

            return other != null && Equals(other);
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = MountPoint.GetHashCode();
                hashCode = (hashCode * 397) ^ (int)GameMode;
                hashCode = (hashCode * 397) ^ ShellTag.GetHashCode();
                hashCode = (hashCode * 397) ^ ShellTagDataFile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Overloads the operator ==.
        /// </summary>
        public static bool operator ==(ShellContext left, ShellContext right)
        {
            return Equals(left, right);
        }

        /// <summary>
        /// Overloads the operator !=.
        /// </summary>
        public static bool operator !=(ShellContext left, ShellContext right)
        {
            return !Equals(left, right);
        }

        #endregion

        #region ToString Overrides

        /// <inheritdoc/>
        public override string ToString()
        {
            return $"GameMode({GameMode})/Tag({ShellTag})/TagFile({ShellTagDataFile})";
        }

        #endregion
    }
}