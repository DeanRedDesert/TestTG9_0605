//-----------------------------------------------------------------------
// <copyright file = "ParcelCommEndpoint.cs" company = "IGT">
//     Copyright (c) 2018 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace IGT.Ascent.Communication.Platform.Interfaces
{
    using System;

    /// <summary>
    /// This class defines the endpoint entity of parcel communication.
    /// </summary>
    [Serializable]
    public sealed class ParcelCommEndpoint : IEquatable<ParcelCommEndpoint>
    {
        /// <summary>
        /// Gets the type of the endpoint entity.
        /// </summary>
        public EndpointType EntityType { get; }

        /// <summary>
        /// Gets the identifier of the endpoint entity.
        /// </summary>
        public string EntityIdentifier { get; }

        /// <summary>
        /// Initializes a new instance of <see cref="ParcelCommEndpoint"/>.
        /// </summary>
        /// <param name="entityType">The type of the endpoint entity.</param>
        /// <param name="entityIdentifier">The identifier of the endpoint entity.</param>
        /// <exception cref="ArgumentException">
        /// Thrown when the combination of <paramref name="entityType"/> and <paramref name="entityIdentifier"/>
        /// is not allowed.
        /// </exception>
        public ParcelCommEndpoint(EndpointType entityType, string entityIdentifier)
        {
            string errorMessage = null;

            switch(entityType)
            {
                case EndpointType.Theme:
                case EndpointType.Shell:
                {
                    // For theme or shell, whether the identifier is allowed to be null or empty
                    // depends on if the endpoint is the source or the target.
                    break;
                }
                case EndpointType.Extension:
                case EndpointType.Ptc:
                {
                    if(string.IsNullOrEmpty(entityIdentifier))
                    {
                        errorMessage = "Entity identifier cannot be null or empty for EndPointType " + entityType;
                    }
                    break;
                }
                case EndpointType.CommonThemeControl:
                case EndpointType.Chooser:
                {
                    if(!string.IsNullOrEmpty(entityIdentifier))
                    {
                        errorMessage = "Entity identifier must be null or empty for EndPointType " + entityType;
                    }
                    break;
                }
               default:
                {
                    errorMessage = "Unrecognized EndPointType: " + entityType;
                    break;
                }
            }

            if(errorMessage != null)
            {
                throw new ArgumentException(errorMessage);
            }

            EntityType = entityType;
            EntityIdentifier = entityIdentifier;
        }

        #region Equality members

        // Generated by ReSharper

        /// <inheritdoc/>
        public bool Equals(ParcelCommEndpoint other)
        {
            if(ReferenceEquals(null, other))
            {
                return false;
            }

            if(ReferenceEquals(this, other))
            {
                return true;
            }

            return EntityType == other.EntityType && string.Equals(EntityIdentifier, other.EntityIdentifier);
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if(ReferenceEquals(null, obj))
            {
                return false;
            }

            if(ReferenceEquals(this, obj))
            {
                return true;
            }

            var endpoint = obj as ParcelCommEndpoint;

            return endpoint != null && Equals(endpoint);
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            unchecked
            {
                return ((int)EntityType * 397) ^ (EntityIdentifier != null ? EntityIdentifier.GetHashCode() : 0);
            }
        }

        /// <summary>
        /// Overloads the operator ==.
        /// </summary>
        public static bool operator ==(ParcelCommEndpoint left, ParcelCommEndpoint right)
        {
            return Equals(left, right);
        }

        /// <summary>
        /// Overloads the operator !=.
        /// </summary>
        public static bool operator !=(ParcelCommEndpoint left, ParcelCommEndpoint right)
        {
            return !Equals(left, right);
        }

        #endregion

        /// <inheritdoc/>
        public override string ToString()
        {
            return $"Endpoint: type({EntityType}) / identifier({EntityIdentifier})";
        }
    }
}