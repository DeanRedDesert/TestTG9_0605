// -----------------------------------------------------------------------
// <copyright file = "IdentifierToken.cs" company = "IGT">
//     Copyright (c) 2018 IGT.  All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

// TODO: http://cspjira:8080/jira/browse/AS-8697
// ReSharper disable NonReadonlyMemberInGetHashCode
namespace IGT.Ascent.Communication.Platform.Interfaces
{
    using System;
    using System.IO;
    using Game.Core.CompactSerialization;

    /// <summary>
    /// This class encapsulates an identifier string and provides comparison functionality
    /// so that the identifier may be compared without exposing the string value itself.
    /// </summary>
    /// <remarks>
    /// Typical use of this token includes all Foundation maintained identifiers, such as
    /// ThemeIdentifier and PayvarIdentifier etc.
    /// </remarks>
    [Serializable]
    public sealed class IdentifierToken : IEquatable<IdentifierToken>, ICompactSerializable
    {
        #region Properties

        /// <summary>
        /// Gets the internal string value of the token.
        /// </summary>
        /// <remarks>
        /// This internal value is only accessible to selected internal components.
        /// </remarks>
        internal string StringValue { get; private set; }

        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor, required by <see cref="ICompactSerializable"/>.
        /// </summary>
        public IdentifierToken()
        {
        }

        /// <summary>
        /// Initializes a new instance of <see cref="IdentifierToken"/>
        /// with a string value.
        /// </summary>
        /// <param name="stringValue">
        /// The string value this token represents.
        /// </param>
        internal IdentifierToken(string stringValue)
        {
            StringValue = stringValue ?? throw new ArgumentNullException(nameof(stringValue));
        }

        #endregion

        #region IEquatable Implementation

        // Generated by ReSharper

        /// <inheritdoc/>
        public bool Equals(IdentifierToken other)
        {
            if(ReferenceEquals(null, other))
            {
                return false;
            }

            if(ReferenceEquals(this, other))
            {
                return true;
            }

            return string.Equals(StringValue, other.StringValue);
        }

        #endregion

        #region ICompactSerializable Implementation

        /// <inheritdoc/>
        public void Serialize(Stream stream)
        {
            CompactSerializer.Write(stream, StringValue);
        }

        /// <inheritdoc/>
        public void Deserialize(Stream stream)
        {
            StringValue = CompactSerializer.ReadString(stream);
        }

        #endregion

        #region Equality Overrides

        // Generated by ReSharper

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if(ReferenceEquals(null, obj))
            {
                return false;
            }

            if(ReferenceEquals(this, obj))
            {
                return true;
            }

            var token = obj as IdentifierToken;
            return token != null && Equals(token);
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return StringValue != null ? StringValue.GetHashCode() : 0;
        }

        /// <summary>
        /// Overloads the operator ==.
        /// </summary>
        public static bool operator ==(IdentifierToken left, IdentifierToken right)
        {
            return Equals(left, right);
        }

        /// <summary>
        /// Overloads the operator !=.
        /// </summary>
        public static bool operator !=(IdentifierToken left, IdentifierToken right)
        {
            return !Equals(left, right);
        }

        #endregion

        #region ToString Overrides

        /// <inheritdoc/>
        public override string ToString()
        {
            return "Identifier Token with Protected Internal Value";
        }

        #endregion
    }
}
