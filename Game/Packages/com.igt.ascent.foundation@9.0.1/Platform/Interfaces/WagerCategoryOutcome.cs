// -----------------------------------------------------------------------
// <copyright file = "WagerCategoryOutcome.cs" company = "IGT">
//     Copyright (c) 2018 IGT.  All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

// TODO: http://cspjira:8080/jira/browse/AS-8697
// ReSharper disable NonReadonlyMemberInGetHashCode
namespace IGT.Ascent.Communication.Platform.Interfaces
{
    using System;
    using System.IO;
    using Game.Core.CompactSerialization;

    /// <summary>
    /// Struct that represents the information on a wager category's outcome.
    /// </summary>
    [Serializable]
    public struct WagerCategoryOutcome : IEquatable<WagerCategoryOutcome>, ICompactSerializable
    {
        #region Properties

        /// <summary>
        /// Index of the wager category.
        /// </summary>
        public ushort CategoryIndex { get; private set; }

        /// <summary>
        /// Wager amount for the wager category, in units of Denomination.
        /// </summary>
        public long WagerAmount { get; private set; }

        /// <summary>
        /// The denomination for the WagerAmount.
        /// </summary>
        public long Denomination { get; private set; }

        #endregion

        #region MyRegion

        /// <summary>
        /// Constructor taking parameters for all three fields.
        /// </summary>
        /// <param name="categoryIndex">Index of the wager category.</param>
        /// <param name="wagerAmount">Wager amount for the wager category,
        ///                           in units of the denomination passed in.</param>
        /// <param name="denomination">Denomination for the wager amount passed in.</param>
        public WagerCategoryOutcome(ushort categoryIndex, long wagerAmount, long denomination)
            : this()
        {
            CategoryIndex = categoryIndex;
            WagerAmount = wagerAmount;
            Denomination = denomination;
        }

        #endregion

        #region Equality members

        // Mostly generated by ReSharper

        /// <inheritdoc />
        /// <remarks>
        /// Two instances are considered equal if the category indexes match,
        /// and the wager amounts are equal in base units.
        /// </remarks>
        public bool Equals(WagerCategoryOutcome other)
        {
            checked
            {
                return CategoryIndex == other.CategoryIndex &&
                       WagerAmount * Denomination == other.WagerAmount * other.Denomination;
            }
        }

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if(ReferenceEquals(null, obj))
            {
                return false;
            }

            return obj is WagerCategoryOutcome outcome && Equals(outcome);
        }

        /// <inheritdoc />
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = CategoryIndex.GetHashCode();
                hashCode = (hashCode * 397) ^ (WagerAmount * Denomination).GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Overloads the operator ==.
        /// </summary>
        public static bool operator ==(WagerCategoryOutcome left, WagerCategoryOutcome right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Overloads the operator !=.
        /// </summary>
        public static bool operator !=(WagerCategoryOutcome left, WagerCategoryOutcome right)
        {
            return !left.Equals(right);
        }

        #endregion

        #region ICompactSerializable Members

        /// <inheritdoc />
        void ICompactSerializable.Serialize(Stream stream)
        {
            CompactSerializer.Write(stream, CategoryIndex);
            CompactSerializer.Write(stream, WagerAmount);
            CompactSerializer.Write(stream, Denomination);
        }

        /// <inheritdoc />
        void ICompactSerializable.Deserialize(Stream stream)
        {
            CategoryIndex = CompactSerializer.ReadUshort(stream);
            WagerAmount = CompactSerializer.ReadLong(stream);
            Denomination = CompactSerializer.ReadLong(stream);
        }

        #endregion

        #region ToString Overrides

        /// <summary>
        /// Override base implementation to provide better information.
        /// </summary>
        /// <returns>A string describing the object.</returns>
        public override string ToString()
        {
            return
                $"WagerCategoryOutcome: CategoryIndex({CategoryIndex}) / WagerAmount({WagerAmount}) / Denomination({Denomination})";
        }

        #endregion
    }
}
