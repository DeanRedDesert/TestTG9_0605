//-----------------------------------------------------------------------
// <copyright file = "MessageTypePartials.cs" company = "IGT">
//     Copyright (c) 2015 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

// ReSharper disable once CheckNamespace
namespace IGT.Game.Core.Communication.Foundation.F2L.Schemas.Internal
{
    using F2XTransport;

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class AutoPlayMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class AutoPlay : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public AutoPlay()
        {
            Message = new AutoPlayMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class CdsItalyMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class CdsItaly : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public CdsItaly()
        {
            Message = new CdsItalyMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class CdsItalyMockEnrollmentMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class CdsItalyMockEnrollment : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public CdsItalyMockEnrollment()
        {
            Message = new CdsItalyMockEnrollmentMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class ConnectMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class Connect : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public Connect()
        {
            Message = new ConnectMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class ForceGameCompletionMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class ForceGameCompletion : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public ForceGameCompletion()
        {
            Message = new ForceGameCompletionMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class GameContextLockingMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class GameContextLocking : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public GameContextLocking()
        {
            Message = new GameContextLockingMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class GameControlMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class GameControl : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public GameControl()
        {
            Message = new GameControlMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class GameStopReportMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class GameStopReport : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public GameStopReport()
        {
            Message = new GameStopReportMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class GameTiltMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class GameTilt : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public GameTilt()
        {
            Message = new GameTiltMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class IdentificationMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class Identification : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public Identification()
        {
            Message = new IdentificationMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class LinkControlMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class LinkControl : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public LinkControl()
        {
            Message = new LinkControlMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    // ReSharper disable once InconsistentNaming
    public partial class ProtocolIPPForwardingMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    // ReSharper disable once InconsistentNaming
    public partial class ProtocolIPPForwarding : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public ProtocolIPPForwarding()
        {
            Message = new ProtocolIPPForwardingMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class ShowDemoMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class ShowDemo : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public ShowDemo()
        {
            Message = new ShowDemoMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class ThemeToExtParcelCommMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class ThemeToExtParcelComm : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public ThemeToExtParcelComm()
        {
            Message = new ThemeToExtParcelCommMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class VoucherPrintMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class VoucherPrint : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public VoucherPrint()
        {
            Message = new VoucherPrintMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

    /// <summary>
    /// Partial class to add <see cref="ICategoryMessage"/>.
    /// </summary>
    public partial class WapSignControlMessageType : ICategoryMessage
    {
    }

    /// <summary>
    /// Partial class to add <see cref="ICategory"/>.
    /// </summary>
    public partial class WapSignControl : ICategory
    {
        /// <summary>
        /// Default constructor to initialize the interior message.
        /// </summary>
        public WapSignControl()
        {
            Message = new WapSignControlMessageType();
        }

        #region ICategory Members

        /// <inheritdoc/>
        ICategoryMessage ICategory.Message => Message;

        /// <inheritdoc/>
        IVersion ICategory.Version
        {
            get => Version;
            set => Version = (VersionType)value;
        }

        #endregion

    }

}

