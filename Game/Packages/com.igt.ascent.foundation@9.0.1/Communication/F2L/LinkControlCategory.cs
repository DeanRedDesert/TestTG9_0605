//-----------------------------------------------------------------------
// <copyright file = "LinkControlCategory.cs" company = "IGT">
//     Copyright (c) 2018 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// Modified MessageCategory from LinkControl to F2LLinkControl.
// Changed "new Version" to "new VersionType" in supportedVersions.  This is believed to be a C3G bug.
// Imported Schemas namespace for VersionType
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2L
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas;
    using Schemas.Internal;

    /// <summary>
    /// Implementation of the F2L <see cref="LinkControl"/> category.
    /// Link control category of messages.  Category: 2  Version: 2
    /// </summary>
    public class LinkControlCategory : F2LCategoryBase<LinkControl>, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the LinkControlCategory callbacks.
        /// </summary>
        private readonly ILinkControlCategoryCallbacks callbackHandler;

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<VersionType> supportedVersions = new List<VersionType>
        {
            new VersionType(2, 0),
            new VersionType(2, 1),
            new VersionType(2, 2),
            new VersionType(2, 3),
            new VersionType(2, 4)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private VersionType effectiveVersion = new VersionType(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="LinkControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// LinkControlCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public LinkControlCategory(IF2XTransport transport, ILinkControlCategoryCallbacks callbackHandler)
            : base(transport)
        {
            if(callbackHandler == null)
            {
                throw new ArgumentNullException("callbackHandler");
            }

            this.callbackHandler = callbackHandler;

            AddMessagehandler<LinkControlGetThemeApiVersionsSend>(HandleGetThemeApiVersions);
            AddMessagehandler<LinkControlParkSend>(HandlePark);
            AddMessagehandler<LinkControlSetThemeApiVersionsSend>(HandleSetThemeApiVersions);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category
        {
            get { return MessageCategory.F2LLinkControl; }
        }

        /// <inheritdoc/>
        public override uint MajorVersion
        {
            get { return effectiveVersion.MajorVersion; }
        }

        /// <inheritdoc/>
        public override uint MinorVersion
        {
            get { return effectiveVersion.MinorVersion; }
        }

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new VersionType(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    string.Format("{0} is not supported by LinkControlCategory class.", version));
            }

            effectiveVersion = version;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the LinkControlGetThemeApiVersionsSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGetThemeApiVersions(LinkControlGetThemeApiVersionsSend message)
        {
            LinkControlGetThemeApiVersionsReplyCategoryVersions callbackResult;
            var errorMessage = callbackHandler.ProcessGetThemeApiVersions(message.BinTag, message.BinConnectToken, message.BinTagDataFile, message.ThemeTag, message.ThemeTagDataFile, message.ResourcePaths, message.EnvironmentAttributes, message.Jurisdiction, message.Extensions, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<LinkControlGetThemeApiVersionsReply>(errorCode, errorMessage);
            var reply = (LinkControlGetThemeApiVersionsReply)replyMessage.Message.Item;
            reply.CategoryVersions = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the LinkControlParkSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandlePark(LinkControlParkSend message)
        {
            var errorMessage = callbackHandler.ProcessPark();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<LinkControlParkReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the LinkControlSetThemeApiVersionsSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleSetThemeApiVersions(LinkControlSetThemeApiVersionsSend message)
        {
            var errorMessage = callbackHandler.ProcessSetThemeApiVersions(message.CategoryVersions);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<LinkControlSetThemeApiVersionsReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

