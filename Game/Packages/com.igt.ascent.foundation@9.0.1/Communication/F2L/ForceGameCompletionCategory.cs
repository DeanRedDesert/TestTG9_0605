//-----------------------------------------------------------------------
// <copyright file = "ForceGameCompletionCategory.cs" company = "IGT">
//     Copyright (c) 2015 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2L
{
    using System;
    using F2XTransport;
    using Schemas.Internal;

    /// <summary>
    /// Implementation of the F2L <see cref="ForceGameCompletion"/> category.
    /// ForceGameCompletion category of messages.  Category: 15  Version: 1  Based on GLI Standard #23, Video Lottery Terminal Disable Procedures.
    /// </summary>
    public class ForceGameCompletionCategory : F2LTransactionalCategoryBase<ForceGameCompletion>, IForceGameCompletionCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the ForceGameCompletionCategory callbacks.
        /// </summary>
        private readonly IForceGameCompletionCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ForceGameCompletionCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ForceGameCompletionCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ForceGameCompletionCategory(IF2XTransport transport, IForceGameCompletionCategoryCallbacks callbackHandler)
            : base(transport)
        {
            if(callbackHandler == null)
            {
                throw new ArgumentNullException("callbackHandler");
            }

            this.callbackHandler = callbackHandler;

            AddMessagehandler<ForceGameCompletionForceGameCompletionStatusChangedSend>(HandleForceGameCompletionStatusChanged);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category
        {
            get { return MessageCategory.ForceGameCompletion; }
        }

        /// <inheritdoc/>
        public override uint MajorVersion
        {
            get { return 1; }
        }

        /// <inheritdoc/>
        public override uint MinorVersion
        {
            get { return 0; }
        }

        #endregion

        #region IForceGameCompletionCategory Members

        /// <inheritdoc/>
        public ForceGameCompletionStatusType QueryForceGameCompletionStatus()
        {
            var request = CreateTransactionalRequest<ForceGameCompletionQueryForceGameCompletionStatusSend>();

            var reply = SendMessageAndGetReply<ForceGameCompletionQueryForceGameCompletionStatusReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply.ForceGameCompletionStatus;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ForceGameCompletionForceGameCompletionStatusChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleForceGameCompletionStatusChanged(ForceGameCompletionForceGameCompletionStatusChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessForceGameCompletionStatusChanged(message.ForceGameCompletionStatus);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ForceGameCompletionForceGameCompletionStatusChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

