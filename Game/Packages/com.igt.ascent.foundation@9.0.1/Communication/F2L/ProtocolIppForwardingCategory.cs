//-----------------------------------------------------------------------
// <copyright file = "ProtocolIppForwardingCategory.cs" company = "IGT">
//     Copyright (c) 2014 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// manual edit
// 1. changed the file header of copy right start year.
// 2. changed the method name TransportBinDataToIPPHost to TransportBinDataToIppHost to avoid API change.
// 3. changed the method name HandleTransportIPPHostDataToBin to HandleTransportIppHostDataToBin to comply with the 
//    code standard.
// 4. added null check in HandleTransportIppHostDataToBin to be consistent with the old code.

namespace IGT.Game.Core.Communication.Foundation.F2L
{
    using System;
    using F2XTransport;
    using Schemas.Internal;

    /// <summary>
    /// Implementation of the F2L <see cref="ProtocolIPPForwarding"/> category.
    /// ProtocolIPPForwarding category of messages.  Category: 11  Version: 1
    /// </summary>
    public class ProtocolIppForwardingCategory : F2LCategoryBase<ProtocolIPPForwarding>, IProtocolIppForwardingCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the ProtocolIppForwardingCategory callbacks.
        /// </summary>
        private readonly IProtocolIppForwardingCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ProtocolIppForwardingCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ProtocolIppForwardingCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ProtocolIppForwardingCategory(IF2XTransport transport, IProtocolIppForwardingCategoryCallbacks callbackHandler)
            : base(transport)
        {
            if(callbackHandler == null)
            {
                throw new ArgumentNullException("callbackHandler");
            }

            this.callbackHandler = callbackHandler;

            AddMessagehandler<ProtocolIPPForwardingTransportIPPHostDataToBinSend>(HandleTransportIppHostDataToBin);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category
        {
            get { return MessageCategory.ProtocolIppForwarding; }
        }

        /// <inheritdoc/>
        public override uint MajorVersion
        {
            get { return 1; }
        }

        /// <inheritdoc/>
        public override uint MinorVersion
        {
            get { return 0; }
        }

        #endregion

        #region IProtocolIppForwardingCategory Members

        /// <inheritdoc/>
        public void TransportBinDataToIppHost(Byte[] binaryData)
        {
            var request = CreateBasicRequest<ProtocolIPPForwardingTransportBinDataToIPPHostSend>();
            var content = (ProtocolIPPForwardingTransportBinDataToIPPHostSend)request.Message.Item;
            content.BinaryData = binaryData;

            var reply = SendMessageAndGetReply<ProtocolIPPForwardingTransportBinDataToIPPHostReply>(Channel.Game, request);
            CheckReply(reply.Reply);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ProtocolIPPForwardingTransportIPPHostDataToBinSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleTransportIppHostDataToBin(ProtocolIPPForwardingTransportIPPHostDataToBinSend message)
        {
            if(message.BinaryData == null)
            {
                throw new ArgumentException("The message received from the host contains null data.");
            }

            var errorMessage = callbackHandler.ProcessTransportIppHostDataToBin(message.BinaryData);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ProtocolIPPForwardingTransportIPPHostDataToBinReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        #endregion

    }

}

