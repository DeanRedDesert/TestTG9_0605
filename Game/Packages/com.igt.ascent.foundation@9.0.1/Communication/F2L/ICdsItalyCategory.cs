//-----------------------------------------------------------------------
// <copyright file = "ICdsItalyCategory.cs" company = "IGT">
//     Copyright (c) 2015 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2L
{
    using System;
    using Schemas;
    using Schemas.Internal;

    /// <summary>
    /// Central Determination Italy category of messages.  Category: 12  Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ICdsItalyCategory
    {
        /// <summary>
        /// Message from the bin to the Foundation notifying the Foundation that the host outcome/enrollment information did not match the theme/EGM evaluated award information.  B2F: FI channel.
        /// </summary>
        /// <param name="logMessage">
        /// Log message detailing the specifics of the mismatch.  This string is for logging purposes and is NOT displayed to the player or in tilt messages.
        /// </param>
        void AwardMismatchDetected(String logMessage);

        /// <summary>
        /// Message from the bin to foundation requesting an outcome be committed.
        /// </summary>
        /// <param name="commitType">
        /// Indicates what type of commit is being requested.
        /// </param>
        /// <param name="pendingPreTaxWin">
        /// The total per-tax win amount for the pending win of the game-cycle.
        /// </param>
        /// <param name="commitRequestData">
        /// Binary data containing information specific to the commit request.  This data is opaque to the Foundation.
        /// </param>
        void CommitOutcome(OutcomeCommitType commitType, AmountType pendingPreTaxWin, Byte[] commitRequestData);

        /// <summary>
        /// Message from the bin to the foundation to query whether the jackpot bonus is enabled.
        /// </summary>
        /// <returns>
        /// True if the jackpot bonus is correctly configured and enabled.  A jackpot hit is not possible if this value is false.
        /// </returns>
        Boolean GetConfigDataJackpotBonusEnabled();

        /// <summary>
        /// Message from the bin to the foundation to query for the taxable win configuration info.
        /// </summary>
        /// <returns>
        /// The content of the CdsItalyGetConfigDataTaxInfoReply message.
        /// </returns>
        CdsItalyGetConfigDataTaxInfoReply GetConfigDataTaxInfo();

        /// <summary>
        /// Message from the bin to the foundation retrieving the enrollment response data from the last successful response.
        /// </summary>
        /// <returns>
        /// Binary data containing enrollment response information in a format specific to the theme/game.  This data is opaque to the Foundation.
        /// </returns>
        Byte[] GetEnrollmentResponseData();

        /// <summary>
        /// Message from the bin to the foundation retrieving the jackpot award if one was hit.
        /// </summary>
        /// <returns>
        /// The content of the CdsItalyGetJackpotBonusAwardReply message.
        /// </returns>
        CdsItalyGetJackpotBonusAwardReply GetJackpotBonusAward();

        /// <summary>
        /// Message from the bin to the foundation retrieving the outcome response for the last outcome request made by the bin.  It returns an error if the last outcome request failed.
        /// </summary>
        /// <returns>
        /// Binary data containing information specific to the outcome request.  This data is opaque to the Foundation.
        /// </returns>
        Byte[] GetOutcomeResponse();

        /// <summary>
        /// Message from the bin to the foundation that computes the tax amount for a given win amount.
        /// </summary>
        /// <param name="totalWinAmount">
        /// Total win for the game.
        /// </param>
        /// <returns>
        /// The content of the CdsItalyGetTaxableWinInfoReply message.
        /// </returns>
        CdsItalyGetTaxableWinInfoReply GetTaxableWinInfo(AmountType totalWinAmount);

        /// <summary>
        /// Message from the bin to foundation requesting a new outcome.
        /// </summary>
        /// <param name="wagerAmount">
        /// Amount wagered for this requested outcome.
        /// </param>
        /// <param name="wagerCatIndex">
        /// Index of the wager category for this request.
        /// </param>
        /// <param name="outcomeRequestData">
        /// Binary data containing information specific to the outcome request.  This data is opaque to the Foundation.
        /// </param>
        void OutcomeRequest(AmountType wagerAmount, UInt32 wagerCatIndex, Byte[] outcomeRequestData);

        /// <summary>
        /// Message from the bin to foundation that provides the enrollment specifics to be used for the next enrollment request.
        /// </summary>
        /// <param name="wagerAmount">
        /// Amount wagered as per the enrollment request.
        /// </param>
        /// <param name="wagerCatIndex">
        /// Index of the wager category as per enrollment.
        /// </param>
        /// <param name="gameRequestData">
        /// Binary data containing enrollment request information in a format specific to the theme/game.  This data is opaque to the Foundation.
        /// </param>
        void SetEnrollmentRequestData(AmountType wagerAmount, UInt32 wagerCatIndex, Byte[] gameRequestData);

    }

}

