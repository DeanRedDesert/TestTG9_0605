//-----------------------------------------------------------------------
// <copyright file = "GameContextLockingCategory.cs" company = "IGT">
//     Copyright (c) 2015 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2L
{
    using System;
    using F2XTransport;
    using Schemas.Internal;

    /// <summary>
    /// Implementation of the F2L <see cref="GameContextLocking"/> category.
    /// Game Context Locking category of messages.  Category: 9  Version: 1
    /// </summary>
    public class GameContextLockingCategory : F2LTransactionalCategoryBase<GameContextLocking>, IGameContextLockingCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameContextLockingCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public GameContextLockingCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category
        {
            get { return MessageCategory.GameContextLocking; }
        }

        /// <inheritdoc/>
        public override uint MajorVersion
        {
            get { return 1; }
        }

        /// <inheritdoc/>
        public override uint MinorVersion
        {
            get { return 0; }
        }

        #endregion

        #region IGameContextLockingCategory Members

        /// <inheritdoc/>
        public Boolean GetGameContextLockStatus()
        {
            var request = CreateTransactionalRequest<GameContextLockingGetGameContextLockStatusSend>();

            var reply = SendMessageAndGetReply<GameContextLockingGetGameContextLockStatusReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply.Locked;
        }

        /// <inheritdoc/>
        public Boolean SetGameContextLock(Boolean locked)
        {
            var request = CreateTransactionalRequest<GameContextLockingSetGameContextLockSend>();
            var content = (GameContextLockingSetGameContextLockSend)request.Message.Item;
            content.Locked = locked;

            var reply = SendMessageAndGetReply<GameContextLockingSetGameContextLockReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply.Success;
        }

        #endregion

    }

}

