//-----------------------------------------------------------------------
// <copyright file = "ThemeToExtParcelCommCategory.cs" company = "IGT">
//     Copyright (c) 2015 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2L
{
    using System;
    using F2XTransport;
    using Schemas.Internal;

    /// <summary>
    /// Implementation of the F2L <see cref="ThemeToExtParcelComm"/> category.
    /// F2L Theme To Extension Parcel Communication category of messages.  Category: 14  Version: 1
    /// </summary>
    public class ThemeToExtParcelCommCategory : F2LTransactionalCategoryBase<ThemeToExtParcelComm>, IThemeToExtParcelCommCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the ThemeToExtParcelCommCategory callbacks.
        /// </summary>
        private readonly IThemeToExtParcelCommCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ThemeToExtParcelCommCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ThemeToExtParcelCommCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ThemeToExtParcelCommCategory(IF2XTransport transport, IThemeToExtParcelCommCategoryCallbacks callbackHandler)
            : base(transport)
        {
            if(callbackHandler == null)
            {
                throw new ArgumentNullException("callbackHandler");
            }

            this.callbackHandler = callbackHandler;

            AddMessagehandler<ThemeToExtParcelCommExtensionParcelCallRxSend>(HandleExtensionParcelCallRx);
            AddMessagehandler<ThemeToExtParcelCommExtensionTransParcelCallRxSend>(HandleExtensionTransParcelCallRx);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category
        {
            get { return MessageCategory.ThemeToExtParcelComm; }
        }

        /// <inheritdoc/>
        public override uint MajorVersion
        {
            get { return 1; }
        }

        /// <inheritdoc/>
        public override uint MinorVersion
        {
            get { return 1; }
        }

        #endregion

        #region IThemeToExtParcelCommCategory Members

        /// <inheritdoc/>
        public ThemeToExtParcelCommExtensionParcelCallTxReply ExtensionParcelCallTx(String extension, Byte[] payload)
        {
            var request = CreateBasicRequest<ThemeToExtParcelCommExtensionParcelCallTxSend>();
            var content = (ThemeToExtParcelCommExtensionParcelCallTxSend)request.Message.Item;
            content.Extension = extension;
            content.Payload = payload;

            var reply = SendMessageAndGetReply<ThemeToExtParcelCommExtensionParcelCallTxReply>(Channel.Game, request);
            CheckReply(reply.Reply);
            return reply;
        }

        /// <inheritdoc/>
        public ThemeToExtParcelCommExtensionTransParcelCallTxReply ExtensionTransParcelCallTx(String extension, Byte[] payload)
        {
            var request = CreateTransactionalRequest<ThemeToExtParcelCommExtensionTransParcelCallTxSend>();
            var content = (ThemeToExtParcelCommExtensionTransParcelCallTxSend)request.Message.Item;
            content.Extension = extension;
            content.Payload = payload;

            var reply = SendMessageAndGetReply<ThemeToExtParcelCommExtensionTransParcelCallTxReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ThemeToExtParcelCommExtensionParcelCallRxSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleExtensionParcelCallRx(ThemeToExtParcelCommExtensionParcelCallRxSend message)
        {
            ThemeToExtParcelCommExtensionParcelCallRxReply callbackResult;
            var errorMessage = callbackHandler.ProcessExtensionParcelCallRx(message.Extension, message.Payload, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ThemeToExtParcelCommExtensionParcelCallRxReply>(errorCode, errorMessage);
            var reply = (ThemeToExtParcelCommExtensionParcelCallRxReply)replyMessage.Message.Item;
            reply.Accepted = callbackResult.Accepted;
            reply.Payload = callbackResult.Payload;
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the ThemeToExtParcelCommExtensionTransParcelCallRxSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleExtensionTransParcelCallRx(ThemeToExtParcelCommExtensionTransParcelCallRxSend message)
        {
            ThemeToExtParcelCommExtensionTransParcelCallRxReply callbackResult;
            var errorMessage = callbackHandler.ProcessExtensionTransParcelCallRx(message.Extension, message.Payload, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ThemeToExtParcelCommExtensionTransParcelCallRxReply>(errorCode, errorMessage);
            var reply = (ThemeToExtParcelCommExtensionTransParcelCallRxReply)replyMessage.Message.Item;
            reply.Accepted = callbackResult.Accepted;
            reply.Payload = callbackResult.Payload;
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

