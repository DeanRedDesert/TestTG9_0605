//-----------------------------------------------------------------------
// <copyright file = "CdsItalyCategory.cs" company = "IGT">
//     Copyright (c) 2015 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2L
{
    using System;
    using F2XTransport;
    using Schemas;
    using Schemas.Internal;

    /// <summary>
    /// Implementation of the F2L <see cref="CdsItaly"/> category.
    /// Central Determination Italy category of messages.  Category: 12  Version: 1
    /// </summary>
    public class CdsItalyCategory : F2LTransactionalCategoryBase<CdsItaly>, ICdsItalyCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the CdsItalyCategory callbacks.
        /// </summary>
        private readonly ICdsItalyCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="CdsItalyCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// CdsItalyCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public CdsItalyCategory(IF2XTransport transport, ICdsItalyCategoryCallbacks callbackHandler)
            : base(transport)
        {
            if(callbackHandler == null)
            {
                throw new ArgumentNullException("callbackHandler");
            }

            this.callbackHandler = callbackHandler;

            AddMessagehandler<CdsItalyOutcomeResponseSend>(HandleOutcomeResponse);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category
        {
            get { return MessageCategory.CdsItaly; }
        }

        /// <inheritdoc/>
        public override uint MajorVersion
        {
            get { return 1; }
        }

        /// <inheritdoc/>
        /// <devdocs>
        /// This category does not implement <see cref="IMultiVersionSupport"/> because
        /// there was no SDK implementation at the time of the version changes.
        /// </devdocs>
        public override uint MinorVersion
        {
            get { return 2; }
        }

        #endregion

        #region ICdsItalyCategory Members

        /// <inheritdoc/>
        public void AwardMismatchDetected(String logMessage)
        {
            var request = CreateTransactionalRequest<CdsItalyAwardMismatchDetectedSend>();
            var content = (CdsItalyAwardMismatchDetectedSend)request.Message.Item;
            content.LogMessage = logMessage;

            var reply = SendMessageAndGetReply<CdsItalyAwardMismatchDetectedReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
        }

        /// <inheritdoc/>
        public void CommitOutcome(OutcomeCommitType commitType, AmountType pendingPreTaxWin, Byte[] commitRequestData)
        {
            var request = CreateTransactionalRequest<CdsItalyCommitOutcomeSend>();
            var content = (CdsItalyCommitOutcomeSend)request.Message.Item;
            content.CommitType = commitType;
            content.PendingPreTaxWin = pendingPreTaxWin;
            content.CommitRequestData = commitRequestData;

            var reply = SendMessageAndGetReply<CdsItalyCommitOutcomeReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
        }

        /// <inheritdoc/>
        public Boolean GetConfigDataJackpotBonusEnabled()
        {
            var request = CreateTransactionalRequest<CdsItalyGetConfigDataJackpotBonusEnabledSend>();

            var reply = SendMessageAndGetReply<CdsItalyGetConfigDataJackpotBonusEnabledReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply.BonusEnabled;
        }

        /// <inheritdoc/>
        public CdsItalyGetConfigDataTaxInfoReply GetConfigDataTaxInfo()
        {
            var request = CreateTransactionalRequest<CdsItalyGetConfigDataTaxInfoSend>();

            var reply = SendMessageAndGetReply<CdsItalyGetConfigDataTaxInfoReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply;
        }

        /// <inheritdoc/>
        public Byte[] GetEnrollmentResponseData()
        {
            var request = CreateTransactionalRequest<CdsItalyGetEnrollmentResponseDataSend>();

            var reply = SendMessageAndGetReply<CdsItalyGetEnrollmentResponseDataReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply.GameResponseData;
        }

        /// <inheritdoc/>
        public CdsItalyGetJackpotBonusAwardReply GetJackpotBonusAward()
        {
            var request = CreateTransactionalRequest<CdsItalyGetJackpotBonusAwardSend>();

            var reply = SendMessageAndGetReply<CdsItalyGetJackpotBonusAwardReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply;
        }

        /// <inheritdoc/>
        public Byte[] GetOutcomeResponse()
        {
            var request = CreateTransactionalRequest<CdsItalyGetOutcomeResponseSend>();

            var reply = SendMessageAndGetReply<CdsItalyGetOutcomeResponseReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply.OutcomeResponseData;
        }

        /// <inheritdoc/>
        public CdsItalyGetTaxableWinInfoReply GetTaxableWinInfo(AmountType totalWinAmount)
        {
            var request = CreateTransactionalRequest<CdsItalyGetTaxableWinInfoSend>();
            var content = (CdsItalyGetTaxableWinInfoSend)request.Message.Item;
            content.TotalWinAmount = totalWinAmount;

            var reply = SendMessageAndGetReply<CdsItalyGetTaxableWinInfoReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
            return reply;
        }

        /// <inheritdoc/>
        public void OutcomeRequest(AmountType wagerAmount, UInt32 wagerCatIndex, Byte[] outcomeRequestData)
        {
            var request = CreateTransactionalRequest<CdsItalyOutcomeRequestSend>();
            var content = (CdsItalyOutcomeRequestSend)request.Message.Item;
            content.WagerAmount = wagerAmount;
            content.WagerCatIndex = wagerCatIndex;
            content.OutcomeRequestData = outcomeRequestData;

            var reply = SendMessageAndGetReply<CdsItalyOutcomeRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
        }

        /// <inheritdoc/>
        public void SetEnrollmentRequestData(AmountType wagerAmount, UInt32 wagerCatIndex, Byte[] gameRequestData)
        {
            var request = CreateTransactionalRequest<CdsItalySetEnrollmentRequestDataSend>();
            var content = (CdsItalySetEnrollmentRequestDataSend)request.Message.Item;
            content.WagerAmount = wagerAmount;
            content.WagerCatIndex = wagerCatIndex;
            content.GameRequestData = gameRequestData;

            var reply = SendMessageAndGetReply<CdsItalySetEnrollmentRequestDataReply>(Channel.Foundation, request);
            CheckReply(reply.Reply);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the CdsItalyOutcomeResponseSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleOutcomeResponse(CdsItalyOutcomeResponseSend message)
        {
            var errorMessage = callbackHandler.ProcessOutcomeResponse(message.OutcomeGenerated);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<CdsItalyOutcomeResponseReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

