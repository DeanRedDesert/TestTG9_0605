//-----------------------------------------------------------------------
// <copyright file = "IThemeToExtParcelCommCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2015 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2L
{
    using System;
    using Schemas.Internal;

    /// <summary>
    /// Interface that handles callbacks from the F2L <see cref="ThemeToExtParcelComm"/> category.
    /// F2L Theme To Extension Parcel Communication category of messages.  Category: 14  Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IThemeToExtParcelCommCategoryCallbacks
    {
        /// <summary>
        /// Message from the foundation relaying a parcel communication.   Sent on the FIN channel.
        /// </summary>
        /// <param name="extension">
        /// Identifier of the parcel call originator.
        /// </param>
        /// <param name="payload">
        /// Binary payload that is opaque to the foundation.
        /// </param>
        /// <param name="callbackResult">
        /// [Out] The content of the ThemeToExtParcelCommExtensionParcelCallRxReply message.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessExtensionParcelCallRx(String extension, Byte[] payload, out ThemeToExtParcelCommExtensionParcelCallRxReply callbackResult);

        /// <summary>
        /// Message from the foundation relaying a transactional parcel communication.   Sent on the FI channel.
        /// </summary>
        /// <param name="extension">
        /// Identifier of the parcel call originator.
        /// </param>
        /// <param name="payload">
        /// Binary payload that is opaque to the foundation.
        /// </param>
        /// <param name="callbackResult">
        /// [Out] The content of the ThemeToExtParcelCommExtensionTransParcelCallRxReply message.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessExtensionTransParcelCallRx(String extension, Byte[] payload, out ThemeToExtParcelCommExtensionTransParcelCallRxReply callbackResult);

    }

}

