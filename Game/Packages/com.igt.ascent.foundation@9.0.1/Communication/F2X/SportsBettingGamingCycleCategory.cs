//-----------------------------------------------------------------------
// <copyright file = "SportsBettingGamingCycleCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.SportsBettingGamingCycle;
    using Schemas.Internal.Types;

    /// <summary>
    /// Implementation of the F2X <see cref="SportsBettingGamingCycle"/> category.
    /// The SportsBettingGamingCycle category of messages allows the client to enter a sports betting "gaming-cycle",
    /// and place a bet on the player's behalf.
    /// Category: 144; Major Version: 1
    /// </summary>
    public class SportsBettingGamingCycleCategory : F2XTransactionalCategoryBase<SportsBettingGamingCycle>, ISportsBettingGamingCycleCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the SportsBettingGamingCycleCategory callbacks.
        /// </summary>
        private readonly ISportsBettingGamingCycleCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="SportsBettingGamingCycleCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// SportsBettingGamingCycleCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public SportsBettingGamingCycleCategory(IF2XTransport transport, ISportsBettingGamingCycleCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<UpdateSportsBettingPropertiesSend>(HandleUpdateSportsBettingProperties);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.SportsBettingGamingCycle;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region ISportsBettingGamingCycleCategory Members

        /// <inheritdoc/>
        public void CommitSportsBetReserve()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<CommitSportsBetReserveSend>();

            var reply = SendMessageAndGetReply<CommitSportsBetReserveReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public bool CommitSportsBettingGamingCycle()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<CommitSportsBettingGamingCycleSend>();

            var reply = SendMessageAndGetReply<CommitSportsBettingGamingCycleReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Success;
        }

        /// <inheritdoc/>
        public void EndSportsBettingGamingCycle()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<EndSportsBettingGamingCycleSend>();

            var reply = SendMessageAndGetReply<EndSportsBettingGamingCycleReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public SportsBettingGamingCycleState GetSportsBettingGamingCycleState()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetSportsBettingGamingCycleStateSend>();

            var reply = SendMessageAndGetReply<GetSportsBettingGamingCycleStateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.State;
        }

        /// <inheritdoc/>
        public SportsBettingProperties GetSportsBettingProperties()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetSportsBettingPropertiesSend>();

            var reply = SendMessageAndGetReply<GetSportsBettingPropertiesReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.SportsBettingProperties;
        }

        /// <inheritdoc/>
        public Reserve GetSportsBettingReserve()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetSportsBettingReserveSend>();

            var reply = SendMessageAndGetReply<GetSportsBettingReserveReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Reserve;
        }

        /// <inheritdoc/>
        public bool ReserveSportsBet(Amount amount)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<ReserveSportsBetSend>();
            var content = (ReserveSportsBetSend)request.Message.Item;
            content.Amount = amount;

            var reply = SendMessageAndGetReply<ReserveSportsBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Success;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the UpdateSportsBettingPropertiesSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleUpdateSportsBettingProperties(UpdateSportsBettingPropertiesSend message)
        {
            var errorMessage = callbackHandler.ProcessUpdateSportsBettingProperties(message.SportsBettingProperties);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<UpdateSportsBettingPropertiesReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        #endregion

    }

}

