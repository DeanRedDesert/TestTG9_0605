//-----------------------------------------------------------------------
// <copyright file = "ExtensionProgressiveControllerConfigCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.ExtensionProgressiveControllerConfig;
    using Schemas.Internal.ExtensionProgressiveControllerTypes;

    /// <summary>
    /// Implementation of the F2X <see cref="ExtensionProgressiveControllerConfig"/> category.
    /// Category for supporting a Progressive Controller that is implemented by a system extension. Methods in this
    /// category must be called during configuration mode.
    /// Category: 3023; Major Version: 1
    /// </summary>
    public class ExtensionProgressiveControllerConfigCategory : F2XTransactionalCategoryBase<ExtensionProgressiveControllerConfig>, IExtensionProgressiveControllerConfigCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ExtensionProgressiveControllerConfigCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public ExtensionProgressiveControllerConfigCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ExtensionProgressiveControllerConfig;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IExtensionProgressiveControllerConfigCategory Members

        /// <inheritdoc/>
        public void AddControllerLevel(string controllerId, ControllerLevelDefinition controllerLevelDefinition, ProgressiveLevelValue initialValue)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<AddControllerLevelSend>();
            var content = (AddControllerLevelSend)request.Message.Item;
            content.ControllerId = controllerId;
            content.ControllerLevelDefinition = controllerLevelDefinition;
            content.InitialValue = initialValue;

            var reply = SendMessageAndGetReply<AddControllerLevelReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void AdjustControllerLevelParameters(string controllerId, uint controllerLevel, ControllerLevelParameters parameters)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<AdjustControllerLevelParametersSend>();
            var content = (AdjustControllerLevelParametersSend)request.Message.Item;
            content.ControllerId = controllerId;
            content.ControllerLevel = controllerLevel;
            content.Parameters = parameters;

            var reply = SendMessageAndGetReply<AdjustControllerLevelParametersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public string CreateController(ControllerName controllerName, string controllerType)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<CreateControllerSend>();
            var content = (CreateControllerSend)request.Message.Item;
            content.ControllerName = controllerName;
            content.ControllerType = controllerType;

            var reply = SendMessageAndGetReply<CreateControllerReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ControllerId;
        }

        /// <inheritdoc/>
        public void DestroyController(string controllerId)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<DestroyControllerSend>();
            var content = (DestroyControllerSend)request.Message.Item;
            content.ControllerId = controllerId;

            var reply = SendMessageAndGetReply<DestroyControllerReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public IEnumerable<ControllerLevelDefinition> QueryControllerLevels(string controllerId)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryControllerLevelsSend>();
            var content = (QueryControllerLevelsSend)request.Message.Item;
            content.ControllerId = controllerId;

            var reply = SendMessageAndGetReply<QueryControllerLevelsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Definitions;
        }

        /// <inheritdoc/>
        public IEnumerable<ControllerDefinition> QueryControllers()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryControllersSend>();

            var reply = SendMessageAndGetReply<QueryControllersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Controllers;
        }

        #endregion

    }

}

