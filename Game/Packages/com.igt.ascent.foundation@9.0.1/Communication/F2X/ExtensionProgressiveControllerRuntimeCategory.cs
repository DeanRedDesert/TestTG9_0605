//-----------------------------------------------------------------------
// <copyright file = "ExtensionProgressiveControllerRuntimeCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual editing when merging.
// All changes are marked with "MANUAL EDIT:"
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.ExtensionProgressiveControllerRuntime;

    /// <summary>
    /// Implementation of the F2X <see cref="ExtensionProgressiveControllerRuntime"/> category.
    /// Category for supporting a Progressive Controller that is implemented by a system extension. Methods of this
    /// category can be called during normal operation.
    /// Category: 3024; Major Version: 1
    /// </summary>
    public class ExtensionProgressiveControllerRuntimeCategory : F2XTransactionalCategoryBase<ExtensionProgressiveControllerRuntime>, IExtensionProgressiveControllerRuntimeCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the ExtensionProgressiveControllerRuntimeCategory callbacks.
        /// </summary>
        private readonly IExtensionProgressiveControllerRuntimeCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ExtensionProgressiveControllerRuntimeCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ExtensionProgressiveControllerRuntimeCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ExtensionProgressiveControllerRuntimeCategory(IF2XTransport transport, IExtensionProgressiveControllerRuntimeCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<ValidationRequestSend>(HandleValidationRequest);
            AddMessagehandler<WapHandpaySend>(HandleWapHandpay);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ExtensionProgressiveControllerRuntime;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IExtensionProgressiveControllerRuntimeCategory Members

        /// <inheritdoc/>
        public ulong GetConfigDataMinControllerLevelUpdateInterval()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataMinControllerLevelUpdateIntervalSend>();

            var reply = SendMessageAndGetReply<GetConfigDataMinControllerLevelUpdateIntervalReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.UpdateInterval;
        }

        /// <inheritdoc/>
        public void SetControllerLevelValues(ControllerLevelValues values)
        {
            var request = CreateBasicRequest<SetControllerLevelValuesSend>();
            var content = (SetControllerLevelValuesSend)request.Message.Item;
            content.Values = values;

            var reply = SendMessageAndGetReply<SetControllerLevelValuesReply>(Channel.Game, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void ValidationResponse(IEnumerable<PotentialHitResult> results)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<ValidationResponseSend>();
            var content = (ValidationResponseSend)request.Message.Item;
            content.Results = results.ToList();

            var reply = SendMessageAndGetReply<ValidationResponseReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void WapHandpayAcknowledge(string controllerId)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<WapHandpayAcknowledgeSend>();
            var content = (WapHandpayAcknowledgeSend)request.Message.Item;
            content.ControllerId = controllerId;

            var reply = SendMessageAndGetReply<WapHandpayAcknowledgeReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ValidationRequestSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleValidationRequest(ValidationRequestSend message)
        {
            IEnumerable<string> callbackResult;
            var errorMessage = callbackHandler.ProcessValidationRequest(message.PayvarId, message.Denomination, message.PotentialHits, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ValidationRequestReply>(errorCode, errorMessage);
            var reply = (ValidationRequestReply)replyMessage.Message.Item;
            // MANUAL EDIT: Convert the callbackResult to a List.
            reply.Content.PotentialHitIds = callbackResult.ToList();
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the WapHandpaySend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleWapHandpay(WapHandpaySend message)
        {
            var errorMessage = callbackHandler.ProcessWapHandpay(message.ControllerId, message.PayvarId, message.Denomination, message.WapWins);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<WapHandpayReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

