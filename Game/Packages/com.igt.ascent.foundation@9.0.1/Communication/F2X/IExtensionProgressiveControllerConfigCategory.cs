//-----------------------------------------------------------------------
// <copyright file = "IExtensionProgressiveControllerConfigCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.ExtensionProgressiveControllerConfig;
    using Schemas.Internal.ExtensionProgressiveControllerTypes;

    /// <summary>
    /// Category for supporting a Progressive Controller that is implemented by a system extension. Methods in this
    /// category must be called during configuration mode.
    /// Category: 3023; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IExtensionProgressiveControllerConfigCategory
    {
        /// <summary>
        /// Add a new controller level to a controller. The controller must be owned by the extension.
        /// </summary>
        /// <param name="controllerId">
        /// Target progressive controller to add the level to.
        /// </param>
        /// <param name="controllerLevelDefinition">
        /// Definition of the controller level to add.
        /// </param>
        /// <param name="initialValue">
        /// The initial value of the progressive level.
        /// </param>
        void AddControllerLevel(string controllerId, ControllerLevelDefinition controllerLevelDefinition, ProgressiveLevelValue initialValue);

        /// <summary>
        /// Adjust the parameters associated with the given controller level.
        /// </summary>
        /// <param name="controllerId">
        /// Target progressive controller to add the level to.
        /// </param>
        /// <param name="controllerLevel">
        /// An integer value that identifies the progressive level.
        /// </param>
        /// <param name="parameters">
        /// Parameters to adjust for the given controller level. Mutability configuration must be followed when changing
        /// values. Attempts to change Immutable parameters will result in an error.
        /// </param>
        void AdjustControllerLevelParameters(string controllerId, uint controllerLevel, ControllerLevelParameters parameters);

        /// <summary>
        /// Create a new controller to be managed by the extension.
        /// </summary>
        /// <param name="controllerName">
        /// Name of the controller to create.
        /// </param>
        /// <param name="controllerType">
        /// Unique Controller Type string.
        /// </param>
        /// <returns>
        /// The content of the CreateControllerReply message.
        /// </returns>
        string CreateController(ControllerName controllerName, string controllerType);

        /// <summary>
        /// Destroy a controller that is owned by the extension.
        /// </summary>
        /// <param name="controllerId">
        /// Identifier of controller to destroy.
        /// </param>
        void DestroyController(string controllerId);

        /// <summary>
        /// Query all controller levels associated with a controller. The controller must be owned by the extension.
        /// </summary>
        /// <param name="controllerId">
        /// Unique identifier of controller to query.
        /// </param>
        /// <returns>
        /// The content of the QueryControllerLevelsReply message.
        /// </returns>
        IEnumerable<ControllerLevelDefinition> QueryControllerLevels(string controllerId);

        /// <summary>
        /// Query the list of controllers that are owned by the extension.
        /// </summary>
        /// <returns>
        /// The content of the QueryControllersReply message.
        /// </returns>
        IEnumerable<ControllerDefinition> QueryControllers();

    }

}

