//-----------------------------------------------------------------------
// <copyright file = "GameInformationCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.GameInformation;
    using Schemas.Internal.Types;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="GameInformation"/> category.
    /// Game information category of messages.
    /// Category: 108; Major Version: 1
    /// </summary>
    public class GameInformationCategory : F2XTransactionalCategoryBase<GameInformation>, IGameInformationCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1),
            new Version(1, 2)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameInformationCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public GameInformationCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.GameInformation;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by GameInformationCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region IGameInformationCategory Members

        /// <inheritdoc/>
        public IEnumerable<ThemeBetResolution> GetBetResolution(IEnumerable<ThemeIdentifier> theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetBetResolutionSend>();
            var content = (GetBetResolutionSend)request.Message.Item;
            content.Theme = theme.ToList();

            var reply = SendMessageAndGetReply<GetBetResolutionReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<DenominationButtonPanelMinBet> GetDenominationButtonPanelMinBet(IEnumerable<PayvarDenomination> payvarDenominationSelection)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetDenominationButtonPanelMinBetSend>();
            var content = (GetDenominationButtonPanelMinBetSend)request.Message.Item;
            content.PayvarDenominationSelection = payvarDenominationSelection.ToList();

            var reply = SendMessageAndGetReply<GetDenominationButtonPanelMinBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<DenominationMaxBetCreditData> GetDenominationMaxBetCredits(IEnumerable<PayvarDenomination> payvarDenominationSelection)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetDenominationMaxBetCreditsSend>();
            var content = (GetDenominationMaxBetCreditsSend)request.Message.Item;
            content.PayvarDenominationSelection = payvarDenominationSelection.ToList();

            var reply = SendMessageAndGetReply<GetDenominationMaxBetCreditsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<PayvarButtonPanelMinBet> GetPayvarButtonPanelMinBet(IEnumerable<PayvarIdentifier> payvar)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPayvarButtonPanelMinBetSend>();
            var content = (GetPayvarButtonPanelMinBetSend)request.Message.Item;
            content.Payvar = payvar.ToList();

            var reply = SendMessageAndGetReply<GetPayvarButtonPanelMinBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<PayvarEnabledDenominations> GetPayvarEnabledDenominations(IEnumerable<PayvarIdentifier> payvar)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPayvarEnabledDenominationsSend>();
            var content = (GetPayvarEnabledDenominationsSend)request.Message.Item;
            content.Payvar = payvar.ToList();

            var reply = SendMessageAndGetReply<GetPayvarEnabledDenominationsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<PayvarInformation> GetPayvarInformation(IEnumerable<PayvarIdentifier> payvar)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPayvarInformationSend>();
            var content = (GetPayvarInformationSend)request.Message.Item;
            content.Payvar = payvar.ToList();

            var reply = SendMessageAndGetReply<GetPayvarInformationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<PayvarMaxBetCreditData> GetPayvarMaxBetCredits(IEnumerable<PayvarIdentifier> payvar)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPayvarMaxBetCreditsSend>();
            var content = (GetPayvarMaxBetCreditsSend)request.Message.Item;
            content.Payvar = payvar.ToList();

            var reply = SendMessageAndGetReply<GetPayvarMaxBetCreditsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<PayvarPaybackPercentageData> GetPayvarPaybackPercentageData(IEnumerable<PayvarIdentifier> payvar)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPayvarPaybackPercentageDataSend>();
            var content = (GetPayvarPaybackPercentageDataSend)request.Message.Item;
            content.Payvar = payvar.ToList();

            var reply = SendMessageAndGetReply<GetPayvarPaybackPercentageDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<ThemePayvarList> GetPayvarsForTheme(IEnumerable<ThemeIdentifier> theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPayvarsForThemeSend>();
            var content = (GetPayvarsForThemeSend)request.Message.Item;
            content.Theme = theme.ToList();

            var reply = SendMessageAndGetReply<GetPayvarsForThemeReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<PayvarSupportedDenominations> GetPayvarSupportedDenominations(IEnumerable<PayvarIdentifier> payvar)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPayvarSupportedDenominationsSend>();
            var content = (GetPayvarSupportedDenominationsSend)request.Message.Item;
            content.Payvar = payvar.ToList();

            var reply = SendMessageAndGetReply<GetPayvarSupportedDenominationsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeButtonPanelMinBet> GetThemeButtonPanelMinBet(IEnumerable<ThemeIdentifier> theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetThemeButtonPanelMinBetSend>();
            var content = (GetThemeButtonPanelMinBetSend)request.Message.Item;
            content.Theme = theme.ToList();

            var reply = SendMessageAndGetReply<GetThemeButtonPanelMinBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeEnabledDenominations> GetThemeEnabledDenominations(IEnumerable<ThemeIdentifier> theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetThemeEnabledDenominationsSend>();
            var content = (GetThemeEnabledDenominationsSend)request.Message.Item;
            content.Theme = theme.ToList();

            var reply = SendMessageAndGetReply<GetThemeEnabledDenominationsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeInformation> GetThemeInformation(IEnumerable<ThemeIdentifier> theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetThemeInformationSend>();
            var content = (GetThemeInformationSend)request.Message.Item;
            content.Theme = theme.ToList();

            var reply = SendMessageAndGetReply<GetThemeInformationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeMaxBetCreditData> GetThemeMaxBetCredits(IEnumerable<ThemeIdentifier> theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetThemeMaxBetCreditsSend>();
            var content = (GetThemeMaxBetCreditsSend)request.Message.Item;
            content.Theme = theme.ToList();

            var reply = SendMessageAndGetReply<GetThemeMaxBetCreditsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeSupportedDenominations> GetThemeSupportedDenominations(IEnumerable<ThemeIdentifier> theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetThemeSupportedDenominationsSend>();
            var content = (GetThemeSupportedDenominationsSend)request.Message.Item;
            content.Theme = theme.ToList();

            var reply = SendMessageAndGetReply<GetThemeSupportedDenominationsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        #endregion

    }

}

