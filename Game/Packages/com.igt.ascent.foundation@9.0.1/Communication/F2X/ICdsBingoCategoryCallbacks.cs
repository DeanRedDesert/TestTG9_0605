//-----------------------------------------------------------------------
// <copyright file = "ICdsBingoCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.CdsBingo;
    using Schemas.Internal.Types;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="CdsBingo"/> category.
    /// CdsBingo category of messages.
    /// Category: 3009; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ICdsBingoCategoryCallbacks
    {
        /// <summary>
        /// Message to check with the host if the game can enter the game-in-progress state.
        /// </summary>
        /// <param name="callbackResult">
        /// [Out] The content of the CommitGameInProgressRequestReply message.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessCommitGameInProgressRequest(out bool callbackResult);

        /// <summary>
        /// Message notifying the bin that an enrollment request has been made.
        /// </summary>
        /// <param name="payvar">
        /// The payvar identifier of the current game-cycle.
        /// </param>
        /// <param name="denom">
        /// The denomination being played in the current game-cycle.
        /// </param>
        /// <param name="committedBetAmount">
        /// The committed bet amount of the current game-cycle.
        /// </param>
        /// <param name="enrollmentData">
        /// Binary data containing enrollment data in a format specific to the extension.  This data is opaque to the
        /// Foundation.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessEnrollmentRequest(PayvarIdentifier payvar, uint denom, Amount committedBetAmount, byte[] enrollmentData);

        /// <summary>
        /// Message notifying the bin to send the final expected outcome data.
        /// </summary>
        /// <param name="callbackResult">
        /// [Out] Data for a final expected outcome.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessFinalExpectedOutcomeRequest(out FinalExpectedOutcomeRequestReplyContent callbackResult);

        /// <summary>
        /// Message to notify the extension of a machine status message.
        /// </summary>
        /// <param name="machineStatusCode">
        /// The status code representing the change.
        /// </param>
        /// <param name="description">
        /// A description of the status change.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessMachineStatusChanged(MachineStatusCode machineStatusCode, string description);

        /// <summary>
        /// Message notifying that a win mismatch has occurred.
        /// </summary>
        /// <param name="expectedPaytableWinAmount">
        /// The expected paytable win amount (e.g. "interim wins") for this game-cycle.
        /// </param>
        /// <param name="gameReportedPaytableWinAmount">
        /// The game reported paytable win amount (e.g. "interim wins") for this game-cycle.
        /// </param>
        /// <param name="expectedBingoWinAmount">
        /// The expected bingo win amount for this game-cycle.
        /// </param>
        /// <param name="gameReportedBingoWinAmount">
        /// The game reported bingo win amount for this game-cycle.
        /// </param>
        /// <param name="expectedBingoProgressiveWinAmount">
        /// The expected bingo progressive (bingo grand prize) win amount for this game-cycle.
        /// </param>
        /// <param name="gameReportedBingoProgressiveWinAmount">
        /// The game reported bingo progressive (bingo grand prize) win amount for this game-cycle.
        /// </param>
        /// <param name="logMessage">
        /// The log message originally provided in the EnrollmentResponseReply message by the bin.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessWinMismatchNotification(Amount expectedPaytableWinAmount, Amount gameReportedPaytableWinAmount, Amount expectedBingoWinAmount, Amount gameReportedBingoWinAmount, Amount expectedBingoProgressiveWinAmount, Amount gameReportedBingoProgressiveWinAmount, string logMessage);

    }

}

