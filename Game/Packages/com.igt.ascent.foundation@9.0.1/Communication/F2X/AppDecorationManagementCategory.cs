//-----------------------------------------------------------------------
// <copyright file = "AppDecorationManagementCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.AppDecorationManagement;
    using Schemas.Internal.AppDecorationTypes;

    /// <summary>
    /// Implementation of the F2X <see cref="AppDecorationManagement"/> category.
    /// App Decoration Management category of messages.
    /// Category: 131; Major Version: 1
    /// </summary>
    public class AppDecorationManagementCategory : F2XTransactionalCategoryBase<AppDecorationManagement>, IAppDecorationManagementCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="AppDecorationManagementCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public AppDecorationManagementCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.AppDecorationManagement;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IAppDecorationManagementCategory Members

        /// <inheritdoc/>
        public void AddDecorationsToApps(IEnumerable<DecorationApps> decorationApps)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<AddDecorationsToAppsSend>();
            var content = (AddDecorationsToAppsSend)request.Message.Item;
            content.DecorationApps = decorationApps.ToList();

            var reply = SendMessageAndGetReply<AddDecorationsToAppsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void RegisterDecorations(IEnumerable<DecorationInfo> decorationInfo)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<RegisterDecorationsSend>();
            var content = (RegisterDecorationsSend)request.Message.Item;
            content.DecorationInfo = decorationInfo.ToList();

            var reply = SendMessageAndGetReply<RegisterDecorationsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void RemoveDecorationsFromApps(IEnumerable<DecorationApps> decorationApps)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<RemoveDecorationsFromAppsSend>();
            var content = (RemoveDecorationsFromAppsSend)request.Message.Item;
            content.DecorationApps = decorationApps.ToList();

            var reply = SendMessageAndGetReply<RemoveDecorationsFromAppsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void UnregisterDecorations(IEnumerable<DecorationIdentifier> decorationIds)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<UnregisterDecorationsSend>();
            var content = (UnregisterDecorationsSend)request.Message.Item;
            content.DecorationIds = decorationIds.ToList();

            var reply = SendMessageAndGetReply<UnregisterDecorationsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

    }

}

