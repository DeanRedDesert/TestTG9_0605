//-----------------------------------------------------------------------
// <copyright file = "CoplayerApiControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.CoplayerApiControl;

    /// <summary>
    /// Implementation of the F2X <see cref="CoplayerApiControl"/> category.
    /// F2X Coplayer API Control category of messages.
    /// Category: 1013; Major Version: 1
    /// </summary>
    public class CoplayerApiControlCategory : F2XCategoryBase<CoplayerApiControl>
    {
        #region Fields

        /// <summary>
        /// Object which implements the CoplayerApiControlCategory callbacks.
        /// </summary>
        private readonly ICoplayerApiControlCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="CoplayerApiControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// CoplayerApiControlCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public CoplayerApiControlCategory(IF2XTransport transport, ICoplayerApiControlCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<GetCoplayerApiVersionsSend>(HandleGetCoplayerApiVersions);
            AddMessagehandler<SetCoplayerApiVersionsSend>(HandleSetCoplayerApiVersions);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.CoplayerApiControl;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the GetCoplayerApiVersionsSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGetCoplayerApiVersions(GetCoplayerApiVersionsSend message)
        {
            GetCoplayerApiVersionsReplyContentCategoryVersions callbackResult;
            var errorMessage = callbackHandler.ProcessGetCoplayerApiVersions(message.Coplayer, message.Theme, message.ThemeTag, message.ThemeTagDataFile, message.G2SThemeIdentifier, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<GetCoplayerApiVersionsReply>(errorCode, errorMessage);
            var reply = (GetCoplayerApiVersionsReply)replyMessage.Message.Item;
            reply.Content.CategoryVersions = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the SetCoplayerApiVersionsSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleSetCoplayerApiVersions(SetCoplayerApiVersionsSend message)
        {
            bool callbackResult;
            var errorMessage = callbackHandler.ProcessSetCoplayerApiVersions(message.CategoryVersions, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<SetCoplayerApiVersionsReply>(errorCode, errorMessage);
            var reply = (SetCoplayerApiVersionsReply)replyMessage.Message.Item;
            reply.Content.CategoriesAccepted = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

