//-----------------------------------------------------------------------
// <copyright file = "ProgressiveDataCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.ProgressiveData;
    using Schemas.Internal.Types;

    /// <summary>
    /// Implementation of the F2X <see cref="ProgressiveData"/> category.
    /// Category of messages.  Category: 106   Version: 1. This category is used to request progressive information.
    /// </summary>
    public class ProgressiveDataCategory : F2XTransactionalCategoryBase<ProgressiveData>, IProgressiveDataCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ProgressiveDataCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public ProgressiveDataCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ProgressiveData;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IProgressiveDataCategory Members

        /// <inheritdoc/>
        public IEnumerable<EnabledProgressiveValues> GetEnabledPayvarBasedProgressiveValues(PayvarIdentifier payvar)
        {
            var request = CreateBasicRequest<GetEnabledPayvarBasedProgressiveValuesSend>();
            var content = (GetEnabledPayvarBasedProgressiveValuesSend)request.Message.Item;
            content.Payvar = payvar;

            var reply = SendMessageAndGetReply<GetEnabledPayvarBasedProgressiveValuesReply>(Channel.Game, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveGameLevelValueData;
        }

        /// <inheritdoc/>
        public IEnumerable<EnabledProgressiveValues> GetEnabledThemeBasedProgressiveValues(ThemeIdentifier theme)
        {
            var request = CreateBasicRequest<GetEnabledThemeBasedProgressiveValuesSend>();
            var content = (GetEnabledThemeBasedProgressiveValuesSend)request.Message.Item;
            content.Theme = theme;

            var reply = SendMessageAndGetReply<GetEnabledThemeBasedProgressiveValuesReply>(Channel.Game, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveGameLevelValueData;
        }

        /// <inheritdoc/>
        public IEnumerable<PayvarBasedProgressiveValues> GetPayvarBasedProgressiveValues(PayvarIdentifier payvar, IEnumerable<uint> denomination)
        {
            var request = CreateBasicRequest<GetPayvarBasedProgressiveValuesSend>();
            var content = (GetPayvarBasedProgressiveValuesSend)request.Message.Item;
            content.Payvar = payvar;
            content.Denomination = denomination.ToList();

            var reply = SendMessageAndGetReply<GetPayvarBasedProgressiveValuesReply>(Channel.Game, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveGameLevelValueData;
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeBasedProgressiveValues> GetThemeBasedProgressiveValues(ThemeIdentifier theme, IEnumerable<uint> denomination)
        {
            var request = CreateBasicRequest<GetThemeBasedProgressiveValuesSend>();
            var content = (GetThemeBasedProgressiveValuesSend)request.Message.Item;
            content.Theme = theme;
            content.Denomination = denomination.ToList();

            var reply = SendMessageAndGetReply<GetThemeBasedProgressiveValuesReply>(Channel.Game, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveGameLevelValueData;
        }

        /// <inheritdoc/>
        public IEnumerable<EnabledProgressiveSettings> QueryEnabledPayvarBasedProgressiveSettings(PayvarIdentifier payvar)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryEnabledPayvarBasedProgressiveSettingsSend>();
            var content = (QueryEnabledPayvarBasedProgressiveSettingsSend)request.Message.Item;
            content.Payvar = payvar;

            var reply = SendMessageAndGetReply<QueryEnabledPayvarBasedProgressiveSettingsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveGameLevelSettingsData;
        }

        /// <inheritdoc/>
        public IEnumerable<EnabledProgressiveSettings> QueryEnabledThemeBasedProgressiveSettings(ThemeIdentifier theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryEnabledThemeBasedProgressiveSettingsSend>();
            var content = (QueryEnabledThemeBasedProgressiveSettingsSend)request.Message.Item;
            content.Theme = theme;

            var reply = SendMessageAndGetReply<QueryEnabledThemeBasedProgressiveSettingsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveGameLevelSettingsData;
        }

        /// <inheritdoc/>
        public IEnumerable<PayvarBasedProgressiveSettings> QueryPayvarBasedProgressiveSettings(PayvarIdentifier payvar, IEnumerable<uint> denomination)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryPayvarBasedProgressiveSettingsSend>();
            var content = (QueryPayvarBasedProgressiveSettingsSend)request.Message.Item;
            content.Payvar = payvar;
            content.Denomination = denomination.ToList();

            var reply = SendMessageAndGetReply<QueryPayvarBasedProgressiveSettingsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveGameLevelSettingsData;
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeBasedProgressiveSettings> QueryThemeBasedProgressiveSettings(ThemeIdentifier theme, IEnumerable<uint> denomination)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryThemeBasedProgressiveSettingsSend>();
            var content = (QueryThemeBasedProgressiveSettingsSend)request.Message.Item;
            content.Theme = theme;
            content.Denomination = denomination.ToList();

            var reply = SendMessageAndGetReply<QueryThemeBasedProgressiveSettingsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveGameLevelSettingsData;
        }

        #endregion

    }

}

