//-----------------------------------------------------------------------
// <copyright file = "CdsBingoConfigCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.CdsBingoConfig;
    using Schemas.Internal.Types;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="CdsBingoConfig"/> category.
    /// CdsBingoConfig category of messages.  Provides access to configuration related values and services related to
    /// Bingo protocol operation.
    /// Category: 3010; Major Version: 1
    /// </summary>
    public class CdsBingoConfigCategory : F2XTransactionalCategoryBase<CdsBingoConfig>, ICdsBingoConfigCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the CdsBingoConfigCategory callbacks.
        /// </summary>
        private readonly ICdsBingoConfigCategoryCallbacks callbackHandler;

        private const string MethodGetConfigurationModeStatus = "GetConfigurationModeStatus";
        private const string MethodCanSetDateTime = "CanSetDateTime";
        private const string MethodSetDateTime = "SetDateTime";
        private const string MethodGetTaxableEventThreshold = "GetTaxableEventThreshold";
        private const string MethodGetFloorLocation = "GetFloorLocation";
        private const string MethodGetMachineIdentificationCabinetModel = "GetMachineIdentificationCabinetModel";

        /// <summary>
        /// A look-up table for the methods that are NOT available in all supported versions.
        /// Keyed by the method name, the value is the version where the method becomes available.
        /// </summary>
        private readonly Dictionary<string, Version> methodSupportingVersions = new Dictionary<string, Version>
        {
            { MethodGetConfigurationModeStatus, new Version(1, 1) },
            { MethodCanSetDateTime, new Version(1, 2) },
            { MethodSetDateTime, new Version(1, 2) },
            { MethodGetTaxableEventThreshold, new Version(1, 3) },
            { MethodGetFloorLocation, new Version(1, 4) },
            { MethodGetMachineIdentificationCabinetModel, new Version(1, 4) }
        };

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1),
            new Version(1, 2),
            new Version(1, 3),
            new Version(1, 4)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="CdsBingoConfigCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// CdsBingoConfigCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public CdsBingoConfigCategory(IF2XTransport transport, ICdsBingoConfigCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<ConfigurationModeStatusChangedSend>(HandleConfigurationModeStatusChanged);
            AddMessagehandler<TaxableEventThresholdChangedSend>(HandleTaxableEventThresholdChanged);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.CdsBingoConfig;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by CdsBingoConfigCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region ICdsBingoConfigCategory Members

        /// <inheritdoc/>
        public bool CanSetDateTime()
        {
            if(IsMethodSupported(MethodCanSetDateTime))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<CanSetDateTimeSend>();

                var reply = SendMessageAndGetReply<CanSetDateTimeReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.CanSetDateTime;
            }

            return default(bool);
        }

        /// <inheritdoc/>
        public bool GetConfigurationModeStatus()
        {
            if(IsMethodSupported(MethodGetConfigurationModeStatus))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetConfigurationModeStatusSend>();

                var reply = SendMessageAndGetReply<GetConfigurationModeStatusReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.InConfigurationMode;
            }

            return default(bool);
        }

        /// <inheritdoc/>
        public ushort GetDiscoveryPort()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetDiscoveryPortSend>();

            var reply = SendMessageAndGetReply<GetDiscoveryPortReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.UdpPortNumber;
        }

        /// <inheritdoc/>
        public string GetEgmSerialNumber()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetEgmSerialNumberSend>();

            var reply = SendMessageAndGetReply<GetEgmSerialNumberReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.SerialNumber;
        }

        /// <inheritdoc/>
        public string GetFloorLocation()
        {
            if(IsMethodSupported(MethodGetFloorLocation))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetFloorLocationSend>();

                var reply = SendMessageAndGetReply<GetFloorLocationReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.FloorLocation;
            }

            return default(string);
        }

        /// <inheritdoc/>
        public IEnumerable<RomInformation> GetInstalledRomInformation()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetInstalledRomInformationSend>();

            var reply = SendMessageAndGetReply<GetInstalledRomInformationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public string GetMachineIdentificationCabinetModel()
        {
            if(IsMethodSupported(MethodGetMachineIdentificationCabinetModel))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetMachineIdentificationCabinetModelSend>();

                var reply = SendMessageAndGetReply<GetMachineIdentificationCabinetModelReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.CabinetModel;
            }

            return default(string);
        }

        /// <inheritdoc/>
        public Amount GetTaxableEventThreshold()
        {
            if(IsMethodSupported(MethodGetTaxableEventThreshold))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetTaxableEventThresholdSend>();

                var reply = SendMessageAndGetReply<GetTaxableEventThresholdReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.Threshold;
            }

            return default(Amount);
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeBingoInformation> GetThemeBingoInformation(IEnumerable<ThemeIdentifier> theme)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetThemeBingoInformationSend>();
            var content = (GetThemeBingoInformationSend)request.Message.Item;
            content.Theme = theme == null ? null : theme.ToList();

            var reply = SendMessageAndGetReply<GetThemeBingoInformationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public SetDateTimeCommandResultType SetDateTime(DateTime dateTimeToSet)
        {
            if(IsMethodSupported(MethodSetDateTime))
            {
                var request = CreateBasicRequest<SetDateTimeSend>();
                var content = (SetDateTimeSend)request.Message.Item;
                content.DateTimeToSet = dateTimeToSet;

                var reply = SendMessageAndGetReply<SetDateTimeReply>(Channel.Game, request);
                CheckReply(reply.Exception);
                return reply.Content.CommandResult;
            }

            return default(SetDateTimeCommandResultType);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ConfigurationModeStatusChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleConfigurationModeStatusChanged(ConfigurationModeStatusChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessConfigurationModeStatusChanged(message.InConfigurationMode);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ConfigurationModeStatusChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the TaxableEventThresholdChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleTaxableEventThresholdChanged(TaxableEventThresholdChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessTaxableEventThresholdChanged(message.Threshold);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<TaxableEventThresholdChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Checks if a method is supported by the effective version of the category.
        /// </summary>
        /// <param name="methodName">
        /// The name of the method to check.
        /// </param>
        /// <returns>
        /// True if the method is supported. False otherwise.
        /// </returns>
        private bool IsMethodSupported(string methodName)
        {
            // Methods not in the dictionary are available in all versions.
            var result = true;

            if(methodSupportingVersions.ContainsKey(methodName))
            {
                result = effectiveVersion >= methodSupportingVersions[methodName];
            }

            return result;
        }

        #endregion

    }

}

