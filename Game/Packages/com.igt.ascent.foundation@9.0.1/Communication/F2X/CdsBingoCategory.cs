//-----------------------------------------------------------------------
// <copyright file = "CdsBingoCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual changes when merging.
// All changes are marked with "MANUAL EDIT: "
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.CdsBingo;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="CdsBingo"/> category.
    /// CdsBingo category of messages.
    /// Category: 3009; Major Version: 1
    /// </summary>
    public class CdsBingoCategory : F2XTransactionalCategoryBase<CdsBingo>, ICdsBingoCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the CdsBingoCategory callbacks.
        /// </summary>
        private readonly ICdsBingoCategoryCallbacks callbackHandler;

        private const string MethodEnrollmentResponse = "EnrollmentResponse";

        // MANUAL EDIT: Add support of Bingo Interim Progressive field in Enrollment Response Data.
        private const string MethodEnrollmentResponseBingoInterimProgressive = "EnrollmentResponseBingoInterimProgressive";

        /// <summary>
        /// A look-up table for the methods that are NOT available in all supported versions.
        /// Keyed by the method name, the value is the version where the method becomes available.
        /// </summary>
        private readonly Dictionary<string, Version> methodSupportingVersions = new Dictionary<string, Version>
        {
            { MethodEnrollmentResponse, new Version(1, 1) },
            // MANUAL EDIT: Add support of Bingo Interim Progressive field in Enrollment Response Data.
            { MethodEnrollmentResponseBingoInterimProgressive, new Version(1, 2) }
        };

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1),
            new Version(1, 2),
            new Version(1, 3)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="CdsBingoCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// CdsBingoCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public CdsBingoCategory(IF2XTransport transport, ICdsBingoCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<CommitGameInProgressRequestSend>(HandleCommitGameInProgressRequest);
            AddMessagehandler<EnrollmentRequestSend>(HandleEnrollmentRequest);
            AddMessagehandler<FinalExpectedOutcomeRequestSend>(HandleFinalExpectedOutcomeRequest);
            AddMessagehandler<MachineStatusChangedSend>(HandleMachineStatusChanged);
            AddMessagehandler<WinMismatchNotificationSend>(HandleWinMismatchNotification);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.CdsBingo;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by CdsBingoCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region ICdsBingoCategory Members

        /// <inheritdoc/>
        public void EnrollmentResponse(EnrollmentResponseData enrollmentResponseData)
        {
            if(IsMethodSupported(MethodEnrollmentResponse))
            {
                Transport.MustHaveHeavyweightTransaction();

                // MANUAL EDIT: Add support of Bingo Interim Progressive field in Enrollment Response Data.
                if(enrollmentResponseData != null && enrollmentResponseData.BingoInterimProgressiveWinAmount.Value != 0 &&
                    !IsMethodSupported(MethodEnrollmentResponseBingoInterimProgressive))
                {
                    // MANUAL EDIT: Throw the exception when the Bingo Interim Progressive is not supported by current category version.
                    throw new InvalidOperationException("BingoInterimProgressiveWinAmount is NOT supported on the CDS Bingo category version 1.1 or older.");
                }
                else
                {
                    var request = CreateTransactionalRequest<EnrollmentResponseSend>();
                    var content = (EnrollmentResponseSend)request.Message.Item;
                    content.EnrollmentResponseData = enrollmentResponseData;

                    var reply = SendMessageAndGetReply<EnrollmentResponseReply>(Channel.Foundation, request);
                    CheckReply(reply.Exception);
                }
            }
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the CommitGameInProgressRequestSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleCommitGameInProgressRequest(CommitGameInProgressRequestSend message)
        {
            bool callbackResult;
            var errorMessage = callbackHandler.ProcessCommitGameInProgressRequest(out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<CommitGameInProgressRequestReply>(errorCode, errorMessage);
            var reply = (CommitGameInProgressRequestReply)replyMessage.Message.Item;
            reply.Content.CanCommit = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the EnrollmentRequestSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleEnrollmentRequest(EnrollmentRequestSend message)
        {
            var errorMessage = callbackHandler.ProcessEnrollmentRequest(message.Payvar, message.Denom, message.CommittedBetAmount, message.EnrollmentData);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<EnrollmentRequestReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the FinalExpectedOutcomeRequestSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleFinalExpectedOutcomeRequest(FinalExpectedOutcomeRequestSend message)
        {
            FinalExpectedOutcomeRequestReplyContent callbackResult;
            var errorMessage = callbackHandler.ProcessFinalExpectedOutcomeRequest(out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<FinalExpectedOutcomeRequestReply>(errorCode, errorMessage);
            var reply = (FinalExpectedOutcomeRequestReply)replyMessage.Message.Item;
            reply.Content = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the MachineStatusChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleMachineStatusChanged(MachineStatusChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessMachineStatusChanged(message.MachineStatusCode, message.Description);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<MachineStatusChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the WinMismatchNotificationSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleWinMismatchNotification(WinMismatchNotificationSend message)
        {
            var errorMessage = callbackHandler.ProcessWinMismatchNotification(message.ExpectedPaytableWinAmount, message.GameReportedPaytableWinAmount, message.ExpectedBingoWinAmount, message.GameReportedBingoWinAmount, message.ExpectedBingoProgressiveWinAmount, message.GameReportedBingoProgressiveWinAmount, message.LogMessage);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<WinMismatchNotificationReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Checks if a method is supported by the effective version of the category.
        /// </summary>
        /// <param name="methodName">
        /// The name of the method to check.
        /// </param>
        /// <returns>
        /// True if the method is supported. False otherwise.
        /// </returns>
        private bool IsMethodSupported(string methodName)
        {
            // Methods not in the dictionary are available in all versions.
            var result = true;

            if(methodSupportingVersions.ContainsKey(methodName))
            {
                result = effectiveVersion >= methodSupportingVersions[methodName];
            }

            return result;
        }

        #endregion

    }

}

