//-----------------------------------------------------------------------
// <copyright file = "IConfigurationModeControlCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.ConfigurationModeControl;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="ConfigurationModeControl"/> category.
    /// This cateogry provides messages for system level clients to enter and exit the configuration mode.
    /// Category: 138; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IConfigurationModeControlCategoryCallbacks
    {
        /// <summary>
        /// Event to notify clients if foundation is accepting configuration mode requests or not.
        /// This notification will be broadcasted to all the clients.
        /// </summary>
        /// <param name="isAvailable">
        /// Flag stating the availability of configuration mode.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessConfigModeAvailabilityEvent(bool isAvailable);

        /// <summary>
        /// Response stating if the client entered the configuration mode or if the request was denied.
        /// </summary>
        /// <param name="confirmationCode">
        /// The confirmation response from the foundation to notify the client if it has entered configuration mode or
        /// if the request was denied.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessEnterConfigModeResponse(EnterConfigModeConfirmationCode confirmationCode);

    }

}

