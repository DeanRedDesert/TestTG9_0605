//-----------------------------------------------------------------------
// <copyright file = "IVoucherRedemptionCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2021 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.VoucherRedemption;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="VoucherRedemption"/> category.
    /// The F2X VoucherRedemption category of messages, which provides APIs for communication between foundation and
    /// extension client in terms of voucher redemption process.
    /// A complete Voucher Redemption Process consists of two steps in a row, let say: voucher review step and voucher
    /// redemption step, as defined as follows:
    /// - Voucher review step: The host shall be responsible for reviewing the voucher and if accepted, it means that
    /// this voucher contains an amount, and then the host shall respond with the voucher amounts and indicate the
    /// voucher type (subtype of ticket)
    /// - Voucher redemption step: The host shall be responsible for redeeming the voucher, if it contains an amount,
    /// and transferring the voucher amounts back to the Ascent local bank
    /// Category: 150; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IVoucherRedemptionCategoryCallbacks
    {
        /// <summary>
        /// Notifies client that the voucher redemption process in progress should be aborted.
        /// Upon sending the VoucherReviewResponse message to the foundation, the extension client will be waiting on
        /// either
        /// a VoucherRedemptionRequestSend or an AbortVoucherRedemptionSend message from the foundation!
        /// </summary>
        /// <param name="validationNumber">
        /// The validation number, also known as barcode, on the voucher.
        /// </param>
        /// <param name="voucherType">
        /// Also known as ticket type, e.g. TITO, Sports, etc.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessAbortVoucherRedemption(string validationNumber, VoucherType voucherType);

        /// <summary>
        /// Notifies client that the voucher redemption is requested for a given validation number.
        /// Upon sending the VoucherReviewResponse message to the foundation, the extension client will be waiting on
        /// either
        /// a VoucherRedemptionRequestSend or an AbortVoucherRedemptionSend message from the foundation!
        /// </summary>
        /// <param name="validationNumber">
        /// The validation number, also known as barcode, on the voucher.
        /// </param>
        /// <param name="voucherType">
        /// Also known as ticket type, e.g. TITO, Sports, etc.
        /// </param>
        /// <param name="callbackResult">
        /// [Out] The content of the VoucherRedemptionRequestReply message.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessRequest(string validationNumber, VoucherType voucherType, out bool callbackResult);

        /// <summary>
        /// Notifies client that the voucher review is requested for a given validation number.
        /// </summary>
        /// <param name="validationNumber">
        /// The validation number, also known as barcode, on the voucher.
        /// </param>
        /// <param name="voucherType">
        /// Also known as ticket type, e.g. TITO, Sports, etc.
        /// </param>
        /// <param name="callbackResult">
        /// [Out] The content of the VoucherReviewRequestReply message.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessVoucherReviewRequest(string validationNumber, VoucherType voucherType, out bool callbackResult);

    }

}

