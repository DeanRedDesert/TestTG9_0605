//-----------------------------------------------------------------------
// <copyright file = "IGamePlayStatusCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.GamePlayStatus;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="GamePlayStatus"/> category.
    /// GamePlayStatus category of messages for the Bin to query the game play status, and get notification from the
    /// Foundation when any of the game play status has changed.
    /// Category: 1032; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IGamePlayStatusCategoryCallbacks
    {
        /// <summary>
        /// Notifies that the game focus has changed.
        /// </summary>
        /// <param name="gameFocus">
        /// Contains the coplayer and its associated theme/denom that is currently being serialized in the concurrent
        /// game play. This element is not present if no game is focused.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessGameFocusChanged(GameFocus gameFocus);

        /// <summary>
        /// Notifies that the flag of game in progress has changed.
        /// </summary>
        /// <param name="gameInProgress">
        /// The flag that denotes if there is any game that is currently in progress or not.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessGameInProgressChanged(bool gameInProgress);

    }

}

