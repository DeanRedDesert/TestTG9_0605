//-----------------------------------------------------------------------
// <copyright file = "ICashDeviceSupervisionCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.CashDeviceSupervision;

    /// <summary>
    /// CashDeviceSupervision category of messages.
    /// Category: 134; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ICashDeviceSupervisionCategory
    {
        /// <summary>
        /// Informs the Foundation about the cl√≠ent side finishing of the cashout handling.  Message from the client to
        /// Foundation, response to RequestCashoutReviewSend for cashout.
        /// </summary>
        /// <param name="cashoutReviewType">
        /// Cashout review type which was requested via RequestCashoutReviewSend.
        /// </param>
        /// <param name="status">
        /// Reported cashout status of the finished extension cashout.
        /// </param>
        void CashoutReviewResponse(CashoutReviewType cashoutReviewType, CashoutResponseStatus status);

        /// <summary>
        /// Allow the client to register for cashout review response step.  Condition: Only one client can register for
        /// a cashout review response.
        /// </summary>
        /// <param name="cashoutReviewTypeList">
        /// Allow the client to register for cashout review steps.  Default behavior is that the client doesn't receive
        /// a cashout review.  The registration request overwrites the list of previous registrations.  Sending the
        /// request with an empty list will clear the registered cashout reviews.
        /// </param>
        void SetCashoutReviewRegistration(IEnumerable<CashoutReviewType> cashoutReviewTypeList);

        /// <summary>
        /// Allows the client to register for given SystemId's validation. Without registration the client doesn't
        /// receive a voucher validation request.  A Registration overwrites the list of previous registered
        /// SystemId's.  Sending the request with an empty list will clear the registered validation list.
        /// </summary>
        /// <param name="systemIdList">
        /// Client wants to get informed about voucher in escrow with given SystemID to validate.
        /// </param>
        void SetValidationRegistration(IEnumerable<int> systemIdList);

        /// <summary>
        /// Informs the Foundation if voucher has to be stacked or rejected.
        /// </summary>
        /// <param name="systemId">
        /// The unique system id a client registers for validation.
        /// </param>
        /// <param name="validationNumber">
        /// Voucher validation number to stack or reject.
        /// </param>
        /// <param name="accept">
        /// true: stack ticket/voucher  false: reject ticket/voucher
        /// </param>
        void VoucherValidationResponse(int systemId, string validationNumber, bool accept);

    }

}

