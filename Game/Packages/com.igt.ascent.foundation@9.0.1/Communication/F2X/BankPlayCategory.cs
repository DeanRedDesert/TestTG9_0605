//-----------------------------------------------------------------------
// <copyright file = "BankPlayCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.BankPlay;

    /// <summary>
    /// Implementation of the F2X <see cref="BankPlay"/> category.
    /// Bank Play category of messages for the Shell Bin to retrieve the player bet configuration, bank play status,
    /// player meters, and get notification from the Foundation in the event of bank player status or player money
    /// changed.
    /// Category: 1029; Major Version: 1
    /// </summary>
    public class BankPlayCategory : F2XTransactionalCategoryBase<BankPlay>, IBankPlayCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the BankPlayCategory callbacks.
        /// </summary>
        private readonly IBankPlayCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="BankPlayCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// BankPlayCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public BankPlayCategory(IF2XTransport transport, IBankPlayCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<MoneyBetSend>(HandleMoneyBet);
            AddMessagehandler<MoneyBettableTransferSend>(HandleMoneyBettableTransfer);
            AddMessagehandler<MoneyCommittedChangedSend>(HandleMoneyCommittedChanged);
            AddMessagehandler<MoneyInSend>(HandleMoneyIn);
            AddMessagehandler<MoneyOutSend>(HandleMoneyOut);
            AddMessagehandler<MoneySetSend>(HandleMoneySet);
            AddMessagehandler<MoneyWonSend>(HandleMoneyWon);
            AddMessagehandler<UpdateBankPlayPropertiesSend>(HandleUpdateBankPlayProperties);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.BankPlay;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IBankPlayCategory Members

        /// <inheritdoc/>
        public BankPlayProperties GetBankPlayProperties()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetBankPlayPropertiesSend>();

            var reply = SendMessageAndGetReply<GetBankPlayPropertiesReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.BankPlayProperties;
        }

        /// <inheritdoc/>
        public ConfigData GetConfigData()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataSend>();

            var reply = SendMessageAndGetReply<GetConfigDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ConfigData;
        }

        /// <inheritdoc/>
        public PlayerMeters GetPlayerMeters()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPlayerMetersSend>();

            var reply = SendMessageAndGetReply<GetPlayerMetersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.PlayerMeters;
        }

        /// <inheritdoc/>
        public void PlayerCashoutRequest()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<PlayerCashoutRequestSend>();

            var reply = SendMessageAndGetReply<PlayerCashoutRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the MoneyBetSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleMoneyBet(MoneyBetSend message)
        {
            var errorMessage = callbackHandler.ProcessMoneyBet(message.PlayerMeters, message.AmountBet);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<MoneyBetReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the MoneyBettableTransferSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleMoneyBettableTransfer(MoneyBettableTransferSend message)
        {
            var errorMessage = callbackHandler.ProcessMoneyBettableTransfer(message.PlayerMeters, message.AmountMoved, message.GameTransferRequestSuccessful, message.GameTransferRequestSuccessfulSpecified, message.BettableTransferDirection);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<MoneyBettableTransferReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the MoneyCommittedChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleMoneyCommittedChanged(MoneyCommittedChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessMoneyCommittedChanged(message.PlayerMeters, message.AmountCommitted);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<MoneyCommittedChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the MoneyInSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleMoneyIn(MoneyInSend message)
        {
            var errorMessage = callbackHandler.ProcessMoneyIn(message.PlayerMeters, message.AmountIn, message.MoneyInSource, message.FundsTransferAccountSource, message.FundsTransferAccountSourceSpecified);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<MoneyInReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the MoneyOutSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleMoneyOut(MoneyOutSend message)
        {
            var errorMessage = callbackHandler.ProcessMoneyOut(message.PlayerMeters, message.AmountOut, message.MoneyOutSource);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<MoneyOutReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the MoneySetSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleMoneySet(MoneySetSend message)
        {
            var errorMessage = callbackHandler.ProcessMoneySet(message.PlayerMeters);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<MoneySetReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the MoneyWonSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleMoneyWon(MoneyWonSend message)
        {
            var errorMessage = callbackHandler.ProcessMoneyWon(message.PlayerMeters, message.AmountWon);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<MoneyWonReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the UpdateBankPlayPropertiesSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleUpdateBankPlayProperties(UpdateBankPlayPropertiesSend message)
        {
            var errorMessage = callbackHandler.ProcessUpdateBankPlayProperties(message.BankPlayProperties);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<UpdateBankPlayPropertiesReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        #endregion

    }

}

