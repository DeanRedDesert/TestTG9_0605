//-----------------------------------------------------------------------
// <copyright file = "ChooserDefinitionQueryCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.AppTypes;
    using Schemas.Internal.ChooserDefinitionQuery;
    using Schemas.Internal.PropertyTypes;

    /// <summary>
    /// Implementation of the F2X <see cref="ChooserDefinitionQuery"/> category.
    /// Chooser Definition Query category of messages.
    /// Category: 2001; Major Version: 1
    /// </summary>
    public class ChooserDefinitionQueryCategory : F2XTransactionalCategoryBase<ChooserDefinitionQuery>, IChooserDefinitionQueryCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ChooserDefinitionQueryCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public ChooserDefinitionQueryCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ChooserDefinitionQuery;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IChooserDefinitionQueryCategory Members

        /// <inheritdoc/>
        public PropertyNameList GetAppPropertyList(AppIdentifier app, string section)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetAppPropertyListSend>();
            var content = (GetAppPropertyListSend)request.Message.Item;
            content.App = app;
            content.Section = section;

            var reply = SendMessageAndGetReply<GetAppPropertyListReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Properties;
        }

        /// <inheritdoc/>
        public PropertyList GetAppPropertyValues(AppIdentifier app, string section, PropertyNameList properties)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetAppPropertyValuesSend>();
            var content = (GetAppPropertyValuesSend)request.Message.Item;
            content.App = app;
            content.Section = section;
            content.Properties = properties;

            var reply = SendMessageAndGetReply<GetAppPropertyValuesReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Properties;
        }

        /// <inheritdoc/>
        public PropertyNameList GetChooserPropertyList(string section)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetChooserPropertyListSend>();
            var content = (GetChooserPropertyListSend)request.Message.Item;
            content.Section = section;

            var reply = SendMessageAndGetReply<GetChooserPropertyListReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Properties;
        }

        /// <inheritdoc/>
        public PropertyList GetChooserPropertyValues(string section, PropertyNameList properties)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetChooserPropertyValuesSend>();
            var content = (GetChooserPropertyValuesSend)request.Message.Item;
            content.Section = section;
            content.Properties = properties;

            var reply = SendMessageAndGetReply<GetChooserPropertyValuesReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Properties;
        }

        #endregion

    }

}

