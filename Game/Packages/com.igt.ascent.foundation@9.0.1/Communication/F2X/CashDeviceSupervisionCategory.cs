//-----------------------------------------------------------------------
// <copyright file = "CashDeviceSupervisionCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.CashDeviceSupervision;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="CashDeviceSupervision"/> category.
    /// CashDeviceSupervision category of messages.
    /// Category: 134; Major Version: 1
    /// </summary>
    public class CashDeviceSupervisionCategory : F2XTransactionalCategoryBase<CashDeviceSupervision>, ICashDeviceSupervisionCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the CashDeviceSupervisionCategory callbacks.
        /// </summary>
        private readonly ICashDeviceSupervisionCategoryCallbacks callbackHandler;

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="CashDeviceSupervisionCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// CashDeviceSupervisionCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public CashDeviceSupervisionCategory(IF2XTransport transport, ICashDeviceSupervisionCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<ReportVoucherStackedSend>(HandleReportVoucherStacked);
            AddMessagehandler<RequestCashoutReviewSend>(HandleRequestCashoutReview);
            AddMessagehandler<RequestVoucherValidationSend>(HandleRequestVoucherValidation);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.CashDeviceSupervision;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by CashDeviceSupervisionCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region ICashDeviceSupervisionCategory Members

        /// <inheritdoc/>
        public void CashoutReviewResponse(CashoutReviewType cashoutReviewType, CashoutResponseStatus status)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<CashoutReviewResponseSend>();
            var content = (CashoutReviewResponseSend)request.Message.Item;
            content.CashoutReviewType = cashoutReviewType;
            content.Status = status;

            var reply = SendMessageAndGetReply<CashoutReviewResponseReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void SetCashoutReviewRegistration(IEnumerable<CashoutReviewType> cashoutReviewTypeList)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetCashoutReviewRegistrationSend>();
            var content = (SetCashoutReviewRegistrationSend)request.Message.Item;
            content.CashoutReviewTypeList = cashoutReviewTypeList.ToList();

            var reply = SendMessageAndGetReply<SetCashoutReviewRegistrationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void SetValidationRegistration(IEnumerable<int> systemIdList)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetValidationRegistrationSend>();
            var content = (SetValidationRegistrationSend)request.Message.Item;
            content.SystemIdList = systemIdList.ToList();

            var reply = SendMessageAndGetReply<SetValidationRegistrationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void VoucherValidationResponse(int systemId, string validationNumber, bool accept)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<VoucherValidationResponseSend>();
            var content = (VoucherValidationResponseSend)request.Message.Item;
            content.SystemId = systemId;
            content.ValidationNumber = validationNumber;
            content.Accept = accept;

            var reply = SendMessageAndGetReply<VoucherValidationResponseReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ReportVoucherStackedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleReportVoucherStacked(ReportVoucherStackedSend message)
        {
            var errorMessage = callbackHandler.ProcessReportVoucherStacked(message.SystemId, message.ValidationNumber, message.Accept);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ReportVoucherStackedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the RequestCashoutReviewSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleRequestCashoutReview(RequestCashoutReviewSend message)
        {
            var errorMessage = callbackHandler.ProcessRequestCashoutReview(message.CashoutReviewType);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<RequestCashoutReviewReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the RequestVoucherValidationSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleRequestVoucherValidation(RequestVoucherValidationSend message)
        {
            var errorMessage = callbackHandler.ProcessRequestVoucherValidation(message.SystemId, message.ValidationNumber);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<RequestVoucherValidationReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

