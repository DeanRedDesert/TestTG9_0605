//-----------------------------------------------------------------------
// <copyright file = "IShellHistoryControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.ShellHistoryControl;

    /// <summary>
    /// ShellHistoryControl category of messages which provides the shell access to it's critical data as well as
    /// controls for the coplayer to be used in history. This category is only valid in History mode.
    /// Category: 1034; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IShellHistoryControlCategory
    {
        /// <summary>
        /// A request to bind a coplayer session to the shell history context.
        /// </summary>
        /// <param name="session">
        /// The session to bind with the coplayer history data and context.
        /// </param>
        void BindCoplayerSessionToHistory(int session);

        /// <summary>
        /// Request to get the theme and denomination of the game-cycle history the shell session is bound to.
        /// </summary>
        /// <returns>
        /// The content of the response. This element should be omitted when an Exception is present.
        /// </returns>
        GetHistoryContextReplyContent GetHistoryContext();

        /// <summary>
        /// Message requesting to read critical data with the given name.
        /// </summary>
        /// <param name="readKeys">
        /// Identifies a list of the names of critical data to read.
        /// </param>
        /// <returns>
        /// The content of the ReadCritDataReply message.
        /// </returns>
        IEnumerable<ReadCritDataReplyContentItem> ReadCritData(IEnumerable<string> readKeys);

    }

}

