//-----------------------------------------------------------------------
// <copyright file = "GameGroupControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.GameGroupControl;
    using Schemas.Internal.Types;

    /// <summary>
    /// Implementation of the F2X <see cref="GameGroupControl"/> category.
    /// F2X Game group category of messages. Category: 1003 Version: 1
    /// </summary>
    public class GameGroupControlCategory : F2XTransactionalCategoryBase<GameGroupControl>, IGameGroupControlCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameGroupControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public GameGroupControlCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.GameGroupControl;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IGameGroupControlCategory Members

        /// <inheritdoc/>
        public IEnumerable<PayvarInformation> GetConfigDataPayvarGroupInformation()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataPayvarGroupInformationSend>();

            var reply = SendMessageAndGetReply<GetConfigDataPayvarGroupInformationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public PayvarIdentifier GetSelectedPayvar()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetSelectedPayvarSend>();

            var reply = SendMessageAndGetReply<GetSelectedPayvarReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Payvar;
        }

        /// <inheritdoc/>
        public void SelectPayvar(PayvarIdentifier payvar)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SelectPayvarSend>();
            var content = (SelectPayvarSend)request.Message.Item;
            content.Payvar = payvar;

            var reply = SendMessageAndGetReply<SelectPayvarReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

    }

}

