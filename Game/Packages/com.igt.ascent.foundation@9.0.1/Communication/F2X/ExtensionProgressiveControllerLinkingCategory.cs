//-----------------------------------------------------------------------
// <copyright file = "ExtensionProgressiveControllerLinkingCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.ExtensionProgressiveControllerLinking;
    using Schemas.Internal.Types;

    /// <summary>
    /// Implementation of the F2X <see cref="ExtensionProgressiveControllerLinking"/> category.
    /// Category for supporting Extension Progressive Controllers, by providing a means for the extension to link
    /// controller and game levels.
    /// This category can only affect EPCs (Extension Progressive Controllers) owned by this executable extension.
    /// Category: 3025; Major Version: 1
    /// </summary>
    public class ExtensionProgressiveControllerLinkingCategory : F2XTransactionalCategoryBase<ExtensionProgressiveControllerLinking>, IExtensionProgressiveControllerLinkingCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ExtensionProgressiveControllerLinkingCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public ExtensionProgressiveControllerLinkingCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ExtensionProgressiveControllerLinking;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IExtensionProgressiveControllerLinkingCategory Members

        /// <inheritdoc/>
        public void AddProgressiveLinks(IEnumerable<ProgressiveLink> progressiveLinks)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<AddProgressiveLinksSend>();
            var content = (AddProgressiveLinksSend)request.Message.Item;
            content.ProgressiveLinks = progressiveLinks.ToList();

            var reply = SendMessageAndGetReply<AddProgressiveLinksReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public IEnumerable<GameLevelSettings> QueryGameLevelDefinitions(PayvarIdentifier payvarId)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryGameLevelDefinitionsSend>();
            var content = (QueryGameLevelDefinitionsSend)request.Message.Item;
            content.PayvarId = payvarId;

            var reply = SendMessageAndGetReply<QueryGameLevelDefinitionsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.GameLevelSettings;
        }

        /// <inheritdoc/>
        public IEnumerable<ControllerProgressiveLink> QueryProgressiveLinks(string controllerId)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryProgressiveLinksSend>();
            var content = (QueryProgressiveLinksSend)request.Message.Item;
            content.ControllerId = controllerId;

            var reply = SendMessageAndGetReply<QueryProgressiveLinksReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ProgressiveLinks;
        }

        /// <inheritdoc/>
        public void RemoveProgressiveLinks(IEnumerable<ProgressiveLink> progressiveLinks)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<RemoveProgressiveLinksSend>();
            var content = (RemoveProgressiveLinksSend)request.Message.Item;
            content.ProgressiveLinks = progressiveLinks.ToList();

            var reply = SendMessageAndGetReply<RemoveProgressiveLinksReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

    }

}

