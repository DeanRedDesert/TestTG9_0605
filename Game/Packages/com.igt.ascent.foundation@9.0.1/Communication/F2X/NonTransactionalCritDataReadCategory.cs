//-----------------------------------------------------------------------
// <copyright file = "NonTransactionalCritDataReadCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.NonTransactionalCritDataRead;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="NonTransactionalCritDataRead"/> category.
    /// Non-transactional Critical Data Read category of messages.  Category: 116  Version: 1.
    /// </summary>
    public class NonTransactionalCritDataReadCategory : F2XCategoryBase<NonTransactionalCritDataRead>, INonTransactionalCritDataReadCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1),
            new Version(1, 2)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="NonTransactionalCritDataReadCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public NonTransactionalCritDataReadCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.NonTransactionalCritDataRead;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by NonTransactionalCritDataReadCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region INonTransactionalCritDataReadCategory Members

        /// <inheritdoc/>
        public IEnumerable<ReadCritDataItemReplyResult> ReadCritData(IEnumerable<CriticalDataItemSelector> criticalDataItemSelector)
        {
            var request = CreateBasicRequest<ReadCritDataSend>();
            var content = (ReadCritDataSend)request.Message.Item;
            content.CriticalDataItemSelector = criticalDataItemSelector.ToList();

            var reply = SendMessageAndGetReply<ReadCritDataReply>(Channel.Game, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        #endregion

    }

}

