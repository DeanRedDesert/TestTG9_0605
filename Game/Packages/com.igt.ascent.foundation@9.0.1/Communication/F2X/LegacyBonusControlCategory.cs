//-----------------------------------------------------------------------
// <copyright file = "LegacyBonusControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.LegacyBonusControl;

    /// <summary>
    /// Implementation of the F2X <see cref="LegacyBonusControl"/> category.
    /// LegacyBonusControl category of messages.  Category: 1004  Version: 1. Provides control to hold off bookkeeping
    /// of legacy bonuses controlled by the game.
    /// </summary>
    public class LegacyBonusControlCategory : F2XTransactionalCategoryBase<LegacyBonusControl>, ILegacyBonusControlCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the LegacyBonusControlCategory callbacks.
        /// </summary>
        private readonly ILegacyBonusControlCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="LegacyBonusControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// LegacyBonusControlCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public LegacyBonusControlCategory(IF2XTransport transport, ILegacyBonusControlCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<LegacyBonusArrivedSend>(HandleLegacyBonusArrived);
            AddMessagehandler<LegacyBonusHostLinkStatusChangedSend>(HandleLegacyBonusHostLinkStatusChanged);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.LegacyBonusControl;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region ILegacyBonusControlCategory Members

        /// <inheritdoc/>
        public void EndLegacyBonusBookingHoldOff(uint uniqueBonusId, bool uniqueBonusIdSpecified)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<EndLegacyBonusBookingHoldOffSend>();
            var content = (EndLegacyBonusBookingHoldOffSend)request.Message.Item;
            content.UniqueBonusId = uniqueBonusId;
            content.UniqueBonusIdSpecified = uniqueBonusIdSpecified;

            var reply = SendMessageAndGetReply<EndLegacyBonusBookingHoldOffReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public bool LegacyBonusNotificationEnable(bool enabled)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<LegacyBonusNotificationEnableSend>();
            var content = (LegacyBonusNotificationEnableSend)request.Message.Item;
            content.Enabled = enabled;

            var reply = SendMessageAndGetReply<LegacyBonusNotificationEnableReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Success;
        }

        /// <inheritdoc/>
        public LegacyBonusHostStatusData QueryLegacyBonusHostStatus()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryLegacyBonusHostStatusSend>();

            var reply = SendMessageAndGetReply<QueryLegacyBonusHostStatusReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.HostStatus;
        }

        /// <inheritdoc/>
        public QueryLegacyBonusStatusReplyContent QueryLegacyBonusStatus()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryLegacyBonusStatusSend>();

            var reply = SendMessageAndGetReply<QueryLegacyBonusStatusReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public bool RequestLegacyBonusBookingHoldOff(uint uniqueBonusId)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<RequestLegacyBonusBookingHoldOffSend>();
            var content = (RequestLegacyBonusBookingHoldOffSend)request.Message.Item;
            content.UniqueBonusId = uniqueBonusId;

            var reply = SendMessageAndGetReply<RequestLegacyBonusBookingHoldOffReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Success;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the LegacyBonusArrivedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleLegacyBonusArrived(LegacyBonusArrivedSend message)
        {
            var errorMessage = callbackHandler.ProcessLegacyBonusArrived(message.Bonus);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<LegacyBonusArrivedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the LegacyBonusHostLinkStatusChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleLegacyBonusHostLinkStatusChanged(LegacyBonusHostLinkStatusChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessLegacyBonusHostLinkStatusChanged(message.HostStatusData);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<LegacyBonusHostLinkStatusChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

