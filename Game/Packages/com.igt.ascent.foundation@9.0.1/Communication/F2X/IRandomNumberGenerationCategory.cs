//-----------------------------------------------------------------------
// <copyright file = "IRandomNumberGenerationCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.RandomNumberGeneration;

    /// <summary>
    /// RandomNumberGeneration category of messages, containing messages enabling a client to get random numbers from
    /// the foundation.
    /// Category: 1018; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IRandomNumberGenerationCategory
    {
        /// <summary>
        /// Message requesting a list of chaos seeded random numbers, with an individual range for each number.
        /// </summary>
        /// <param name="name">
        /// An identifier for the request.  Useful for testing when random numbers are being requested asynchronously
        /// with other processes.
        /// </param>
        /// <param name="rangeList">
        /// This is a list of Min/Max value pairs which limit each random number in the list on an individual basis. /
        /// Range of values for a specific random number. / Minimum value for a specific random number. / Maximum value
        /// for a specific random number.
        /// </param>
        /// <returns>
        /// The content of the GetListLimitedRandomNumbersReply message.
        /// </returns>
        IEnumerable<int> GetListLimitedRandomNumbers(string name, IEnumerable<GetListLimitedRandomNumbersSendRange> rangeList);

        /// <summary>
        /// Message requesting a list of chaos seeded random numbers.
        /// </summary>
        /// <param name="count">
        /// The count of how many random numbers this message is requesting.
        /// </param>
        /// <param name="duplicates">
        /// Number of duplicates allowed in the list of numbers being returned.
        /// </param>
        /// <param name="minimumValue">
        /// The minimum value of each random number.
        /// </param>
        /// <param name="maximumValue">
        /// The maximum value of each random number.
        /// </param>
        /// <param name="name">
        /// An identifier for the request.  Useful for testing when random numbers are being requested asynchronously
        /// with other processes.
        /// </param>
        /// <param name="alreadyPickedNumbers">
        /// Collection of numbers that have already been picked.  Used with the duplicates parameter to further control
        /// which random numbers are allowed.
        /// </param>
        /// <returns>
        /// The content of the GetRandomNumbersReply message.
        /// </returns>
        IEnumerable<int> GetRandomNumbers(uint count, uint duplicates, int minimumValue, int maximumValue, string name, IEnumerable<int> alreadyPickedNumbers);

    }

}

