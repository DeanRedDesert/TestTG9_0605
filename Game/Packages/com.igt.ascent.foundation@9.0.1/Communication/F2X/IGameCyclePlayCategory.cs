//-----------------------------------------------------------------------
// <copyright file = "IGameCyclePlayCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.GameCyclePlay;

    /// <summary>
    /// GameCyclePlay category of messages, containing messages for controlling the game cycle of a coplayer.
    /// Category: 1020; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IGameCyclePlayCategory
    {
        /// <summary>
        /// Request to abort the game cycle. Uncommit any bets, void wins. Transitions the GameCycleState to
        /// AbortPending. Valid from MainPlayComplete or Playing. If the abort is not accepted, the game cycle state
        /// will not change.
        /// </summary>
        /// <returns>
        /// The content of the AbortGameCycleReply message.
        /// </returns>
        bool AbortGameCycle();

        /// <summary>
        /// Message requesting to commit the player to a game. Transitions the GameCycleState from Idle to Committed.
        /// </summary>
        /// <returns>
        /// The content of the CommitGameCycleReply message.
        /// </returns>
        bool CommitGameCycle();

        /// <summary>
        /// Message requesting to end a game-cycle. Transitions the GameCycleState from Finalized to Idle.
        /// </summary>
        /// <param name="numberOfSteps">
        /// Number of play steps that took place during the game cycle.
        /// </param>
        void EndGameCycle(uint numberOfSteps);

        /// <summary>
        /// Message requesting to enroll the game cycle. Transitions the GameCycleState from Committed to EnrollPending.
        /// </summary>
        /// <param name="hostEnrollmentData">
        /// Binary host enrollment data. Opaque to the foundation
        /// </param>
        void EnrollGameCycle(byte[] hostEnrollmentData);

        /// <summary>
        /// Message to retrieve the enrollment response data. This message is valid in all states except Idle and
        /// Committed.
        /// </summary>
        /// <returns>
        /// The content of the response.  This element should be omitted when an exception is present.
        /// </returns>
        EnrollResponseDataReplyContent EnrollResponseData();

        /// <summary>
        /// Message to request an OutcomeList be evaluated (and potentially adjusted). Transitions the GameCycleState
        /// from Playing to EvaluatePending.
        /// </summary>
        /// <param name="outcomeList">
        /// List of outcomes / awards the client wishes to have evaluated.
        /// </param>
        /// <param name="lastOutcome">
        /// Flag indicating if this is the last outcome or not.
        /// </param>
        /// <param name="wagerCatOutcomes">
        /// List of outcomes for a specific wager category. This element is required when LastOutcome is true and must
        /// be empty or omitted when LastOutcome is false. / Outcome for a specific wager category.
        /// </param>
        void EvalOutcomeRequest(OutcomeList outcomeList, bool lastOutcome, EvalOutcomeRequestSendWagerCatOutcomes wagerCatOutcomes);

        /// <summary>
        /// Message to retrieve the outcome response data if Foundation evaluation has completed. This message may not
        /// be sent in the Idle, Committed, EnrollPending or EnrollComplete states. May not include an outcome list if
        /// the foundation evaluation has not yet completed.
        /// </summary>
        /// <returns>
        /// The content of the response.  This element should be omitted when an exception is present.
        /// </returns>
        EvalOutcomeResponseDataReplyContent EvalOutcomeResponseData();

        /// <summary>
        /// Message requesting that the OutcomeList be finalized. Transitions the GameCycleState from MainPlayComplete
        /// to FinalizePending.
        /// </summary>
        void FinalizeAwardRequest();

        /// <summary>
        /// Message requesting the current GameCycleState.
        /// </summary>
        /// <returns>
        /// The content of the QueryGameCycleStateReply message.
        /// </returns>
        GameCycleState QueryGameCycleState();

        /// <summary>
        /// Message requesting to start a game-cycle. Transitions the GameCycleState from Enroll Complete to Playing.
        /// </summary>
        void StartPlaying();

        /// <summary>
        /// Message requesting to release the player from a game commitment.  Transitions the GameCycleState from
        /// Committed to Idle.
        /// </summary>
        void UncommitGameCycle();

        /// <summary>
        /// Message requesting to unenroll the game cycle. Transitions the GameCycleState from EnrollComplete to Idle.
        /// </summary>
        void UnenrollGameCycle();

    }

}

