//-----------------------------------------------------------------------
// <copyright file = "ITicketPrintControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.TicketPrintControl;

    /// <summary>
    /// TicketPrintControl category of messages.
    /// Category: 135; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ITicketPrintControlCategory
    {
        /// <summary>
        /// A request from the bin to abort a ticket that was previously printed using this API, based on the provided
        /// TicketID. This API CANNOT abort a ticket printed through any other means. Tickets cannot be aborted once
        /// they begin printing, unless the printer enters a hard tilt. Attempting to abort an in progress or complete
        /// ticket will have the success value of the return set as false. Once a ticket reaches the PrintComplete
        /// state, then it cannot be canceled at all. Aborting a ticket print while the printer is in a hard tilt will
        /// prevent the ticket from being printed upon recovery. Sending an abort ticket command with an invalid ticket
        /// ID will result in an error.
        /// </summary>
        /// <param name="ticketId">
        /// An ID for the ticket that this command will abort the print of. A valid ID must be provided or an error will
        /// be returned. Tickets can only be aborted if they have not yet reached the PrintComplete state AND the
        /// printer is in a hard tilt. This will prevent the ticket from being printed again after the tilt is
        /// recovered. It cannot abort a print that is currently running with no errors.
        /// </param>
        /// <returns>
        /// The content of the AbortTicketPrintReply message.
        /// </returns>
        bool AbortTicketPrint(uint ticketId);

        /// <summary>
        /// A request from the bin to the foundation requesting to change the notification settings from
        /// TicketPrintControl to this bin. This setting is not power hit tolerant. Clients should set their
        /// notification levels on power up, loading and theme switching. The default value will be "All" sending all
        /// notifications to the client until this message is sent. Any notifications not specified in this message
        /// will be disabled.
        /// </summary>
        /// <param name="settings">
        /// The content of the request. This will hold notification registration settings for TicketPrintControl.
        /// </param>
        void NotificationRegistration(IEnumerable<NotificationOriginType> settings);

        /// <summary>
        /// Request from the bin for the foundation to print a ticket with the specified ticket type and the included
        /// data. The reply will have success set to false if the printer is totally unavailable or in the middle of a
        /// print job already, not just in a hard tilt. A hard tilt on the printer will result in a success, but the
        /// status messages will reflect that state and the ticket will not be printed until the tilt is resolved.
        /// </summary>
        /// <param name="ticketInformation">
        /// Contains the data that should be printed on the ticket for this print request. Each entry will be a new line
        /// for this ticket type.
        /// </param>
        /// <returns>
        /// The content of the response. This element should be omitted when an exception is present.
        /// </returns>
        PrintTicketReplyContent PrintTicket(TicketInformation ticketInformation);

        /// <summary>
        /// A Message to retrieve the behavior the foundation and printer are currently supporting. This request
        /// retrieves if printing is enabled, and the ticket types and keywords that are available for use by the bin.
        /// </summary>
        /// <returns>
        /// The content of the response. This element should be omitted when an exception is present.
        /// </returns>
        QueryPrintingSupportReplyContent QueryPrintingSupport();

        /// <summary>
        /// Request from the bin for the current status of a ticket that is being printed given a specific ticket ID.
        /// The foundation keeps a buffer of the last 10 tickets printed with the PrintTicketSend command. Requesting
        /// the status of a ticket ID that is not in that buffer (e.g. old and has been pushed out, or an ID that is as
        /// of yet unused) will have InvalidTicketID as the returned ticket status.
        /// </summary>
        /// <param name="ticketId">
        /// The ID of the ticket that this query is getting the status of. An invalid value will result in an error in
        /// the reply.
        /// </param>
        /// <returns>
        /// The content of the QueryTicketStatusReply message.
        /// </returns>
        TicketStatus QueryTicketStatus(uint ticketId);

    }

}

