//-----------------------------------------------------------------------
// <copyright file = "ExtensionAppSelectionCategory.cs" company = "IGT">
//     Copyright (c) 2021 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.AppTypes;
    using Schemas.Internal.ExtensionAppSelection;

    /// <summary>
    /// Implementation of the F2X <see cref="ExtensionAppSelection"/> category.
    /// The category of messages to allow an AppExtension to query available central apps, select different central apps
    /// for play, and to respond to requests to show (in-app) chooser.
    /// Category: 3033; Major Version: 1
    /// </summary>
    public class ExtensionAppSelectionCategory : F2XTransactionalCategoryBase<ExtensionAppSelection>, IExtensionAppSelectionCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the ExtensionAppSelectionCategory callbacks.
        /// </summary>
        private readonly IExtensionAppSelectionCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ExtensionAppSelectionCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ExtensionAppSelectionCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ExtensionAppSelectionCategory(IF2XTransport transport, IExtensionAppSelectionCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<AppSelectionStateChangedSend>(HandleAppSelectionStateChanged);
            AddMessagehandler<AvailableCentralAppsChangedSend>(HandleAvailableCentralAppsChanged);
            AddMessagehandler<CentralAppSelectionCanceledSend>(HandleCentralAppSelectionCanceled);
            AddMessagehandler<CentralAppSelectionCompleteSend>(HandleCentralAppSelectionComplete);
            AddMessagehandler<ChooserRequestedSend>(HandleChooserRequested);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ExtensionAppSelection;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IExtensionAppSelectionCategory Members

        /// <inheritdoc/>
        public bool CentralAppSelectionRequest(AppSelector app, bool skipLoadingScreen)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<CentralAppSelectionRequestSend>();
            var content = (CentralAppSelectionRequestSend)request.Message.Item;
            content.App = app;
            content.SkipLoadingScreen = skipLoadingScreen;

            var reply = SendMessageAndGetReply<CentralAppSelectionRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Accepted;
        }

        /// <inheritdoc/>
        public AppSelectionState GetAppSelectionState()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetAppSelectionStateSend>();

            var reply = SendMessageAndGetReply<GetAppSelectionStateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.State;
        }

        /// <inheritdoc/>
        public AppInformationList GetAvailableCentralApps()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetAvailableCentralAppsSend>();

            var reply = SendMessageAndGetReply<GetAvailableCentralAppsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Apps;
        }

        /// <inheritdoc/>
        public bool GetConfigData()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataSend>();

            var reply = SendMessageAndGetReply<GetConfigDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.AppSelectionEnabled;
        }

        /// <inheritdoc/>
        public AppSelector GetSelectedCentralApp()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetSelectedCentralAppSend>();

            var reply = SendMessageAndGetReply<GetSelectedCentralAppReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.SelectedApp;
        }

        /// <inheritdoc/>
        public void SetAppSelectionEventRegistration(AppSelectionEventList appSelectionEventLists)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetAppSelectionEventRegistrationSend>();
            var content = (SetAppSelectionEventRegistrationSend)request.Message.Item;
            content.AppSelectionEventLists = appSelectionEventLists;

            var reply = SendMessageAndGetReply<SetAppSelectionEventRegistrationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the AppSelectionStateChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleAppSelectionStateChanged(AppSelectionStateChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessAppSelectionStateChanged(message.State);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<AppSelectionStateChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the AvailableCentralAppsChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleAvailableCentralAppsChanged(AvailableCentralAppsChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessAvailableCentralAppsChanged(message.Available, message.Updated, message.Removed);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<AvailableCentralAppsChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the CentralAppSelectionCanceledSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleCentralAppSelectionCanceled(CentralAppSelectionCanceledSend message)
        {
            var errorMessage = callbackHandler.ProcessCentralAppSelectionCanceled();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<CentralAppSelectionCanceledReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the CentralAppSelectionCompleteSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleCentralAppSelectionComplete(CentralAppSelectionCompleteSend message)
        {
            var errorMessage = callbackHandler.ProcessCentralAppSelectionComplete();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<CentralAppSelectionCompleteReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the ChooserRequestedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleChooserRequested(ChooserRequestedSend message)
        {
            var errorMessage = callbackHandler.ProcessChooserRequested();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ChooserRequestedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

