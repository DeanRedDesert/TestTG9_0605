//-----------------------------------------------------------------------
// <copyright file = "RandomNumberGenerationCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.RandomNumberGeneration;

    /// <summary>
    /// Implementation of the F2X <see cref="RandomNumberGeneration"/> category.
    /// RandomNumberGeneration category of messages, containing messages enabling a client to get random numbers from
    /// the foundation.
    /// Category: 1018; Major Version: 1
    /// </summary>
    public class RandomNumberGenerationCategory : F2XTransactionalCategoryBase<RandomNumberGeneration>, IRandomNumberGenerationCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="RandomNumberGenerationCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public RandomNumberGenerationCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.RandomNumberGeneration;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IRandomNumberGenerationCategory Members

        /// <inheritdoc/>
        public IEnumerable<int> GetListLimitedRandomNumbers(string name, IEnumerable<GetListLimitedRandomNumbersSendRange> rangeList)
        {
            var request = CreateTransactionalRequest<GetListLimitedRandomNumbersSend>();
            var content = (GetListLimitedRandomNumbersSend)request.Message.Item;
            content.Name = name;
            content.RangeList = rangeList.ToList();

            var reply = SendMessageAndGetReply<GetListLimitedRandomNumbersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.RandomNumberList;
        }

        /// <inheritdoc/>
        public IEnumerable<int> GetRandomNumbers(uint count, uint duplicates, int minimumValue, int maximumValue, string name, IEnumerable<int> alreadyPickedNumbers)
        {
            var request = CreateTransactionalRequest<GetRandomNumbersSend>();
            var content = (GetRandomNumbersSend)request.Message.Item;
            content.Count = count;
            content.Duplicates = duplicates;
            content.MinimumValue = minimumValue;
            content.MaximumValue = maximumValue;
            content.Name = name;
            content.AlreadyPickedNumbers = alreadyPickedNumbers == null ? null : alreadyPickedNumbers.ToList();

            var reply = SendMessageAndGetReply<GetRandomNumbersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.RandomNumberList;
        }

        #endregion

    }

}

