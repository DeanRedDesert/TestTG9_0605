//-----------------------------------------------------------------------
// <copyright file = "CdsHhrCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.CdsHhr;

    /// <summary>
    /// Implementation of the F2X <see cref="CdsHhr"/> category.
    /// The CdsHhr category of messages to support Historical Horse Racing.
    /// Category: 1035; Major Version: 1
    /// </summary>
    public class CdsHhrCategory : F2XTransactionalCategoryBase<CdsHhr>, ICdsHhrCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="CdsHhrCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public CdsHhrCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.CdsHhr;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region ICdsHhrCategory Members

        /// <inheritdoc/>
        public void AwardMismatchDetected(string logMessage)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<AwardMismatchDetectedSend>();
            var content = (AwardMismatchDetectedSend)request.Message.Item;
            content.LogMessage = logMessage;

            var reply = SendMessageAndGetReply<AwardMismatchDetectedReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public IEnumerable<DenomConfig> GetConfigDataCdsGameConfig()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataCdsGameConfigSend>();

            var reply = SendMessageAndGetReply<GetConfigDataCdsGameConfigReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public bool GetConfigDataMultidrawSupported()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataMultidrawSupportedSend>();

            var reply = SendMessageAndGetReply<GetConfigDataMultidrawSupportedReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.MultidrawSupported;
        }

        /// <inheritdoc/>
        public EnrollmentResponse GetEnrollmentResponseData()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetEnrollmentResponseDataSend>();

            var reply = SendMessageAndGetReply<GetEnrollmentResponseDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.EnrollmentResponse;
        }

        /// <inheritdoc/>
        public void SetEnrollmentRequestData(IEnumerable<EnrollmentRequestItem> enrollmentRequestItems)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetEnrollmentRequestDataSend>();
            var content = (SetEnrollmentRequestDataSend)request.Message.Item;
            content.EnrollmentRequestItems = enrollmentRequestItems.ToList();

            var reply = SendMessageAndGetReply<SetEnrollmentRequestDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

    }

}

