//-----------------------------------------------------------------------
// <copyright file = "ITournamentSessionControlCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using Schemas.Internal.TournamentSessionControl;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="TournamentSessionControl"/> category.
    /// Tournament Session category of messages.  Category: 1001  Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ITournamentSessionControlCategoryCallbacks
    {
        /// <summary>
        /// Event sent from the Foundation to the Bin on the FI channel indicating that the session is complete.
        /// </summary>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessSessionComplete();

        /// <summary>
        /// Notification from the Foundation to the Bin on the FI channel  that the configuration for the pending
        /// Tournament session has changed.
        /// </summary>
        /// <param name="configuration">
        /// Session configuration values.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessSessionConfigurationChanged(SessionConfiguration configuration);

        /// <summary>
        /// Event sent from the Foundation to the Bin on the FI channel indicating that the session has been reset.
        /// </summary>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessSessionReset();

        /// <summary>
        /// Event sent from the Foundation to the Bin on the FI channel indicating that the session has started.
        /// </summary>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessSessionStart();

    }

}

