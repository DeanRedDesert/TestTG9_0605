//-----------------------------------------------------------------------
// <copyright file = "CdsEcpCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.CdsEcp;

    /// <summary>
    /// Implementation of the F2X <see cref="CdsEcp"/> category.
    /// CdsEcp category of messages.  Supports (HHR Exacta) Ecp.
    /// Category: 1037; Major Version: 1
    /// </summary>
    public class CdsEcpCategory : F2XTransactionalCategoryBase<CdsEcp>, ICdsEcpCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the CdsEcpCategory callbacks.
        /// </summary>
        private readonly ICdsEcpCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="CdsEcpCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// CdsEcpCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public CdsEcpCategory(IF2XTransport transport, ICdsEcpCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<ActionPlaySend>(HandleActionPlay);
            AddMessagehandler<PlayCompleteSend>(HandlePlayComplete);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.CdsEcp;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region ICdsEcpCategory Members

        /// <inheritdoc/>
        public void AwardMismatchDetected(string logMessage)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<AwardMismatchDetectedSend>();
            var content = (AwardMismatchDetectedSend)request.Message.Item;
            content.LogMessage = logMessage;

            var reply = SendMessageAndGetReply<AwardMismatchDetectedReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public GetConfigDataCdsGameConfigReplyContent GetConfigDataCdsGameConfig()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataCdsGameConfigSend>();

            var reply = SendMessageAndGetReply<GetConfigDataCdsGameConfigReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public GetEnrollmentResponseDataReplyContentEnrollmentResponse GetEnrollmentResponseData()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetEnrollmentResponseDataSend>();

            var reply = SendMessageAndGetReply<GetEnrollmentResponseDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public bool SetBetData(BetData betData)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetBetDataSend>();
            var content = (SetBetDataSend)request.Message.Item;
            content.BetData = betData;

            var reply = SendMessageAndGetReply<SetBetDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.InitiateGamePlay;
        }

        /// <inheritdoc/>
        public void SetEnrollmentRequestData(BetConfig betConfig)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetEnrollmentRequestDataSend>();
            var content = (SetEnrollmentRequestDataSend)request.Message.Item;
            content.BetConfig = betConfig;

            var reply = SendMessageAndGetReply<SetEnrollmentRequestDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ActionPlaySend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleActionPlay(ActionPlaySend message)
        {
            var errorMessage = callbackHandler.ProcessActionPlay();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ActionPlayReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the PlayCompleteSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandlePlayComplete(PlayCompleteSend message)
        {
            var errorMessage = callbackHandler.ProcessPlayComplete();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<PlayCompleteReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

