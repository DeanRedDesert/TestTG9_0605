//-----------------------------------------------------------------------
// <copyright file = "PlayerTippingCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.PlayerTipping;
    using Schemas.Internal.Types;

    /// <summary>
    /// Implementation of the F2X <see cref="PlayerTipping"/> category.
    /// PlayerTipping category.  Defines messages between extensions and foundation to satisfy printing of tipping
    /// vouchers.
    /// Category: 3032; Major Version: 1
    /// </summary>
    public class PlayerTippingCategory : F2XTransactionalCategoryBase<PlayerTipping>, IPlayerTippingCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the PlayerTippingCategory callbacks.
        /// </summary>
        private readonly IPlayerTippingCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="PlayerTippingCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// PlayerTippingCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public PlayerTippingCategory(IF2XTransport transport, IPlayerTippingCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<TippingResponseSend>(HandleTippingResponse);
            AddMessagehandler<UpdatePropertiesSend>(HandleUpdateProperties);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.PlayerTipping;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IPlayerTippingCategory Members

        /// <inheritdoc/>
        public Properties GetProperties()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPropertiesSend>();

            var reply = SendMessageAndGetReply<GetPropertiesReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Properties;
        }

        /// <inheritdoc/>
        public bool TippingRequest(Amount amount)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<TippingRequestSend>();
            var content = (TippingRequestSend)request.Message.Item;
            content.Amount = amount;

            var reply = SendMessageAndGetReply<TippingRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ReservationSucceeded;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the TippingResponseSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleTippingResponse(TippingResponseSend message)
        {
            var errorMessage = callbackHandler.ProcessTippingResponse(message.TemplateType, message.ValidationNumber, message.Address1, message.Address2, message.Address3, message.TicketTitle, message.ValidationLabel, message.FormattedValidationNumber, message.TicketDate, message.TicketTime, message.FormattedTicketNumber, message.FormattedMoneyText1, message.FormattedMoneyText2, message.FormattedNumericAmount, message.Expiration, message.MachineId, message.FormattedValidationNumber2, message.ManualAuthenticationNumber, message.ManualAuthentication2DBarcode);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<TippingResponseReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the UpdatePropertiesSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleUpdateProperties(UpdatePropertiesSend message)
        {
            var errorMessage = callbackHandler.ProcessUpdateProperties(message.Content);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<UpdatePropertiesReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        #endregion

    }

}

