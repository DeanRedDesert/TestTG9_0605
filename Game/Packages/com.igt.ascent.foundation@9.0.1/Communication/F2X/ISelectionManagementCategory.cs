//-----------------------------------------------------------------------
// <copyright file = "ISelectionManagementCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.SelectionManagement;
    using Schemas.Internal.Types;

    /// <summary>
    /// Selection Management category of messages.
    /// Category: 2002; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ISelectionManagementCategory
    {
        /// <summary>
        /// A message to the foundation to display a shell configuration.
        /// </summary>
        /// <param name="shell">
        /// The shell to display. An empty identifier indicates the current shell should be deselected.
        /// </param>
        /// <param name="denom">
        /// The denom to display.
        /// </param>
        /// <param name="displayState">
        /// The requested display state of the App.
        /// </param>
        /// <returns>
        /// The content of the DisplayShellReply message.
        /// </returns>
        bool DisplayShell(ShellIdentifier shell, uint denom, DisplayState displayState);

        /// <summary>
        /// A message to the foundation to display a theme configuration.
        /// </summary>
        /// <param name="theme">
        /// The theme to display. An empty identifier indicates the current theme should be deselected.
        /// </param>
        /// <param name="denom">
        /// The denom to display.
        /// </param>
        /// <param name="displayState">
        /// The requested display state of the App.
        /// </param>
        /// <returns>
        /// The content of the DisplayThemeReply message.
        /// </returns>
        bool DisplayTheme(ThemeIdentifier theme, uint denom, DisplayState displayState);

        /// <summary>
        /// Get the state of the selected app.
        /// </summary>
        /// <returns>
        /// The content of the GetAppStateReply message.
        /// </returns>
        AppState GetAppState();

        /// <summary>
        /// Get a list of available apps and their info from the foundation.
        /// </summary>
        /// <returns>
        /// The content of the response. This element should be omitted when an exception is present.
        /// </returns>
        GetAvailableAppsReplyContent GetAvailableApps();

        /// <summary>
        /// Message to the foundation to get the default app configuration.
        /// </summary>
        /// <returns>
        /// The content of the response. This element should be omitted when an exception is present.
        /// </returns>
        GetDefaultAppReplyContent GetDefaultApp();

        /// <summary>
        /// Get the property names for a game from the foundation.
        /// </summary>
        /// <param name="theme">
        /// Themes to query.
        /// </param>
        /// <param name="section">
        /// Property sections to query.
        /// </param>
        /// <returns>
        /// The content of the GetGamePropertiesReply message.
        /// </returns>
        IEnumerable<GameProperties> GetGameProperties(IEnumerable<ThemeIdentifier> theme, IEnumerable<string> section);

        /// <summary>
        /// Get the current selected app configuration.
        /// </summary>
        /// <returns>
        /// The content of the response. This element should be omitted when an exception is present.
        /// </returns>
        GetSelectedAppReplyContent GetSelectedApp();

        /// <summary>
        /// Get the performance meters for a theme.
        /// </summary>
        /// <param name="theme">
        /// Themes to query.
        /// </param>
        /// <param name="periodInWeeks">
        /// The timespan in weeks to get performance data for. E.G. "4" would be data for the last 4 weeks.
        /// </param>
        /// <returns>
        /// The content of the GetThemePerformanceMetersReply message.
        /// </returns>
        IEnumerable<ThemePerformanceMeters> GetThemePerformanceMeters(IEnumerable<ThemeIdentifier> theme, int periodInWeeks);

        /// <summary>
        /// A message to the foundation to set the offerability of the Chooser.
        /// </summary>
        /// <param name="offerable">
        /// Flag indicating if the chooser may be offered.
        /// </param>
        void SetChooserOfferable(bool offerable);

    }

}

