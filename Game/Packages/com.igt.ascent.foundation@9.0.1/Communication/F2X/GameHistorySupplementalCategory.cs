//-----------------------------------------------------------------------
// <copyright file = "GameHistorySupplementalCategory.cs" company = "IGT">
//     Copyright (c) 2021 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.GameHistorySupplemental;

    /// <summary>
    /// Implementation of the F2X <see cref="GameHistorySupplemental"/> category.
    /// The GameHistorySupplemental category of messages allows the game to report supplemental history information to
    /// the foundation
    /// Category: 1040; Major Version: 1
    /// </summary>
    public class GameHistorySupplementalCategory : F2XTransactionalCategoryBase<GameHistorySupplemental>, IGameHistorySupplementalCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameHistorySupplementalCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public GameHistorySupplementalCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.GameHistorySupplemental;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IGameHistorySupplementalCategory Members

        /// <inheritdoc/>
        public void SetExportData(DataFormatIdentifier exportDataFormatIdentifier, byte[] exportData)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetExportDataSend>();
            var content = (SetExportDataSend)request.Message.Item;
            content.ExportDataFormatIdentifier = exportDataFormatIdentifier;
            content.ExportData = exportData;

            var reply = SendMessageAndGetReply<SetExportDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

    }

}

