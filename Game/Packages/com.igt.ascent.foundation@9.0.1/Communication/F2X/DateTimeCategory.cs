//-----------------------------------------------------------------------
// <copyright file = "DateTimeCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual editing when merging.
// All changes are marked with "MANUAL EDIT:"
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    // MANUAL EDIT: Add namespaces and aliases for ambiguous System vs. F2X namespace collisions.     
    using F2XTypes = Schemas.Internal.Types;
    using F2XDateTime = Schemas.Internal.DateTime;
    using DateTime = Schemas.Internal.DateTime.DateTime;

    /// <summary>
    /// Implementation of the F2X <see cref="DateTime"/> category.
    /// DateTime category of messages.
    /// Category: 111; Major Version: 2
    /// </summary>
    public class DateTimeCategory : F2XTransactionalCategoryBase<DateTime>, IDateTimeCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the DateTimeCategory callbacks.
        /// </summary>
        private readonly IDateTimeCategoryCallbacks callbackHandler;

        private const string MethodGetConfigDataDateTimeMinimumUpdateInterval = "GetConfigDataDateTimeMinimumUpdateInterval";
        private const string MethodGetDateTime = "GetDateTime";

        /// <summary>
        /// A look-up table for the methods that are NOT available in all supported versions.
        /// Keyed by the method name, the value is the version where the method becomes available.
        /// </summary>
        private readonly Dictionary<string, F2XTypes.Version> methodSupportingVersions = new Dictionary<string, F2XTypes.Version>
        {
            { MethodGetConfigDataDateTimeMinimumUpdateInterval, new F2XTypes.Version(2, 1) },
            { MethodGetDateTime, new F2XTypes.Version(2, 1) }
        };

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<F2XTypes.Version> supportedVersions = new List<F2XTypes.Version>
        {
            new F2XTypes.Version(2, 0),
            new F2XTypes.Version(2, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private F2XTypes.Version effectiveVersion = new F2XTypes.Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="DateTimeCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// DateTimeCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public DateTimeCategory(IF2XTransport transport, IDateTimeCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<F2XDateTime.DateTimeChangedSend>(HandleDateTimeChanged);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.DateTime;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new F2XTypes.Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by DateTimeCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region IDateTimeCategory Members

        /// <inheritdoc/>
        public uint GetConfigDataDateTimeMinimumUpdateInterval()
        {
            if(IsMethodSupported(MethodGetConfigDataDateTimeMinimumUpdateInterval))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<F2XDateTime.GetConfigDataDateTimeMinimumUpdateIntervalSend>();

                var reply = SendMessageAndGetReply<F2XDateTime.GetConfigDataDateTimeMinimumUpdateIntervalReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.MinimumUpdateInterval;
            }

            return default(uint);
        }

        /// <inheritdoc/>
        public System.DateTime GetDateTime()
        {
            if(IsMethodSupported(MethodGetDateTime))
            {
                var request = CreateBasicRequest<F2XDateTime.GetDateTimeSend>();

                var reply = SendMessageAndGetReply<F2XDateTime.GetDateTimeReply>(Channel.Game, request);
                CheckReply(reply.Exception);
                return reply.Content.DateTime;
            }

            return default(System.DateTime);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the DateTimeChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleDateTimeChanged(F2XDateTime.DateTimeChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessDateTimeChanged(message.NewTime, message.OldTime);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<F2XDateTime.DateTimeChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Checks if a method is supported by the effective version of the category.
        /// </summary>
        /// <param name="methodName">
        /// The name of the method to check.
        /// </param>
        /// <returns>
        /// True if the method is supported. False otherwise.
        /// </returns>
        private bool IsMethodSupported(string methodName)
        {
            // Methods not in the dictionary are available in all versions.
            var result = true;

            if(methodSupportingVersions.ContainsKey(methodName))
            {
                result = effectiveVersion >= methodSupportingVersions[methodName];
            }

            return result;
        }

        #endregion

    }

}

