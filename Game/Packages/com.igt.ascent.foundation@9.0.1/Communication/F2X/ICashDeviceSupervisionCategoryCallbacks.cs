//-----------------------------------------------------------------------
// <copyright file = "ICashDeviceSupervisionCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.CashDeviceSupervision;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="CashDeviceSupervision"/> category.
    /// CashDeviceSupervision category of messages.
    /// Category: 134; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ICashDeviceSupervisionCategoryCallbacks
    {
        /// <summary>
        /// Inform client if voucher was stacked or rejected, if client registered for it.
        /// </summary>
        /// <param name="systemId">
        /// The unique system id a client registers for validation.
        /// </param>
        /// <param name="validationNumber">
        /// Voucher validation number of the stacked or rejected ticket.
        /// </param>
        /// <param name="accept">
        /// true: ticket/voucher stacked  false: ticket/voucher rejected
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessReportVoucherStacked(int systemId, string validationNumber, bool accept);

        /// <summary>
        /// Delegate the cashout review to the client if registered.
        /// </summary>
        /// <param name="cashoutReviewType">
        /// Cashout review type which a client has registered.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessRequestCashoutReview(CashoutReviewType cashoutReviewType);

        /// <summary>
        /// Inform client to validate reported validation, if client registered for it.
        /// </summary>
        /// <param name="systemId">
        /// The unique system id a client registers for validation.
        /// </param>
        /// <param name="validationNumber">
        /// Voucher validation number to validate.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessRequestVoucherValidation(int systemId, string validationNumber);

    }

}

