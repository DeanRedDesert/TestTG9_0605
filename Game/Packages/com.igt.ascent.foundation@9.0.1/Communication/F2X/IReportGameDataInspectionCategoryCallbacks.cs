//-----------------------------------------------------------------------
// <copyright file = "IReportGameDataInspectionCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.ReportGameDataInspection;
    using Schemas.Internal.Types;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="ReportGameDataInspection"/> category.
    /// Report Game Data Inspection category of messages. This category is used to request game specific report data.
    /// The data is used by the Foundation to generate reports with a standardized layout, such as the one required by
    /// Macau.
    /// Category: 4001; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IReportGameDataInspectionCategoryCallbacks
    {
        /// <summary>
        /// Request from the Foundation for an HTML inspection report. The resulting report is required by certain
        /// jurisdictions, such as Macau.
        /// </summary>
        /// <param name="culture">
        /// The culture/language to use when formatting report text.
        /// </param>
        /// <param name="themeInfoList">
        /// List of enabled themes for which the report needs to be generated. This list will never be empty.
        /// </param>
        /// <param name="callbackResult">
        /// [Out] The HTML inspection report that was requested.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessGetHtmlInspectionReport(string culture, IEnumerable<ThemeInfo> themeInfoList, out GetHtmlInspectionReportReplyContent callbackResult);

        /// <summary>
        /// Request from the Foundation for an inspection report.  The resulting report is required by certain
        /// jurisdictions, such as Macau.
        /// </summary>
        /// <param name="culture">
        /// The culture/language to use when formatting report text.
        /// </param>
        /// <param name="theme">
        /// Identifies the theme to use for generating the report.
        /// </param>
        /// <param name="payvar">
        /// Identifies the payvar to use for generating the report.
        /// </param>
        /// <param name="denomination">
        /// The denomination to use for generating the report.
        /// </param>
        /// <param name="callbackResult">
        /// [Out] The inspection report that was requested.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessGetInspectionReport(string culture, ThemeIdentifier theme, PayvarIdentifier payvar, uint denomination, out GetInspectionReportReplyContent callbackResult);

        /// <summary>
        /// Request from foundation for the type in which the inspection report will be provided by the client.
        /// </summary>
        /// <param name="callbackResult">
        /// [Out]
        /// States the type of report that will be generated by the client.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessGetInspectionReportType(out InspectionReportType callbackResult);

        /// <summary>
        /// Request from the foundation for the minimum player-wagerable credit balance required to commit a new
        /// game-cycle for each theme, payvar and denomination combination given.
        /// </summary>
        /// <param name="minimumPlayableCreditBalanceRequestList">
        /// List of requests for the minimum player-wagerable credit balance required to commit a new game-cycle.
        /// </param>
        /// <param name="callbackResult">
        /// [Out] List of minimum credit balance responses.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessGetMinimumPlayableCreditBalance(MinimumPlayableCreditBalanceRequestList minimumPlayableCreditBalanceRequestList, out MinimumPlayableCreditBalanceResponseList callbackResult);

    }

}

