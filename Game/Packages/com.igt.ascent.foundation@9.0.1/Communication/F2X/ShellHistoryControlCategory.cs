//-----------------------------------------------------------------------
// <copyright file = "ShellHistoryControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.ShellHistoryControl;

    /// <summary>
    /// Implementation of the F2X <see cref="ShellHistoryControl"/> category.
    /// ShellHistoryControl category of messages which provides the shell access to it's critical data as well as
    /// controls for the coplayer to be used in history. This category is only valid in History mode.
    /// Category: 1034; Major Version: 1
    /// </summary>
    public class ShellHistoryControlCategory : F2XTransactionalCategoryBase<ShellHistoryControl>, IShellHistoryControlCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ShellHistoryControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public ShellHistoryControlCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ShellHistoryControl;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IShellHistoryControlCategory Members

        /// <inheritdoc/>
        public void BindCoplayerSessionToHistory(int session)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<BindCoplayerSessionToHistorySend>();
            var content = (BindCoplayerSessionToHistorySend)request.Message.Item;
            content.Session = session;

            var reply = SendMessageAndGetReply<BindCoplayerSessionToHistoryReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public GetHistoryContextReplyContent GetHistoryContext()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetHistoryContextSend>();

            var reply = SendMessageAndGetReply<GetHistoryContextReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public IEnumerable<ReadCritDataReplyContentItem> ReadCritData(IEnumerable<string> readKeys)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<ReadCritDataSend>();
            var content = (ReadCritDataSend)request.Message.Item;
            content.ReadKeys = readKeys.ToList();

            var reply = SendMessageAndGetReply<ReadCritDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        #endregion

    }

}

