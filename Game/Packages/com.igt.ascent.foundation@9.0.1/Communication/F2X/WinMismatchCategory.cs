//-----------------------------------------------------------------------
// <copyright file = "WinMismatchCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual editing when merging.
// All changes are marked with "MANUAL EDIT:"
//-----------------------------------------------------------------------


namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.WinMismatch;
    using System.Linq;

    /// <summary>
    /// Implementation of the F2X <see cref="WinMismatch"/> category.
    /// F2X Win Mismatch category of messages, which is used for the Foundation to communicate with the extension for
    /// the detection of win mismatch.
    /// Category: 3022; Major Version: 1
    /// </summary>
    public class WinMismatchCategory : F2XCategoryBase<WinMismatch>
    {
        #region Fields

        /// <summary>
        /// Object which implements the WinMismatchCategory callbacks.
        /// </summary>
        private readonly IWinMismatchCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="WinMismatchCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// WinMismatchCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public WinMismatchCategory(IF2XTransport transport, IWinMismatchCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<VerifyProgressiveAwardsSend>(HandleVerifyProgressiveAwards);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.WinMismatch;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the VerifyProgressiveAwardsSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleVerifyProgressiveAwards(VerifyProgressiveAwardsSend message)
        {
            IEnumerable<ProgressiveAward> callbackResult;
            var errorMessage = callbackHandler.ProcessVerifyProgressiveAwards(message.CurrentProgressiveAwards, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<VerifyProgressiveAwardsReply>(errorCode, errorMessage);
            var reply = (VerifyProgressiveAwardsReply)replyMessage.Message.Item;
            // MANUAL EDIT: Convert the callbackResult to a List.
            reply.Content = callbackResult.ToList();
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

