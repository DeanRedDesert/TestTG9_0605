//-----------------------------------------------------------------------
// <copyright file = "VoucherRedemptionCategory.cs" company = "IGT">
//     Copyright (c) 2021 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.VoucherRedemption;

    /// <summary>
    /// Implementation of the F2X <see cref="VoucherRedemption"/> category.
    /// The F2X VoucherRedemption category of messages, which provides APIs for communication between foundation and
    /// extension client in terms of voucher redemption process.
    /// A complete Voucher Redemption Process consists of two steps in a row, let say: voucher review step and voucher
    /// redemption step, as defined as follows:
    /// - Voucher review step: The host shall be responsible for reviewing the voucher and if accepted, it means that
    /// this voucher contains an amount, and then the host shall respond with the voucher amounts and indicate the
    /// voucher type (subtype of ticket)
    /// - Voucher redemption step: The host shall be responsible for redeeming the voucher, if it contains an amount,
    /// and transferring the voucher amounts back to the Ascent local bank
    /// Category: 150; Major Version: 1
    /// </summary>
    public class VoucherRedemptionCategory : F2XTransactionalCategoryBase<VoucherRedemption>, IVoucherRedemptionCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the VoucherRedemptionCategory callbacks.
        /// </summary>
        private readonly IVoucherRedemptionCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="VoucherRedemptionCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// VoucherRedemptionCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public VoucherRedemptionCategory(IF2XTransport transport, IVoucherRedemptionCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<AbortVoucherRedemptionSend>(HandleAbortVoucherRedemption);
            AddMessagehandler<VoucherRedemptionRequestSend>(HandleRequest);
            AddMessagehandler<VoucherReviewRequestSend>(HandleVoucherReviewRequest);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.VoucherRedemption;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IVoucherRedemptionCategory Members

        /// <inheritdoc/>
        public IEnumerable<VoucherType> SetVoucherRedemptionRegistrations(IEnumerable<VoucherRedemptionRegistrationType> voucherRedemptionRegistrations)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetVoucherRedemptionRegistrationsSend>();
            var content = (SetVoucherRedemptionRegistrationsSend)request.Message.Item;
            content.VoucherRedemptionRegistrations = voucherRedemptionRegistrations.ToList();

            var reply = SendMessageAndGetReply<SetVoucherRedemptionRegistrationsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.RegisteredVoucherTypes;
        }

        /// <inheritdoc/>
        public void Response(string validationNumber, VoucherType voucherType, bool success, VoucherRedemptionInfo voucherRedemptionInfo)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<VoucherRedemptionResponseSend>();
            var content = (VoucherRedemptionResponseSend)request.Message.Item;
            content.ValidationNumber = validationNumber;
            content.VoucherType = voucherType;
            content.Success = success;
            content.VoucherRedemptionInfo = voucherRedemptionInfo;

            var reply = SendMessageAndGetReply<VoucherRedemptionResponseReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void VoucherReviewResponse(string validationNumber, VoucherType voucherType, bool success, VoucherRedemptionInfo voucherRedemptionInfo, string message)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<VoucherReviewResponseSend>();
            var content = (VoucherReviewResponseSend)request.Message.Item;
            content.ValidationNumber = validationNumber;
            content.VoucherType = voucherType;
            content.Success = success;
            content.VoucherRedemptionInfo = voucherRedemptionInfo;
            content.Message = message;

            var reply = SendMessageAndGetReply<VoucherReviewResponseReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the AbortVoucherRedemptionSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleAbortVoucherRedemption(AbortVoucherRedemptionSend message)
        {
            var errorMessage = callbackHandler.ProcessAbortVoucherRedemption(message.ValidationNumber, message.VoucherType);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<AbortVoucherRedemptionReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the VoucherRedemptionRequestSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleRequest(VoucherRedemptionRequestSend message)
        {
            bool callbackResult;
            var errorMessage = callbackHandler.ProcessRequest(message.ValidationNumber, message.VoucherType, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<VoucherRedemptionRequestReply>(errorCode, errorMessage);
            var reply = (VoucherRedemptionRequestReply)replyMessage.Message.Item;
            reply.Content.RequestHandled = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the VoucherReviewRequestSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleVoucherReviewRequest(VoucherReviewRequestSend message)
        {
            bool callbackResult;
            var errorMessage = callbackHandler.ProcessVoucherReviewRequest(message.ValidationNumber, message.VoucherType, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<VoucherReviewRequestReply>(errorCode, errorMessage);
            var reply = (VoucherReviewRequestReply)replyMessage.Message.Item;
            reply.Content.RequestHandled = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

