//-----------------------------------------------------------------------
// <copyright file = "ThemeControlCategory.cs" company = "IGT">
//     Copyright (c) 2023 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.ThemeControl;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="ThemeControl"/> category.
    /// Theme control category of messages.
    /// Category: 1006; Major Version: 1
    /// </summary>
    public class ThemeControlCategory : F2XTransactionalCategoryBase<ThemeControl>, IThemeControlCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the ThemeControlCategory callbacks.
        /// </summary>
        private readonly IThemeControlCategoryCallbacks callbackHandler;

        private const string MethodGetPayvarInfo = "GetPayvarInfo";

        /// <summary>
        /// A look-up table for the methods that are NOT available in all supported versions.
        /// Keyed by the method name, the value is the version where the method becomes available.
        /// </summary>
        private readonly Dictionary<string, Version> methodSupportingVersions = new Dictionary<string, Version>
        {
            { MethodGetPayvarInfo, new Version(1, 1) }
        };

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ThemeControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ThemeControlCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ThemeControlCategory(IF2XTransport transport, IThemeControlCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<ThemeSwitchCancelledSend>(HandleThemeSwitchCancelled);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ThemeControl;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by ThemeControlCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region IThemeControlCategory Members

        /// <inheritdoc/>
        public IEnumerable<PayvarInformation> GetPayvarInfo(IEnumerable<uint> denom)
        {
            if(IsMethodSupported(MethodGetPayvarInfo))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetPayvarInfoSend>();
                var content = (GetPayvarInfoSend)request.Message.Item;
                content.Denom = denom.ToList();

                var reply = SendMessageAndGetReply<GetPayvarInfoReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content;
            }

            return default(IEnumerable<PayvarInformation>);
        }

        /// <inheritdoc/>
        public IEnumerable<ThemeInformation> GetSelectableThemes(ThemeFilter filter)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetSelectableThemesSend>();
            var content = (GetSelectableThemesSend)request.Message.Item;
            content.Filter = filter;

            var reply = SendMessageAndGetReply<GetSelectableThemesReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public void ThemeSwitchRequest(ThemeSelector themeSelector, ThemeSwitchBehavior themeSwitchBehavior)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<ThemeSwitchRequestSend>();
            var content = (ThemeSwitchRequestSend)request.Message.Item;
            content.ThemeSelector = themeSelector;
            content.ThemeSwitchBehavior = themeSwitchBehavior;

            var reply = SendMessageAndGetReply<ThemeSwitchRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ThemeSwitchCancelledSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleThemeSwitchCancelled(ThemeSwitchCancelledSend message)
        {
            var errorMessage = callbackHandler.ProcessThemeSwitchCancelled();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ThemeSwitchCancelledReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Checks if a method is supported by the effective version of the category.
        /// </summary>
        /// <param name="methodName">
        /// The name of the method to check.
        /// </param>
        /// <returns>
        /// True if the method is supported. False otherwise.
        /// </returns>
        private bool IsMethodSupported(string methodName)
        {
            // Methods not in the dictionary are available in all versions.
            var result = true;

            if(methodSupportingVersions.ContainsKey(methodName))
            {
                result = effectiveVersion >= methodSupportingVersions[methodName];
            }

            return result;
        }

        #endregion

    }

}

