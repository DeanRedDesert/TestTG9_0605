//-----------------------------------------------------------------------
// <copyright file = "GameReserveCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.GameReserve;

    /// <summary>
    /// Implementation of the F2X <see cref="GameReserve"/> category.
    /// Game Reserve category of messages for getting Reserve configuration info, and for clients to post when they are
    /// in a Reserve State. While a client is in a Reserve state all user input should be ignored, unless it has the
    /// ability to cancel Reserve. It is expected of the client to not send any state change requests while in a
    /// Reserve state. As a fallback, the Foundation will also deny any state change requests made by a client that is
    /// in a reserve state. If the Game or Foundation does any form of state change that causes reserve to be canceled,
    /// then its the responsibility of the state changer to cancel Reserve.
    /// Category: 1036; Major Version: 1
    /// </summary>
    public class GameReserveCategory : F2XTransactionalCategoryBase<GameReserve>, IGameReserveCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the GameReserveCategory callbacks.
        /// </summary>
        private readonly IGameReserveCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameReserveCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// GameReserveCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public GameReserveCategory(IF2XTransport transport, IGameReserveCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<ReserveActivationCanceledSend>(HandleReserveActivationCanceled);
            AddMessagehandler<UpdateReserveParametersSend>(HandleUpdateReserveParameters);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.GameReserve;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IGameReserveCategory Members

        /// <inheritdoc/>
        public ReserveParameters GetReserveParameters()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetReserveParametersSend>();

            var reply = SendMessageAndGetReply<GetReserveParametersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ReserveParameters;
        }

        /// <inheritdoc/>
        public bool RequestReserveActivation(bool reserveActive)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<RequestReserveActivationSend>();
            var content = (RequestReserveActivationSend)request.Message.Item;
            content.ReserveActive = reserveActive;

            var reply = SendMessageAndGetReply<RequestReserveActivationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.RequestAccepted;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ReserveActivationCanceledSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleReserveActivationCanceled(ReserveActivationCanceledSend message)
        {
            var errorMessage = callbackHandler.ProcessReserveActivationCanceled();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ReserveActivationCanceledReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the UpdateReserveParametersSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleUpdateReserveParameters(UpdateReserveParametersSend message)
        {
            var errorMessage = callbackHandler.ProcessUpdateReserveParameters(message.ReserveParameters);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<UpdateReserveParametersReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        #endregion

    }

}

