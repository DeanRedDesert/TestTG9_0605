//-----------------------------------------------------------------------
// <copyright file = "GameCyclePlayCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.GameCyclePlay;

    /// <summary>
    /// Implementation of the F2X <see cref="GameCyclePlay"/> category.
    /// GameCyclePlay category of messages, containing messages for controlling the game cycle of a coplayer.
    /// Category: 1020; Major Version: 1
    /// </summary>
    public class GameCyclePlayCategory : F2XTransactionalCategoryBase<GameCyclePlay>, IGameCyclePlayCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the GameCyclePlayCategory callbacks.
        /// </summary>
        private readonly IGameCyclePlayCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameCyclePlayCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// GameCyclePlayCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public GameCyclePlayCategory(IF2XTransport transport, IGameCyclePlayCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<AbortCompleteSend>(HandleAbortComplete);
            AddMessagehandler<AwardResultsPostedSend>(HandleAwardResultsPosted);
            AddMessagehandler<EnrollResponseSend>(HandleEnrollResponse);
            AddMessagehandler<EvalOutcomeResponseSend>(HandleEvalOutcomeResponse);
            AddMessagehandler<FinalizeAwardResponseSend>(HandleFinalizeAwardResponse);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.GameCyclePlay;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IGameCyclePlayCategory Members

        /// <inheritdoc/>
        public bool AbortGameCycle()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<AbortGameCycleSend>();

            var reply = SendMessageAndGetReply<AbortGameCycleReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Accepted;
        }

        /// <inheritdoc/>
        public bool CommitGameCycle()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<CommitGameCycleSend>();

            var reply = SendMessageAndGetReply<CommitGameCycleReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.CommitSuccessful;
        }

        /// <inheritdoc/>
        public void EndGameCycle(uint numberOfSteps)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<EndGameCycleSend>();
            var content = (EndGameCycleSend)request.Message.Item;
            content.NumberOfSteps = numberOfSteps;

            var reply = SendMessageAndGetReply<EndGameCycleReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void EnrollGameCycle(byte[] hostEnrollmentData)
        {
            var request = CreateTransactionalRequest<EnrollGameCycleSend>();
            var content = (EnrollGameCycleSend)request.Message.Item;
            content.HostEnrollmentData = hostEnrollmentData;

            var reply = SendMessageAndGetReply<EnrollGameCycleReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public EnrollResponseDataReplyContent EnrollResponseData()
        {
            var request = CreateTransactionalRequest<EnrollResponseDataSend>();

            var reply = SendMessageAndGetReply<EnrollResponseDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public void EvalOutcomeRequest(OutcomeList outcomeList, bool lastOutcome, EvalOutcomeRequestSendWagerCatOutcomes wagerCatOutcomes)
        {
            var request = CreateTransactionalRequest<EvalOutcomeRequestSend>();
            var content = (EvalOutcomeRequestSend)request.Message.Item;
            content.OutcomeList = outcomeList;
            content.LastOutcome = lastOutcome;
            content.WagerCatOutcomes = wagerCatOutcomes;

            var reply = SendMessageAndGetReply<EvalOutcomeRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public EvalOutcomeResponseDataReplyContent EvalOutcomeResponseData()
        {
            var request = CreateTransactionalRequest<EvalOutcomeResponseDataSend>();

            var reply = SendMessageAndGetReply<EvalOutcomeResponseDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public void FinalizeAwardRequest()
        {
            var request = CreateTransactionalRequest<FinalizeAwardRequestSend>();

            var reply = SendMessageAndGetReply<FinalizeAwardRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public GameCycleState QueryGameCycleState()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryGameCycleStateSend>();

            var reply = SendMessageAndGetReply<QueryGameCycleStateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.CurrentGameCycleState;
        }

        /// <inheritdoc/>
        public void StartPlaying()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<StartPlayingSend>();

            var reply = SendMessageAndGetReply<StartPlayingReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void UncommitGameCycle()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<UncommitGameCycleSend>();

            var reply = SendMessageAndGetReply<UncommitGameCycleReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void UnenrollGameCycle()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<UnenrollGameCycleSend>();

            var reply = SendMessageAndGetReply<UnenrollGameCycleReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the AbortCompleteSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleAbortComplete(AbortCompleteSend message)
        {
            var errorMessage = callbackHandler.ProcessAbortComplete();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<AbortCompleteReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the AwardResultsPostedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleAwardResultsPosted(AwardResultsPostedSend message)
        {
            var errorMessage = callbackHandler.ProcessAwardResultsPosted(message.AmountWon);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<AwardResultsPostedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the EnrollResponseSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleEnrollResponse(EnrollResponseSend message)
        {
            var errorMessage = callbackHandler.ProcessEnrollResponse(message.Success);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<EnrollResponseReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the EvalOutcomeResponseSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleEvalOutcomeResponse(EvalOutcomeResponseSend message)
        {
            var errorMessage = callbackHandler.ProcessEvalOutcomeResponse(message.IsLastOutcome);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<EvalOutcomeResponseReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the FinalizeAwardResponseSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleFinalizeAwardResponse(FinalizeAwardResponseSend message)
        {
            var errorMessage = callbackHandler.ProcessFinalizeAwardResponse();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<FinalizeAwardResponseReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        #endregion

    }

}

