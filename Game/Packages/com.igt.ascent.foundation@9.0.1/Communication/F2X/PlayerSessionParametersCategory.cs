//-----------------------------------------------------------------------
// <copyright file = "PlayerSessionParametersCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.PlayerSessionParameters;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="PlayerSessionParameters"/> category.
    /// PlayerSessionParameters category of messages.  Category: 124  Version: 1. Provides information and events to
    /// handle and syncronize the reseting of specific Player Session Parameters.
    /// </summary>
    public class PlayerSessionParametersCategory : F2XTransactionalCategoryBase<PlayerSessionParameters>, IPlayerSessionParametersCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the PlayerSessionParametersCategory callbacks.
        /// </summary>
        private readonly IPlayerSessionParametersCategoryCallbacks callbackHandler;

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="PlayerSessionParametersCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// PlayerSessionParametersCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public PlayerSessionParametersCategory(IF2XTransport transport, IPlayerSessionParametersCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<CurrentResetParametersChangedSend>(HandleCurrentResetParametersChanged);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.PlayerSessionParameters;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by PlayerSessionParametersCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region IPlayerSessionParametersCategory Members

        /// <inheritdoc/>
        public bool GetConfigDataPlayerSessionParameterResetEnabled()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataPlayerSessionParameterResetEnabledSend>();

            var reply = SendMessageAndGetReply<GetConfigDataPlayerSessionParameterResetEnabledReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ParameterResetEnabled;
        }

        /// <inheritdoc/>
        public void ParametersReset(IEnumerable<SessionParameterType> resetParameters)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<ParametersResetSend>();
            var content = (ParametersResetSend)request.Message.Item;
            content.ResetParameters = resetParameters.ToList();

            var reply = SendMessageAndGetReply<ParametersResetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public IEnumerable<SessionParameterType> QueryCurrentResetParameters()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryCurrentResetParametersSend>();

            var reply = SendMessageAndGetReply<QueryCurrentResetParametersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.PendingParameters;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the CurrentResetParametersChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleCurrentResetParametersChanged(CurrentResetParametersChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessCurrentResetParametersChanged(message.PendingParameters, message.ResetParameters);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<CurrentResetParametersChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

