//-----------------------------------------------------------------------
// <copyright file = "LinkControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual editing when merging.
// All changes are marked with "MANUAL EDIT:"
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.LinkControl;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="LinkControl"/> category.
    /// Link control category of messages.  Category: 102  Version: 1
    /// </summary>
    public class LinkControlCategory : F2XCategoryBase<LinkControl>, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the LinkControlCategory callbacks.
        /// </summary>
        private readonly ILinkControlCategoryCallbacks callbackHandler;

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1),
            new Version(1, 2)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="LinkControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// LinkControlCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public LinkControlCategory(IF2XTransport transport, ILinkControlCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<GetApiVersionsSend>(HandleGetApiVersions);
            AddMessagehandler<ParkSend>(HandlePark);
            AddMessagehandler<SetApiVersionsSend>(HandleSetApiVersions);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        // MANUAL EDIT: Convert Link Control to F2X type.
        public override MessageCategory Category => MessageCategory.F2XLinkControl;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by LinkControlCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the GetApiVersionsSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGetApiVersions(GetApiVersionsSend message)
        {
            GetApiVersionsReplyContentCategoryVersions callbackResult;
            var errorMessage = callbackHandler.ProcessGetApiVersions(message.Jurisdiction, message.ConnectToken, message.DiscoveryContexts, message.ExtensionImports, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<GetApiVersionsReply>(errorCode, errorMessage);
            var reply = (GetApiVersionsReply)replyMessage.Message.Item;
            reply.Content.CategoryVersions = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the ParkSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandlePark(ParkSend message)
        {
            var errorMessage = callbackHandler.ProcessPark();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ParkReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the SetApiVersionsSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleSetApiVersions(SetApiVersionsSend message)
        {
            bool callbackResult;
            var errorMessage = callbackHandler.ProcessSetApiVersions(message.CategoryVersions, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<SetApiVersionsReply>(errorCode, errorMessage);
            var reply = (SetApiVersionsReply)replyMessage.Message.Item;
            reply.Content.CategoriesAccepted = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

