//-----------------------------------------------------------------------
// <copyright file = "IExtensionProgressiveControllerLinkingCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.ExtensionProgressiveControllerLinking;
    using Schemas.Internal.Types;

    /// <summary>
    /// Category for supporting Extension Progressive Controllers, by providing a means for the extension to link
    /// controller and game levels.
    /// This category can only affect EPCs (Extension Progressive Controllers) owned by this executable extension.
    /// Category: 3025; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IExtensionProgressiveControllerLinkingCategory
    {
        /// <summary>
        /// Add additional progressive links to EPCs (Extension Progressive Controllers) owned by this executable
        /// extension.
        /// Links can only be added for game level that have a 'NotConfigured' GameLevelStatus.
        /// A successfully added link will cause the GameLevelStatus to change.
        /// A (payvar, game level, denom) can only be linked to a single controller level.
        /// Call will throw exceptions if:
        /// - The GameLevelStatus of a given GameLevelSelector is anything but 'NotConfigured'
        /// - ControllerLevelSelector(s) or GameLevelSelector(s) are invalid.
        /// - ControllerLevelSelector(s) point to a controller not owned by this executable extension.
        /// </summary>
        /// <param name="progressiveLinks">
        /// List of Progressive Links
        /// </param>
        void AddProgressiveLinks(IEnumerable<ProgressiveLink> progressiveLinks);

        /// <summary>
        /// Query game levels associated with a specific payvar.
        /// Call will throw an exception if the payvar identifier is not valid.
        /// </summary>
        /// <param name="payvarId">
        /// Payvar identifier to query game levels for.
        /// </param>
        /// <returns>
        /// The content of the QueryGameLevelDefinitionsReply message.
        /// </returns>
        IEnumerable<GameLevelSettings> QueryGameLevelDefinitions(PayvarIdentifier payvarId);

        /// <summary>
        /// Query progressive links associated with a specific controller id.
        /// Call will throw an exception if the controller id is not valid or not owned by this executable extension.
        /// Valid controllers can be determined using the ExtensionProgressiveControllerConfig's QueryControllers
        /// method.
        /// </summary>
        /// <param name="controllerId">
        /// Identifier of the controller to query progressive links for.
        /// </param>
        /// <returns>
        /// The content of the QueryProgressiveLinksReply message.
        /// </returns>
        IEnumerable<ControllerProgressiveLink> QueryProgressiveLinks(string controllerId);

        /// <summary>
        /// Remove existing progressive links to EPCs (Extension Progressive Controllers) owned by this executable
        /// extension.
        /// Call will throw exceptions if:
        /// - No matching ProgressiveLink exists.
        /// - Progressive Link was marked as Immutable.
        /// </summary>
        /// <param name="progressiveLinks">
        /// List of Progressive Links
        /// </param>
        void RemoveProgressiveLinks(IEnumerable<ProgressiveLink> progressiveLinks);

    }

}

