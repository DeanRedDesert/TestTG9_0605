//-----------------------------------------------------------------------
// <copyright file = "IVoucherRedemptionCategory.cs" company = "IGT">
//     Copyright (c) 2021 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.VoucherRedemption;

    /// <summary>
    /// The F2X VoucherRedemption category of messages, which provides APIs for communication between foundation and
    /// extension client in terms of voucher redemption process.
    /// A complete Voucher Redemption Process consists of two steps in a row, let say: voucher review step and voucher
    /// redemption step, as defined as follows:
    /// - Voucher review step: The host shall be responsible for reviewing the voucher and if accepted, it means that
    /// this voucher contains an amount, and then the host shall respond with the voucher amounts and indicate the
    /// voucher type (subtype of ticket)
    /// - Voucher redemption step: The host shall be responsible for redeeming the voucher, if it contains an amount,
    /// and transferring the voucher amounts back to the Ascent local bank
    /// Category: 150; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IVoucherRedemptionCategory
    {
        /// <summary>
        /// Allows the client to set the list of registrations on voucher redemption process and ticket type.
        /// To avoid the race condition of multiple extension clients being involved in the specific Voucher Redemption
        /// Process
        /// at the same time, a system extension that supports the voucher redemption shall register all the voucher
        /// redemption processes
        /// and ticket types at activation of system context. Therefore, this message may **ONLY** be sent during
        /// ActivateSystemContext.
        /// All the registered voucher redemption processes will be automatically unregistered at
        /// InactivateSystemContext.
        /// </summary>
        /// <param name="voucherRedemptionRegistrations">
        /// List of Voucher Redemption Registrations that the client registers for.
        /// NOTE: The VoucherType of each voucher redemption registration MUST be unique in the list of voucher
        /// redemption registrations!
        /// </param>
        /// <returns>
        /// The content of the SetVoucherRedemptionRegistrationsReply message.
        /// </returns>
        IEnumerable<VoucherType> SetVoucherRedemptionRegistrations(IEnumerable<VoucherRedemptionRegistrationType> voucherRedemptionRegistrations);

        /// <summary>
        /// Response to the foundation for the voucher redemption request.
        /// </summary>
        /// <param name="validationNumber">
        /// The validation number, also known as barcode, on the voucher.
        /// </param>
        /// <param name="voucherType">
        /// Also known as ticket type, e.g. TITO, Sports, etc.
        /// </param>
        /// <param name="success">
        /// Boolean flag indicating if the voucher was redeemed.
        /// </param>
        /// <param name="voucherRedemptionInfo">
        /// Voucher redemption information about the voucher; optional if success is false.
        /// </param>
        void Response(string validationNumber, VoucherType voucherType, bool success, VoucherRedemptionInfo voucherRedemptionInfo);

        /// <summary>
        /// Response to the foundation for the voucher review request.
        /// </summary>
        /// <param name="validationNumber">
        /// The validation number, also known as barcode, on the voucher.
        /// </param>
        /// <param name="voucherType">
        /// Also known as ticket type, e.g. TITO, Sports, etc.
        /// </param>
        /// <param name="success">
        /// Boolean flag indicating if the voucher is valid with money. If true, the voucher redemption information was
        /// provided.
        /// </param>
        /// <param name="voucherRedemptionInfo">
        /// Voucher redemption information about the voucher; optional if success is false.
        /// </param>
        /// <param name="message">
        /// Message indicating why the voucher is invalid with no money; optional if success is true.
        /// </param>
        void VoucherReviewResponse(string validationNumber, VoucherType voucherType, bool success, VoucherRedemptionInfo voucherRedemptionInfo, string message);

    }

}

