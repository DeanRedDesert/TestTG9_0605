//-----------------------------------------------------------------------
// <copyright file = "ICdsEcpCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.CdsEcp;

    /// <summary>
    /// CdsEcp category of messages.  Supports (HHR Exacta) Ecp.
    /// Category: 1037; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ICdsEcpCategory
    {
        /// <summary>
        /// Message notifying the Foundation that the host outcome/enrollment information did not match the theme/EGM
        /// evaluated award information.
        /// </summary>
        /// <param name="logMessage">
        /// Log message detailing the specifics of the mismatch.  This string is for logging purposes and is NOT
        /// displayed to the player or in tilt messages.
        /// </param>
        void AwardMismatchDetected(string logMessage);

        /// <summary>
        /// Message requesting the current offerable configuration.
        /// </summary>
        /// <returns>
        /// The content of a successful message.
        /// </returns>
        GetConfigDataCdsGameConfigReplyContent GetConfigDataCdsGameConfig();

        /// <summary>
        /// Message retrieving the enrollment response data from the last successful response.
        /// </summary>
        /// <returns>
        /// The content of a successful message.
        /// </returns>
        GetEnrollmentResponseDataReplyContentEnrollmentResponse GetEnrollmentResponseData();

        /// <summary>
        /// Message notifying the Foundation of games current bet and why it's being sent.
        /// </summary>
        /// <param name="betData">
        /// The current bet of the game and why it's being sent.
        /// </param>
        /// <returns>
        /// True if game should initiate game play; false if not.
        /// </returns>
        bool SetBetData(BetData betData);

        /// <summary>
        /// Message that provides the enrollment specifics to be used for the next enrollment request. Should be sent
        /// after the game has committed bets, but before enrolling the game.
        /// </summary>
        /// <param name="betConfig">
        /// Contains the information for an offerable bet.
        /// </param>
        void SetEnrollmentRequestData(BetConfig betConfig);

    }

}

