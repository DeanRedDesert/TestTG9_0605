//-----------------------------------------------------------------------
// <copyright file = "IGameCyclePlayCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.GameCyclePlay;
    using Schemas.Internal.Types;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="GameCyclePlay"/> category.
    /// GameCyclePlay category of messages, containing messages for controlling the game cycle of a coplayer.
    /// Category: 1020; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IGameCyclePlayCategoryCallbacks
    {
        /// <summary>
        /// Message to notify the client that the Foundation has finished processing the abort request. Transitions the
        /// GameCycleState from AbortPending to Finalized.
        /// </summary>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessAbortComplete();

        /// <summary>
        /// Message notifying that the game award results have been posted to the credit meter.
        /// </summary>
        /// <param name="amountWon">
        /// Amount of money won.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessAwardResultsPosted(Amount amountWon);

        /// <summary>
        /// Message notifying the client that enrollment results are available.  Transitions the GameCycleState from
        /// EnrollPending to EnrollComplete.
        /// </summary>
        /// <param name="success">
        /// Indicating host enrollment success/failure.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessEnrollResponse(bool success);

        /// <summary>
        /// Notify the game-client that the OutcomeList has been evaluated and (potentially) adjusted. Transitions the
        /// GameCycleState from EvaluatePending to Playing (if not the last outcome) OR from EvaluatePending to
        /// MainPlayComplete (if last outcome).
        /// </summary>
        /// <param name="isLastOutcome">
        /// Indicates if this was the last outcome or not, which determines if the foundation state was progressed to
        /// Playing or MainPlayComplete.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessEvalOutcomeResponse(bool isLastOutcome);

        /// <summary>
        /// Message to notify the client that the Foundation has finalized (metered, posted, and logged) the outcome.
        /// Transitions the GameCycleState from FinalizePending to Finalized.
        /// </summary>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessFinalizeAwardResponse();

    }

}

