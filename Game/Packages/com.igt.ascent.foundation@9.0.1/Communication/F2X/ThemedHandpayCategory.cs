//-----------------------------------------------------------------------
// <copyright file = "ThemedHandpayCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.ThemedHandpay;

    /// <summary>
    /// Implementation of the F2X <see cref="ThemedHandpay"/> category.
    /// Themed handpay category of messages.  Category: 118  Version: 1
    /// </summary>
    public class ThemedHandpayCategory : F2XTransactionalCategoryBase<ThemedHandpay>, IThemedHandpayCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the ThemedHandpayCategory callbacks.
        /// </summary>
        private readonly IThemedHandpayCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ThemedHandpayCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ThemedHandpayCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ThemedHandpayCategory(IF2XTransport transport, IThemedHandpayCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<HandpayLockupStatusChangedSend>(HandleHandpayLockupStatusChanged);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ThemedHandpay;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IThemedHandpayCategory Members

        /// <inheritdoc/>
        public bool QueryHandpayLockupStatus()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QueryHandpayLockupStatusSend>();

            var reply = SendMessageAndGetReply<QueryHandpayLockupStatusReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.isLocked;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the HandpayLockupStatusChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleHandpayLockupStatusChanged(HandpayLockupStatusChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessHandpayLockupStatusChanged(message.isLocked);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<HandpayLockupStatusChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

