//-----------------------------------------------------------------------
// <copyright file = "ReportGameDataInspectionCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.ReportGameDataInspection;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="ReportGameDataInspection"/> category.
    /// Report Game Data Inspection category of messages. This category is used to request game specific report data.
    /// The data is used by the Foundation to generate reports with a standardized layout, such as the one required by
    /// Macau.
    /// Category: 4001; Major Version: 1
    /// </summary>
    public class ReportGameDataInspectionCategory : F2XCategoryBase<ReportGameDataInspection>, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the ReportGameDataInspectionCategory callbacks.
        /// </summary>
        private readonly IReportGameDataInspectionCategoryCallbacks callbackHandler;

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1),
            new Version(1, 2),
            new Version(1, 3)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ReportGameDataInspectionCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ReportGameDataInspectionCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ReportGameDataInspectionCategory(IF2XTransport transport, IReportGameDataInspectionCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<GetHtmlInspectionReportSend>(HandleGetHtmlInspectionReport);
            AddMessagehandler<GetInspectionReportSend>(HandleGetInspectionReport);
            AddMessagehandler<GetInspectionReportTypeSend>(HandleGetInspectionReportType);
            AddMessagehandler<GetMinimumPlayableCreditBalanceSend>(HandleGetMinimumPlayableCreditBalance);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ReportGameDataInspection;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by ReportGameDataInspectionCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the GetHtmlInspectionReportSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGetHtmlInspectionReport(GetHtmlInspectionReportSend message)
        {
            GetHtmlInspectionReportReplyContent callbackResult;
            var errorMessage = callbackHandler.ProcessGetHtmlInspectionReport(message.Culture, message.ThemeInfoList, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<GetHtmlInspectionReportReply>(errorCode, errorMessage);
            var reply = (GetHtmlInspectionReportReply)replyMessage.Message.Item;
            reply.Content = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the GetInspectionReportSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGetInspectionReport(GetInspectionReportSend message)
        {
            GetInspectionReportReplyContent callbackResult;
            var errorMessage = callbackHandler.ProcessGetInspectionReport(message.Culture, message.Theme, message.Payvar, message.Denomination, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<GetInspectionReportReply>(errorCode, errorMessage);
            var reply = (GetInspectionReportReply)replyMessage.Message.Item;
            reply.Content = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the GetInspectionReportTypeSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGetInspectionReportType(GetInspectionReportTypeSend message)
        {
            InspectionReportType callbackResult;
            var errorMessage = callbackHandler.ProcessGetInspectionReportType(out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<GetInspectionReportTypeReply>(errorCode, errorMessage);
            var reply = (GetInspectionReportTypeReply)replyMessage.Message.Item;
            reply.Content.InspectionReportType = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the GetMinimumPlayableCreditBalanceSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGetMinimumPlayableCreditBalance(GetMinimumPlayableCreditBalanceSend message)
        {
            MinimumPlayableCreditBalanceResponseList callbackResult;
            var errorMessage = callbackHandler.ProcessGetMinimumPlayableCreditBalance(message.MinimumPlayableCreditBalanceRequestList, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<GetMinimumPlayableCreditBalanceReply>(errorCode, errorMessage);
            var reply = (GetMinimumPlayableCreditBalanceReply)replyMessage.Message.Item;
            reply.Content.MinimumPlayableCreditBalanceResponseList = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

