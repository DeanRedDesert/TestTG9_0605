//-----------------------------------------------------------------------
// <copyright file = "ICdsIcdCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.CdsIcd;

    /// <summary>
    /// CdsIcd category of messages.  Supports (New York Lottery) ICD.
    /// Category: 1007; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ICdsIcdCategory
    {
        /// <summary>
        /// Message from the bin to the Foundation notifying the Foundation that the host outcome/enrollment information
        /// did not match the theme/EGM evaluated award information.
        /// </summary>
        /// <param name="logMessage">
        /// Log message detailing the specifics of the mismatch.  This string is for logging purposes and is NOT
        /// displayed to the player or in tilt messages.
        /// </param>
        void AwardMismatchDetected(string logMessage);

        /// <summary>
        /// Message from the bin to the Foundation requesting the current CDS configuration regarding offerable betting
        /// and top awards.
        /// </summary>
        /// <returns>
        /// The content of a successful message, includes the game configuration data.
        /// </returns>
        GetConfigDataCdsGameConfigReplyContent GetConfigDataCdsGameConfig();

        /// <summary>
        /// Message from the bin to the Foundation retrieving the enrollment response data from the last successful
        /// response.
        /// </summary>
        /// <returns>
        /// The content of a successful message.
        /// </returns>
        GetEnrollmentResponseDataReplyContentEnrollmentResponse GetEnrollmentResponseData();

        /// <summary>
        /// Message from the bin to Foundation that provides the enrollment specifics to be used for the next enrollment
        /// request. Should be sent after the game has committed bets, but before enrolling the game.
        /// </summary>
        /// <param name="betConfig">
        /// Contains the attributes for an offerable bet.
        /// </param>
        void SetEnrollmentRequestData(BetConfig betConfig);

        /// <summary>
        /// Message from the bin to the Foundation that the game uses to inform the Foundation of what progressive
        /// levels will be hit in the current game cycle. This message should only be sent if a progressive award will
        /// be hit in the current game cycle. This message should only be used after the GetEnrollmentResponseDataReply
        /// has been received by the game, but before entering the PLAYING state. The index for the progressive levels
        /// is 0 based.
        /// </summary>
        /// <param name="hitProgressiveLevels">
        /// The levels of any progressives that have been hit in an ongoing game cycle. The index for the progressive
        /// levels is 0 based.
        /// </param>
        void SetProgressiveLookupData(IEnumerable<ushort> hitProgressiveLevels);

    }

}

