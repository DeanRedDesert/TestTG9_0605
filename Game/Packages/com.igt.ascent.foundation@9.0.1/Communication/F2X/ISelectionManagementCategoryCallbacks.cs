//-----------------------------------------------------------------------
// <copyright file = "ISelectionManagementCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.SelectionManagement;
    using Schemas.Internal.Types;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="SelectionManagement"/> category.
    /// Selection Management category of messages.
    /// Category: 2002; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ISelectionManagementCategoryCallbacks
    {
        /// <summary>
        /// Message to the client requesting it display a specified app configuration.
        /// </summary>
        /// <param name="theme">
        /// Default theme. Should not be set if Shell is set.
        /// </param>
        /// <param name="shell">
        /// Default shell. Should not be set if Theme is set.
        /// </param>
        /// <param name="denom">
        /// The requested denom to select.
        /// </param>
        /// <param name="required">
        /// Flag indicating the requested configuration must be displayed before reply.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessAppRequested(ThemeIdentifier theme, ShellIdentifier shell, uint denom, bool required);

        /// <summary>
        /// Sent when the selected app changes state.
        /// </summary>
        /// <param name="state">
        /// State of the selected app.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessAppStateChanged(AppState state);

        /// <summary>
        /// Notification from the foundation when the available apps have changed.
        /// </summary>
        /// <param name="themes">
        /// All available themes.
        /// </param>
        /// <param name="shells">
        /// All available shells.
        /// </param>
        /// <param name="coThemes">
        /// All available co-themes.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessAvailableAppsChanged(IEnumerable<ThemeInfo> themes, IEnumerable<ShellInfo> shells, IEnumerable<CoThemeInfo> coThemes);

        /// <summary>
        /// Indicates the Chooser has been requested.
        /// </summary>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessChooserRequested();

        /// <summary>
        /// Message to the client indicating the context's display state has changed.
        /// </summary>
        /// <param name="displayState">
        /// The Display Control state the user context should be set to.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessDisplayStateChanged(DisplayState displayState);

    }

}

