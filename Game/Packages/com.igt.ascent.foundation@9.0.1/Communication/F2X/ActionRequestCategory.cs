//-----------------------------------------------------------------------
// <copyright file = "ActionRequestCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.ActionRequest;

    /// <summary>
    /// Implementation of the F2X <see cref="ActionRequest"/> category.
    /// Action Request category of messages.  Category: 104  Version: 1
    /// </summary>
    public class ActionRequestCategory : F2XCategoryBase<ActionRequest>, IActionRequestCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the ActionRequestCategory callbacks.
        /// </summary>
        private readonly IActionRequestCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ActionRequestCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ActionRequestCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ActionRequestCategory(IF2XTransport transport, IActionRequestCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<ActionResponseSend>(HandleActionResponse);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ActionRequest;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IActionRequestCategory Members

        /// <inheritdoc/>
        public void ActionRequest(byte[] payload)
        {
            var request = CreateBasicRequest<ActionRequestSend>();
            var content = (ActionRequestSend)request.Message.Item;
            content.Payload = payload;

            var reply = SendMessageAndGetReply<ActionRequestReply>(Channel.Game, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ActionResponseSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleActionResponse(ActionResponseSend message)
        {
            var errorMessage = callbackHandler.ProcessActionResponse(message.Payload);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ActionResponseReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

