//-----------------------------------------------------------------------
// <copyright file = "IKeyValueStoreCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.KVSTypes;

    /// <summary>
    /// KeyValueStore supports all KeyValueStoreMethod implementations.
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IKeyValueStoreCategory
    {
        /// <summary>
        /// Implementation of read method for reading multiple critical data items in a KeyValueStore. **KeyValueStore
        /// access validation is enforced by the Foundation.**
        /// </summary>
        /// <param name="key">
        /// Identifies a list of the names of critical data to read.
        /// </param>
        /// <returns>
        /// The content of the ReadReply message.
        /// </returns>
        IEnumerable<ReadReplyContentItem> Read(IEnumerable<string> key);

        /// <summary>
        /// Implementation of write method for removing multiple critical data items in a KeyValueStore. **KeyValueStore
        /// access validation is enforced by the Foundation.**
        /// </summary>
        /// <param name="key">
        /// Identifies a list of the names of critical data to remove.
        /// </param>
        void Remove(IEnumerable<string> key);

        /// <summary>
        /// Implementation of write method for writing multiple critical data items in a KeyValueStore. **KeyValueStore
        /// access validation is enforced by the Foundation.**
        /// </summary>
        /// <param name="item">
        /// Identifies a list of the critical data items to write. / Identifies the name of critical data to write. /
        /// Binary data to write for this item.
        /// </param>
        void Write(IEnumerable<WriteSendItem> item);

    }

}

