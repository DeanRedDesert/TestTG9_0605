//-----------------------------------------------------------------------
// <copyright file = "EgmConfigDataCategory.cs" company = "IGT">
//     Copyright (c) 2022 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual editing when merging.
// All changes are marked with "MANUAL EDIT:"
//-----------------------------------------------------------------------
// MANUAL_EDIT:
// 1. Remove GetWinCap() method.
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.EGMConfigData;
    using Schemas.Internal.Types;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="EGMConfigData"/> category.
    /// EGM config data category of messages. This category is used to request information regarding the EGM
    /// configuration.
    /// Category: 110; Major Version: 1
    /// </summary>
    public class EgmConfigDataCategory : F2XTransactionalCategoryBase<EGMConfigData>, IEgmConfigDataCategory, IMultiVersionSupport
    {
        #region Fields

        private const string MethodGetWinCapBehavior = "GetWinCapBehavior";
        private const string MethodGetMarketingBehavior = "GetMarketingBehavior";
        private const string MethodGetConfigDataDefaultBetSelectionStyle = "GetConfigDataDefaultBetSelectionStyle";
        private const string MethodGetConfigDataProgressiveWinCap = "GetConfigDataProgressiveWinCap";
        private const string MethodGetConfigDataTotalWinCap = "GetConfigDataTotalWinCap";
        private const string MethodGetConfigDataDisplayVideoReelsForStepper = "GetConfigDataDisplayVideoReelsForStepper";
        private const string MethodGetConfigDataExternalBonusWinCap = "GetConfigDataExternalBonusWinCap";
        private const string MethodGetConfigDataGameFeatureSingleOptionAutoAdvanceSettings = "GetConfigDataGameFeatureSingleOptionAutoAdvanceSettings";
        private const string MethodGetConfigDataRtpOrderedByBetRequired = "GetConfigDataRtpOrderedByBetRequired";

        /// <summary>
        /// A look-up table for the methods that are NOT available in all supported versions.
        /// Keyed by the method name, the value is the version where the method becomes available.
        /// </summary>
        private readonly Dictionary<string, Version> methodSupportingVersions = new Dictionary<string, Version>
        {
            { MethodGetWinCapBehavior, new Version(1, 1) },
            { MethodGetMarketingBehavior, new Version(1, 2) },
            { MethodGetConfigDataDefaultBetSelectionStyle, new Version(1, 3) },
            { MethodGetConfigDataProgressiveWinCap, new Version(1, 4) },
            { MethodGetConfigDataTotalWinCap, new Version(1, 4) },
            { MethodGetConfigDataDisplayVideoReelsForStepper, new Version(1, 5) },
            { MethodGetConfigDataExternalBonusWinCap, new Version(1, 5) },
            { MethodGetConfigDataGameFeatureSingleOptionAutoAdvanceSettings, new Version(1, 5) },
            { MethodGetConfigDataRtpOrderedByBetRequired, new Version(1, 6) }
        };

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1),
            new Version(1, 2),
            new Version(1, 3),
            new Version(1, 4),
            new Version(1, 5),
            new Version(1, 6)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="EgmConfigDataCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public EgmConfigDataCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.EgmConfigData;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by EgmConfigDataCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region IEgmConfigDataCategory Members

        /// <inheritdoc/>
        public Amount GetAncillaryMonetaryLimit()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetAncillaryMonetaryLimitSend>();

            var reply = SendMessageAndGetReply<GetAncillaryMonetaryLimitReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.AncillaryMonetaryLimit;
        }

        /// <inheritdoc/>
        public DefaultBetSelectionStyle GetConfigDataDefaultBetSelectionStyle()
        {
            if(IsMethodSupported(MethodGetConfigDataDefaultBetSelectionStyle))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetConfigDataDefaultBetSelectionStyleSend>();

                var reply = SendMessageAndGetReply<GetConfigDataDefaultBetSelectionStyleReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.DefaultBetSelectionStyle;
            }

            return default(DefaultBetSelectionStyle);
        }

        /// <inheritdoc/>
        public bool GetConfigDataDisplayVideoReelsForStepper()
        {
            if(IsMethodSupported(MethodGetConfigDataDisplayVideoReelsForStepper))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetConfigDataDisplayVideoReelsForStepperSend>();

                var reply = SendMessageAndGetReply<GetConfigDataDisplayVideoReelsForStepperReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.DisplayVideoReelsForStepper;
            }

            return default(bool);
        }

        /// <inheritdoc/>
        public Amount GetConfigDataExternalBonusWinCap()
        {
            if(IsMethodSupported(MethodGetConfigDataExternalBonusWinCap))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetConfigDataExternalBonusWinCapSend>();

                var reply = SendMessageAndGetReply<GetConfigDataExternalBonusWinCapReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.ExternalBonusWinCap;
            }

            return default(Amount);
        }

        /// <inheritdoc/>
        public GetConfigDataGameFeatureSingleOptionAutoAdvanceSettingsReplyContent GetConfigDataGameFeatureSingleOptionAutoAdvanceSettings()
        {
            if(IsMethodSupported(MethodGetConfigDataGameFeatureSingleOptionAutoAdvanceSettings))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetConfigDataGameFeatureSingleOptionAutoAdvanceSettingsSend>();

                var reply = SendMessageAndGetReply<GetConfigDataGameFeatureSingleOptionAutoAdvanceSettingsReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content;
            }

            return default(GetConfigDataGameFeatureSingleOptionAutoAdvanceSettingsReplyContent);
        }

        /// <inheritdoc/>
        public Amount GetConfigDataProgressiveWinCap()
        {
            if(IsMethodSupported(MethodGetConfigDataProgressiveWinCap))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetConfigDataProgressiveWinCapSend>();

                var reply = SendMessageAndGetReply<GetConfigDataProgressiveWinCapReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.ProgressiveWinCap;
            }

            return default(Amount);
        }

        /// <inheritdoc/>
        public bool GetConfigDataRtpOrderedByBetRequired()
        {
            if(IsMethodSupported(MethodGetConfigDataRtpOrderedByBetRequired))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetConfigDataRtpOrderedByBetRequiredSend>();

                var reply = SendMessageAndGetReply<GetConfigDataRtpOrderedByBetRequiredReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.RtpOrderedByBetRequired;
            }

            return default(bool);
        }

        /// <inheritdoc/>
        public Amount GetConfigDataTotalWinCap()
        {
            if(IsMethodSupported(MethodGetConfigDataTotalWinCap))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetConfigDataTotalWinCapSend>();

                var reply = SendMessageAndGetReply<GetConfigDataTotalWinCapReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.TotalWinCap;
            }

            return default(Amount);
        }

        /// <inheritdoc/>
        public TopScreenGameAdvertisement GetMarketingBehavior()
        {
            if(IsMethodSupported(MethodGetMarketingBehavior))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetMarketingBehaviorSend>();

                var reply = SendMessageAndGetReply<GetMarketingBehaviorReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content.TopScreenGameAdvertisement;
            }

            return default(TopScreenGameAdvertisement);
        }

        /// <inheritdoc/>
        public Amount GetMinimumBet()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetMinimumBetSend>();

            var reply = SendMessageAndGetReply<GetMinimumBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.MinimumBet;
        }

        /// <inheritdoc/>
        public GetWinCapBehaviorReplyContent GetWinCapBehavior()
        {
            if(IsMethodSupported(MethodGetWinCapBehavior))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetWinCapBehaviorSend>();

                var reply = SendMessageAndGetReply<GetWinCapBehaviorReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content;
            }

            return default(GetWinCapBehaviorReplyContent);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Checks if a method is supported by the effective version of the category.
        /// </summary>
        /// <param name="methodName">
        /// The name of the method to check.
        /// </param>
        /// <returns>
        /// True if the method is supported. False otherwise.
        /// </returns>
        private bool IsMethodSupported(string methodName)
        {
            // Methods not in the dictionary are available in all versions.
            var result = true;

            if(methodSupportingVersions.ContainsKey(methodName))
            {
                result = effectiveVersion >= methodSupportingVersions[methodName];
            }

            return result;
        }

        #endregion

    }

}

