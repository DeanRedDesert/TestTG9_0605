//-----------------------------------------------------------------------
// <copyright file = "TournamentSessionControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.TournamentSessionControl;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="TournamentSessionControl"/> category.
    /// Tournament Session category of messages.  Category: 1001  Version: 1
    /// </summary>
    public class TournamentSessionControlCategory : F2XTransactionalCategoryBase<TournamentSessionControl>, ITournamentSessionControlCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the TournamentSessionControlCategory callbacks.
        /// </summary>
        private readonly ITournamentSessionControlCategoryCallbacks callbackHandler;

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="TournamentSessionControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// TournamentSessionControlCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public TournamentSessionControlCategory(IF2XTransport transport, ITournamentSessionControlCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<SessionCompleteSend>(HandleSessionComplete);
            AddMessagehandler<SessionConfigurationChangedSend>(HandleSessionConfigurationChanged);
            AddMessagehandler<SessionResetSend>(HandleSessionReset);
            AddMessagehandler<SessionStartSend>(HandleSessionStart);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.TournamentSessionControl;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by TournamentSessionControlCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region ITournamentSessionControlCategory Members

        /// <inheritdoc/>
        public void FinishSession()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<FinishSessionSend>();

            var reply = SendMessageAndGetReply<FinishSessionReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public SessionInitiator GetConfigDataSessionInitiator()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataSessionInitiatorSend>();

            var reply = SendMessageAndGetReply<GetConfigDataSessionInitiatorReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.SessionInitiator;
        }

        /// <inheritdoc/>
        public QuerySessionInformationReplyContent QuerySessionInformation()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<QuerySessionInformationSend>();

            var reply = SendMessageAndGetReply<QuerySessionInformationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public void ResetSessionRequest()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<ResetSessionRequestSend>();

            var reply = SendMessageAndGetReply<ResetSessionRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void StartSessionRequest()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<StartSessionRequestSend>();

            var reply = SendMessageAndGetReply<StartSessionRequestReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the SessionCompleteSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleSessionComplete(SessionCompleteSend message)
        {
            var errorMessage = callbackHandler.ProcessSessionComplete();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<SessionCompleteReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the SessionConfigurationChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleSessionConfigurationChanged(SessionConfigurationChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessSessionConfigurationChanged(message.Configuration);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<SessionConfigurationChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the SessionResetSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleSessionReset(SessionResetSend message)
        {
            var errorMessage = callbackHandler.ProcessSessionReset();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<SessionResetReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the SessionStartSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleSessionStart(SessionStartSend message)
        {
            var errorMessage = callbackHandler.ProcessSessionStart();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<SessionStartReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

