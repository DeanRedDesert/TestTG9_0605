//-----------------------------------------------------------------------
// <copyright file = "IExtensionProgressiveControllerRuntimeCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.ExtensionProgressiveControllerRuntime;

    /// <summary>
    /// Category for supporting a Progressive Controller that is implemented by a system extension. Methods of this
    /// category can be called during normal operation.
    /// Category: 3024; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IExtensionProgressiveControllerRuntimeCategory
    {
        /// <summary>
        /// Queries the minimum interval, in milliseconds, that progressive values can be pushed to the foundation.
        /// </summary>
        /// <returns>
        /// The content of the GetConfigDataMinControllerLevelUpdateIntervalReply message.
        /// </returns>
        ulong GetConfigDataMinControllerLevelUpdateInterval();

        /// <summary>
        /// Allows the extension to update the values of a progressive controller level.
        /// </summary>
        /// <param name="values">
        /// List of progressive level values associated with a controller.
        /// </param>
        void SetControllerLevelValues(ControllerLevelValues values);

        /// <summary>
        /// Response to a validation request indicating the state of the requested hit.
        /// </summary>
        /// <param name="results">
        /// 
        /// </param>
        void ValidationResponse(IEnumerable<PotentialHitResult> results);

        /// <summary>
        /// Message sent to the foundation indicating that the progressive protocol has acknowledged the WAP handpay.
        /// </summary>
        /// <param name="controllerId">
        /// 
        /// </param>
        void WapHandpayAcknowledge(string controllerId);

    }

}

