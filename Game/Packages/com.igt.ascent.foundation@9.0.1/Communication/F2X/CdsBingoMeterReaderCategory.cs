//-----------------------------------------------------------------------
// <copyright file = "CdsBingoMeterReaderCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual editing when merging.
// All changes are marked with "MANUAL EDIT:"
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.CdsBingoMeterReader;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="CdsBingoMeterReader"/> category.
    /// CdsBingoMeterReader category of messages.  Provides read-only access to a subset of foundation meters for the
    /// purposes of Bingo-specific reporting and gameplay.
    /// Category: 3013; Major Version: 1
    /// </summary>
    public class CdsBingoMeterReaderCategory : F2XTransactionalCategoryBase<CdsBingoMeterReader>, ICdsBingoMeterReaderCategory, IMultiVersionSupport
    {
        #region Fields

        private const string MethodGetBingoMetersMaxValue = "GetBingoMetersMaxValue";

        /// <summary>
        /// A look-up table for the methods that are NOT available in all supported versions.
        /// Keyed by the method name, the value is the version where the method becomes available.
        /// </summary>
        private readonly Dictionary<string, Version> methodSupportingVersions = new Dictionary<string, Version>
        {
            { MethodGetBingoMetersMaxValue, new Version(1, 1) }
        };

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="CdsBingoMeterReaderCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public CdsBingoMeterReaderCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.CdsBingoMeterReader;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by CdsBingoMeterReaderCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region ICdsBingoMeterReaderCategory Members

        /// <inheritdoc/>
        public IEnumerable<BingoMeterMaxValueData> GetBingoMetersMaxValue(IEnumerable<BingoMeterId> meter)
        {
            if(IsMethodSupported(MethodGetBingoMetersMaxValue))
            {
                Transport.MustHaveHeavyweightTransaction();
                var request = CreateTransactionalRequest<GetBingoMetersMaxValueSend>();
                var content = (GetBingoMetersMaxValueSend)request.Message.Item;
                content.Meter = meter == null ? null : meter.ToList();

                var reply = SendMessageAndGetReply<GetBingoMetersMaxValueReply>(Channel.Foundation, request);
                CheckReply(reply.Exception);
                return reply.Content;
            }

            return default(IEnumerable<BingoMeterMaxValueData>);
        }

        /// <inheritdoc/>
        public IEnumerable<BingoMeterData> ReadBingoMeters(IEnumerable<BingoMeterId> meter)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<ReadBingoMetersSend>();
            var content = (ReadBingoMetersSend)request.Message.Item;

            // MANUAL EDIT: Throw an exception if unsupported meter ids are requested for the current version.
            if (MinorVersion == 0 && meter != null && meter.Count(id => id >= BingoMeterId.CurrentCreditsCashablePennies) > 0)
            {
                throw new InvalidOperationException(
                    $"ReadBingoMeters called with invalid meter id for version {MajorVersion}.{MinorVersion}");
            }
            content.Meter = meter == null ? null : meter.ToList();

            var reply = SendMessageAndGetReply<ReadBingoMetersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Checks if a method is supported by the effective version of the category.
        /// </summary>
        /// <param name="methodName">
        /// The name of the method to check.
        /// </param>
        /// <returns>
        /// True if the method is supported. False otherwise.
        /// </returns>
        private bool IsMethodSupported(string methodName)
        {
            // Methods not in the dictionary are available in all versions.
            var result = true;

            if(methodSupportingVersions.ContainsKey(methodName))
            {
                result = effectiveVersion >= methodSupportingVersions[methodName];
            }

            return result;
        }

        #endregion

    }

}

