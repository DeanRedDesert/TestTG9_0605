//-----------------------------------------------------------------------
// <copyright file = "AppDecorationQueryCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.AppDecorationQuery;
    using Schemas.Internal.AppDecorationTypes;
    using Schemas.Internal.AppTypes;

    /// <summary>
    /// Implementation of the F2X <see cref="AppDecorationQuery"/> category.
    /// App Decoration Query category of messages.
    /// Category: 132; Major Version: 1
    /// </summary>
    public class AppDecorationQueryCategory : F2XTransactionalCategoryBase<AppDecorationQuery>, IAppDecorationQueryCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the AppDecorationQueryCategory callbacks.
        /// </summary>
        private readonly IAppDecorationQueryCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="AppDecorationQueryCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// AppDecorationQueryCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public AppDecorationQueryCategory(IF2XTransport transport, IAppDecorationQueryCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<AppDecorationsChangedSend>(HandleAppDecorationsChanged);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.AppDecorationQuery;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IAppDecorationQueryCategory Members

        /// <inheritdoc/>
        public AppDecorationsList GetAppDecorations(AppIdentifierList appIdentifiers)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetAppDecorationsSend>();
            var content = (GetAppDecorationsSend)request.Message.Item;
            content.AppIdentifiers = appIdentifiers;

            var reply = SendMessageAndGetReply<GetAppDecorationsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.AppDecorations;
        }

        /// <inheritdoc/>
        public DecorationInfoList GetDecorationContent(DecorationIdentifierList decorationIdentifiers)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetDecorationContentSend>();
            var content = (GetDecorationContentSend)request.Message.Item;
            content.DecorationIdentifiers = decorationIdentifiers;

            var reply = SendMessageAndGetReply<GetDecorationContentReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.DecorationInfo;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the AppDecorationsChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleAppDecorationsChanged(AppDecorationsChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessAppDecorationsChanged(message.UpdatedApps);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<AppDecorationsChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

