//-----------------------------------------------------------------------
// <copyright file = "EventBasedProgressiveCategory.cs" company = "IGT">
//     Copyright (c) 2022 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual changes when merging.
// All changes are marked with "MANUAL EDIT: "
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.EventBasedProgressive;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="EventBasedProgressive"/> category.
    /// This category provides messages for game clients to contribute to progressive pools based on qualifying events
    /// defined by the game client.    The contribution value/amount is specified by the game-client when the event
    /// occurs and the value is accumulated by controller-level linked to the appropriate game-level. Progressive hits
    /// are paid/metered as paytable win (AKA "coin-out") when the game declares a progressive hit (i.e. they are not
    /// metered as progressive wins for regulatory reasons).    Note: When a level is configured to be "event-based",
    /// only contributions specifically declared by the game-client are accumulated by the controller; contributions
    /// are not accumulated based on a percentage of the bets/wagers.
    /// Category: 141; Major Version: 1
    /// </summary>
    public class EventBasedProgressiveCategory : F2XTransactionalCategoryBase<EventBasedProgressive>, IEventBasedProgressiveCategory, IMultiVersionSupport
    {
        #region Fields

        // MANUAL EDIT: Added fields used for method supported check.
        private const string MethodFieldFractionalAmount = "FractionalAmount";

        /// <summary>
        /// A look-up table for the methods that are NOT available in all supported versions.
        /// Keyed by the method name, the value is the version where the method becomes available.
        /// </summary>
        private readonly Dictionary<string, Version> methodSupportingVersions = new Dictionary<string, Version>
                                                                                {
                                                                                    { MethodFieldFractionalAmount, new Version(1, 1) }
                                                                                };

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="EventBasedProgressiveCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public EventBasedProgressiveCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.EventBasedProgressive;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by EventBasedProgressiveCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region IEventBasedProgressiveCategory Members

        /// <inheritdoc/>
        public void AddQualifiedContribution(EventBasedContributionData eventBasedContributionData)
        {
            Transport.MustHaveHeavyweightTransaction();

            // MANUAL EDIT: Added version check for FractionalAmount.
            if(eventBasedContributionData.FractionalAmount != null &&
               !IsMethodSupported(MethodFieldFractionalAmount))
            {
                throw new InvalidOperationException(
                    $"Fractional Amount is not supported in {MajorVersion}.{MinorVersion}." +
                    "It requires version 1.1 and up.");
            }

            var request = CreateTransactionalRequest<AddQualifiedContributionSend>();
            var content = (AddQualifiedContributionSend)request.Message.Item;
            content.EventBasedContributionData = eventBasedContributionData;

            var reply = SendMessageAndGetReply<AddQualifiedContributionReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Private Methods

        // MANUAL EDIT: Added method for method supported check.

        /// <summary>
        /// Checks if a method is supported by the effective version of the category.
        /// </summary>
        /// <param name="methodName">
        /// The name of the method to check.
        /// </param>
        /// <returns>
        /// True if the method is supported. False otherwise.
        /// </returns>
        private bool IsMethodSupported(string methodName)
        {
            // Methods not in the dictionary are available in all versions.
            var result = true;

            if(methodSupportingVersions.ContainsKey(methodName))
            {
                result = effectiveVersion >= methodSupportingVersions[methodName];
            }

            return result;
        }

        #endregion

    }

}

