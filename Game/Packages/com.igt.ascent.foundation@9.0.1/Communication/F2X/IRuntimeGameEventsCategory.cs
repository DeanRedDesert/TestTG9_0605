//-----------------------------------------------------------------------
// <copyright file = "IRuntimeGameEventsCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.RuntimeGameEvents;
    using Schemas.Internal.Types;

    /// <summary>
    /// RuntimeGameEvents category. Defines messages for Australia specific protocols to be notified when particular
    /// game actions are taken.
    /// Category: 155; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IRuntimeGameEventsCategory
    {
        /// <summary>
        /// Notifies the Foundation information which used to keep track of the line/credit bet per line statistics.
        /// This could be required by protocols such as Qcom.
        /// </summary>
        /// <param name="horizontalKey">
        /// The game bet horizontal key.
        /// </param>
        /// <param name="verticalKey">
        /// The game bet vertical key.
        /// </param>
        void GameBetMeterKeysUpdate(string horizontalKey, string verticalKey);

        /// <summary>
        /// Notifies the Foundation the current bet composition once a bet is committed. This could be required by
        /// protocols such as ASP.
        /// </summary>
        /// <param name="betPerLine">
        /// The bet per line.
        /// </param>
        /// <param name="selectedLines">
        /// The selected lines.
        /// </param>
        void GameBetMeterUpdate(Amount betPerLine, uint selectedLines);

        /// <summary>
        /// Notifies the Foundation that the denomination selection menu is active. This could be required by protocols
        /// such as XSeries.
        /// </summary>
        /// <param name="active">
        /// True if the denomination selection menu is active, otherwise false.
        /// </param>
        void GameSelectionStatusUpdate(bool active);

        /// <summary>
        /// Get the Runtime Game Events configuration.
        /// </summary>
        /// <returns>
        /// The content of the GetRuntimeGameEventsConfigurationReply message.
        /// </returns>
        RuntimeGameEventsConfiguration GetRuntimeGameEventsConfiguration();

        /// <summary>
        /// Notifies the Foundation that a player choosing a particular choice from a feature. This could be required by
        /// protocols such as Qcom.
        /// </summary>
        /// <param name="playerChoiceIndex">
        /// The index of the player choice.
        /// </param>
        void PlayerChoiceUpdate(uint playerChoiceIndex);

        /// <summary>
        /// Notifies the Foundation that the game is in a state requires player input to proceed. This could be required
        /// by protocols such as ASP.
        /// </summary>
        /// <param name="waitingForInput">
        /// True if the game is waiting for input, false if the waiting is finished.
        /// </param>
        void WaitingForGenericInputStatusUpdate(bool waitingForInput);

    }

}

