//-----------------------------------------------------------------------
// <copyright file = "ParcelCommCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.ParcelComm;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="ParcelComm"/> category.
    /// F2X universal Parcel Communication category. Category: 128  Version: 1
    /// Category: 128; Major Version: 1
    /// </summary>
    public class ParcelCommCategory : F2XTransactionalCategoryBase<ParcelComm>, IParcelCommCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the ParcelCommCategory callbacks.
        /// </summary>
        private readonly IParcelCommCategoryCallbacks callbackHandler;

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1),
            new Version(1, 2),
            new Version(1, 3)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="ParcelCommCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// ParcelCommCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public ParcelCommCategory(IF2XTransport transport, IParcelCommCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<ParcelCallRxSend>(HandleParcelCallRx);
            AddMessagehandler<TransParcelCallRxSend>(HandleTransParcelCallRx);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.ParcelComm;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by ParcelCommCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region IParcelCommCategory Members

        /// <inheritdoc/>
        public ParcelCallTxReplyContent ParcelCallTx(RequestParcel parcel)
        {
            var request = CreateBasicRequest<ParcelCallTxSend>();
            var content = (ParcelCallTxSend)request.Message.Item;
            content.Parcel = parcel;

            var reply = SendMessageAndGetReply<ParcelCallTxReply>(Channel.Game, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        /// <inheritdoc/>
        public TransParcelCallTxReplyContent TransParcelCallTx(RequestParcel parcel)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<TransParcelCallTxSend>();
            var content = (TransParcelCallTxSend)request.Message.Item;
            content.Parcel = parcel;

            var reply = SendMessageAndGetReply<TransParcelCallTxReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the ParcelCallRxSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleParcelCallRx(ParcelCallRxSend message)
        {
            ParcelCallRxReplyContent callbackResult;
            var errorMessage = callbackHandler.ProcessParcelCallRx(message.Parcel, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ParcelCallRxReply>(errorCode, errorMessage);
            var reply = (ParcelCallRxReply)replyMessage.Message.Item;
            reply.Content = callbackResult;
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the TransParcelCallRxSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleTransParcelCallRx(TransParcelCallRxSend message)
        {
            TransParcelCallRxReplyContent callbackResult;
            var errorMessage = callbackHandler.ProcessTransParcelCallRx(message.Parcel, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<TransParcelCallRxReply>(errorCode, errorMessage);
            var reply = (TransParcelCallRxReply)replyMessage.Message.Item;
            reply.Content = callbackResult;
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

