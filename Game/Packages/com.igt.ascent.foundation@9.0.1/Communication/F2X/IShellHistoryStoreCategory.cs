//-----------------------------------------------------------------------
// <copyright file = "IShellHistoryStoreCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using Schemas.Internal.ShellHistoryStore;

    /// <summary>
    /// F2X Shell History Store category of messages, which provides the APIs for the concurrent game shell to access
    /// its critical data related to game cycle history. This category is only valid in Play mode.
    /// Category: 1027; Major Version: 1
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IShellHistoryStoreCategory
    {
        /// <summary>
        /// Message requesting if the shell can write to the ShellHistoryStore. Can only be called during context
        /// activation.
        /// </summary>
        /// <returns>
        /// The content of the GetShellHistoryWritePermittedReply message.
        /// </returns>
        IEnumerable<int> GetShellHistoryWritePermitted();

        /// <summary>
        /// Message requesting to read critical data with the given name.
        /// </summary>
        /// <param name="coplayer">
        /// Coplayer identifier to read the bound shell history for.
        /// </param>
        /// <param name="readKeys">
        /// Identifies a list of the names of critical data to read.
        /// </param>
        /// <returns>
        /// The content of the ReadCritDataReply message.
        /// </returns>
        IEnumerable<ReadCritDataReplyContentItem> ReadCritData(int coplayer, IEnumerable<string> readKeys);

        /// <summary>
        /// Message requesting to remove critical data with the given name.
        /// </summary>
        /// <param name="coplayer">
        /// Coplayer identifier to read the bound shell history for.
        /// </param>
        /// <param name="criticalDataItems">
        /// Identifies a list of the critical data items to remove.
        /// </param>
        void RemoveCritData(int coplayer, IEnumerable<string> criticalDataItems);

        /// <summary>
        /// Message requesting to write the given data to critical data with the given name.
        /// </summary>
        /// <param name="coplayer">
        /// Coplayer identifier to read the bound shell history for.
        /// </param>
        /// <param name="criticalDataItems">
        /// Identifies a list of the critical data items to write.
        /// </param>
        void WriteCritData(int coplayer, IEnumerable<CriticalDataItemListItem> criticalDataItems);

    }

}

