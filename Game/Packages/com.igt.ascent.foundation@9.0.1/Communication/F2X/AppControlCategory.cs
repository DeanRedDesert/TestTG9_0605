//-----------------------------------------------------------------------
// <copyright file = "AppControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.AppControl;
    using Schemas.Internal.AppTypes;

    /// <summary>
    /// Implementation of the F2X <see cref="AppControl"/> category.
    /// App Control category of messages.
    /// Category: 2000; Major Version: 2
    /// </summary>
    public class AppControlCategory : F2XTransactionalCategoryBase<AppControl>, IAppControlCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the AppControlCategory callbacks.
        /// </summary>
        private readonly IAppControlCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="AppControlCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// AppControlCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public AppControlCategory(IF2XTransport transport, IAppControlCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<AppRequestedSend>(HandleAppRequested);
            AddMessagehandler<AppStateChangedSend>(HandleAppStateChanged);
            AddMessagehandler<ChooserRequestedSend>(HandleChooserRequested);
            AddMessagehandler<DisplayStateChangedSend>(HandleDisplayStateChanged);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.AppControl;

        /// <inheritdoc/>
        public override uint MajorVersion => 2;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IAppControlCategory Members

        /// <inheritdoc/>
        public bool DisplayApp(AppSelector app, DisplayControlState displayState, AppSwitchBehavior switchBehavior)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<DisplayAppSend>();
            var content = (DisplayAppSend)request.Message.Item;
            content.App = app;
            content.DisplayState = displayState;
            content.SwitchBehavior = switchBehavior;

            var reply = SendMessageAndGetReply<DisplayAppReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Displayed;
        }

        /// <inheritdoc/>
        public PerformanceMetersList GetAppPerformanceMeters(AppIdentifier app, int periodInWeeks)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetAppPerformanceMetersSend>();
            var content = (GetAppPerformanceMetersSend)request.Message.Item;
            content.App = app;
            content.PeriodInWeeks = periodInWeeks;

            var reply = SendMessageAndGetReply<GetAppPerformanceMetersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.MeterDeltas;
        }

        /// <inheritdoc/>
        public AppState GetAppState()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetAppStateSend>();

            var reply = SendMessageAndGetReply<GetAppStateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.State;
        }

        /// <inheritdoc/>
        public AppIdentifier GetDefaultApp()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetDefaultAppSend>();

            var reply = SendMessageAndGetReply<GetDefaultAppReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.App;
        }

        /// <inheritdoc/>
        public uint GetDefaultDenomination()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetDefaultDenominationSend>();

            var reply = SendMessageAndGetReply<GetDefaultDenominationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Denomination;
        }

        /// <inheritdoc/>
        public AppIdentifierList GetPriorityApps()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetPriorityAppsSend>();

            var reply = SendMessageAndGetReply<GetPriorityAppsReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Apps;
        }

        /// <inheritdoc/>
        public void SetChooserOfferable(bool offerable)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetChooserOfferableSend>();
            var content = (SetChooserOfferableSend)request.Message.Item;
            content.Offerable = offerable;

            var reply = SendMessageAndGetReply<SetChooserOfferableReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the AppRequestedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleAppRequested(AppRequestedSend message)
        {
            var errorMessage = callbackHandler.ProcessAppRequested(message.App, message.SwitchBehavior, message.Required);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<AppRequestedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the AppStateChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleAppStateChanged(AppStateChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessAppStateChanged(message.State);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<AppStateChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the ChooserRequestedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleChooserRequested(ChooserRequestedSend message)
        {
            var errorMessage = callbackHandler.ProcessChooserRequested();
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<ChooserRequestedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the DisplayStateChangedSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleDisplayStateChanged(DisplayStateChangedSend message)
        {
            var errorMessage = callbackHandler.ProcessDisplayStateChanged(message.DisplayState);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<DisplayStateChangedReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

