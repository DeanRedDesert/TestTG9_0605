//-----------------------------------------------------------------------
// <copyright file = "GameLevelAwardCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual editing when merging.
// All changes are marked with "MANUAL EDIT:"
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.GameLevelAward;

    /// <summary>
    /// Implementation of the F2X <see cref="GameLevelAward"/> category.
    /// Category of messages.  Category: 4002   Version: 1. This category is used to retrieve game level (progressive)
    /// award information from the game's Report executable.
    /// </summary>
    public class GameLevelAwardCategory : F2XCategoryBase<GameLevelAward>
    {
        #region Fields

        /// <summary>
        /// Object which implements the GameLevelAwardCategory callbacks.
        /// </summary>
        private readonly IGameLevelAwardCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameLevelAwardCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// GameLevelAwardCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public GameLevelAwardCategory(IF2XTransport transport, IGameLevelAwardCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<GetThemeBasedGameLevelValuesSend>(HandleGetThemeBasedGameLevelValues);
            AddMessagehandler<InitializeGameLevelDataSend>(HandleInitializeGameLevelData);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.GameLevelAward;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the GetThemeBasedGameLevelValuesSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGetThemeBasedGameLevelValues(GetThemeBasedGameLevelValuesSend message)
        {
            IEnumerable<GameLevelPayvarDenomData> callbackResult;
            var errorMessage = callbackHandler.ProcessGetThemeBasedGameLevelValues(message.Theme, message.ProgressiveLevelPayvarDenomData, out callbackResult);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<GetThemeBasedGameLevelValuesReply>(errorCode, errorMessage);
            var reply = (GetThemeBasedGameLevelValuesReply)replyMessage.Message.Item;
            
            // MANUAL EDIT: Correctly populate reply message.
            if(errorCode == 0)
            {
                reply.Content.Theme = message.Theme;
                reply.Content.GameLevelPayvarDenomData = callbackResult.ToList();
            }
            else
            {
                reply.Content = null;
            }
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        /// <summary>
        /// Handler for the InitializeGameLevelDataSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleInitializeGameLevelData(InitializeGameLevelDataSend message)
        {
            var errorMessage = callbackHandler.ProcessInitializeGameLevelData(message.Theme, message.PayvarDenominations);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<InitializeGameLevelDataReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

