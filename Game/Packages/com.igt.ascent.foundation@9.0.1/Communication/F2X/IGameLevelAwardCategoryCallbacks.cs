//-----------------------------------------------------------------------
// <copyright file = "IGameLevelAwardCategoryCallbacks.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System.Collections.Generic;
    using Schemas.Internal.GameLevelAward;
    using Schemas.Internal.Types;

    /// <summary>
    /// Interface that handles callbacks from the F2X <see cref="GameLevelAward"/> category.
    /// Category of messages.  Category: 4002   Version: 1. This category is used to retrieve game level (progressive)
    /// award information from the game's Report executable.
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface IGameLevelAwardCategoryCallbacks
    {
        /// <summary>
        /// Message from the Foundation to the Bin on the FIN channel.  A request for the current (progressive) values
        /// of the game levels given the theme, payvars, and denominations.
        /// </summary>
        /// <param name="theme">
        /// Identifies the theme to use for collecting game level values.
        /// </param>
        /// <param name="progressiveLevelPayvarDenomData">
        /// Contains a list of payvar-denominations for which game level data is being requested.  It also provides the
        /// current (raw) progressive level data for the requested payvars and denominations which may be used as input
        /// to determine the adjusted/displayable game level values.
        /// </param>
        /// <param name="callbackResult">
        /// [Out] There is to be an element for each payvar that was requested.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessGetThemeBasedGameLevelValues(ThemeIdentifier theme, IEnumerable<ProgressiveLevelPayvarDenomData> progressiveLevelPayvarDenomData, out IEnumerable<GameLevelPayvarDenomData> callbackResult);

        /// <summary>
        /// Message from the Foundation to the Bin on the FI channel.  This message requests the Report executable to
        /// initialize for subsequent game level award queries on the FIN (Foundation Initiated Non-transactional)
        /// channel.  This message must be called by the Foundation after each Report executable activation before the
        /// Foundation may receive (valid) game level award information.
        /// </summary>
        /// <param name="theme">
        /// Identifies the theme for subsequent game level award queries.
        /// </param>
        /// <param name="payvarDenominations">
        /// The payvars and denominations for the theme.
        /// </param>
        /// <returns>
        /// An error message if an error occurs; otherwise, null.
        /// </returns>
        string ProcessInitializeGameLevelData(ThemeIdentifier theme, IEnumerable<PayvarDenominations> payvarDenominations);

    }

}

