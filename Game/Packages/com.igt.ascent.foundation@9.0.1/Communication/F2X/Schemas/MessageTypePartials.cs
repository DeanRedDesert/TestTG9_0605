//-----------------------------------------------------------------------
// <copyright file = "MessageTypePartials.cs" company = "IGT">
//     Copyright (c) 2023 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

// ReSharper disable once CheckNamespace
namespace IGT.Game.Core.Communication.Foundation.F2X.Schemas.Internal
{
    using F2XTransport;
    using Types;

    namespace ActionRequest
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ActionRequestMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ActionRequest : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ActionRequest()
            {
                Message = new ActionRequestMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ActionRequestLite
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ActionRequestLiteMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ActionRequestLite : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ActionRequestLite()
            {
                Message = new ActionRequestLiteMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace Activation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ActivationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class Activation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public Activation()
            {
                Message = new ActivationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AppActivation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AppActivationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AppActivation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AppActivation()
            {
                Message = new AppActivationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AppApiControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AppApiControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AppApiControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AppApiControl()
            {
                Message = new AppApiControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AppControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AppControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AppControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AppControl()
            {
                Message = new AppControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AppControlClient
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AppControlClientMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AppControlClient : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AppControlClient()
            {
                Message = new AppControlClientMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AppDecorationManagement
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AppDecorationManagementMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AppDecorationManagement : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AppDecorationManagement()
            {
                Message = new AppDecorationManagementMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AppDecorationQuery
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AppDecorationQueryMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AppDecorationQuery : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AppDecorationQuery()
            {
                Message = new AppDecorationQueryMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AppQuery
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AppQueryMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AppQuery : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AppQuery()
            {
                Message = new AppQueryMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AppStorage
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AppStorageMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AppStorage : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AppStorage()
            {
                Message = new AppStorageMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AscribedGameApiControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AscribedGameApiControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AscribedGameApiControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AscribedGameApiControl()
            {
                Message = new AscribedGameApiControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace AscribedShellActivation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class AscribedShellActivationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class AscribedShellActivation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public AscribedShellActivation()
            {
                Message = new AscribedShellActivationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace BankPlay
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class BankPlayMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class BankPlay : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public BankPlay()
            {
                Message = new BankPlayMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace BankStatus
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class BankStatusMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class BankStatus : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public BankStatus()
            {
                Message = new BankStatusMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace BetStepsConfiguration
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class BetStepsConfigurationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class BetStepsConfiguration : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public BetStepsConfiguration()
            {
                Message = new BetStepsConfigurationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace Bonusing
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class BonusingMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class Bonusing : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public Bonusing()
            {
                Message = new BonusingMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CallAttendant
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CallAttendantMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CallAttendant : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CallAttendant()
            {
                Message = new CallAttendantMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CashDeviceSupervision
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CashDeviceSupervisionMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CashDeviceSupervision : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CashDeviceSupervision()
            {
                Message = new CashDeviceSupervisionMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace Cashout
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CashoutMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class Cashout : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public Cashout()
            {
                Message = new CashoutMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CdsBingo
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CdsBingoMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CdsBingo : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CdsBingo()
            {
                Message = new CdsBingoMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CdsBingoConfig
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CdsBingoConfigMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CdsBingoConfig : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CdsBingoConfig()
            {
                Message = new CdsBingoConfigMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CdsBingoMeterReader
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CdsBingoMeterReaderMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CdsBingoMeterReader : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CdsBingoMeterReader()
            {
                Message = new CdsBingoMeterReaderMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CdsEcp
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CdsEcpMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CdsEcp : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CdsEcp()
            {
                Message = new CdsEcpMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CdsHhr
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CdsHhrMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CdsHhr : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CdsHhr()
            {
                Message = new CdsHhrMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CdsIcd
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CdsIcdMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CdsIcd : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CdsIcd()
            {
                Message = new CdsIcdMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CdsPullTab
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CdsPullTabMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CdsPullTab : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CdsPullTab()
            {
                Message = new CdsPullTabMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CertificateManagement
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CertificateMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CertificateManagement : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CertificateManagement()
            {
                Message = new CertificateMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ChooserDefinitionQuery
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ChooserDefinitionQueryMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ChooserDefinitionQuery : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ChooserDefinitionQuery()
            {
                Message = new ChooserDefinitionQueryMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ChooserServices
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ChooserServicesMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ChooserServices : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ChooserServices()
            {
                Message = new ChooserServicesMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ClockDisplay
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ClockDisplayMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ClockDisplay : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ClockDisplay()
            {
                Message = new ClockDisplayMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ConfigurationModeControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ConfigurationModeControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ConfigurationModeControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ConfigurationModeControl()
            {
                Message = new ConfigurationModeControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ConfigurationModeMonitoring
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ConfigurationModeMonitoringMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ConfigurationModeMonitoring : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ConfigurationModeMonitoring()
            {
                Message = new ConfigurationModeMonitoringMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace Connect
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ConnectMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class Connect : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public Connect()
            {
                Message = new ConnectMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CoplayerActivation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CoplayerActivationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CoplayerActivation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CoplayerActivation()
            {
                Message = new CoplayerActivationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CoplayerApiControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CoplayerApiControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CoplayerApiControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CoplayerApiControl()
            {
                Message = new CoplayerApiControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CoplayerHistoryStore
    {
        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CoplayerHistoryStore : ICategory
        {
            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CoplayerManagement
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CoplayerManagementMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CoplayerManagement : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CoplayerManagement()
            {
                Message = new CoplayerManagementMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CultureRead
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CultureReadMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CultureRead : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CultureRead()
            {
                Message = new CultureReadMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CultureWrite
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CultureWriteMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CultureWrite : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CultureWrite()
            {
                Message = new CultureWriteMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace CustomConfigurationRead
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class CustomConfigurationReadMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class CustomConfigurationRead : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public CustomConfigurationRead()
            {
                Message = new CustomConfigurationReadMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace DateTime
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class DateTimeMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class DateTime : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public DateTime()
            {
                Message = new DateTimeMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace DftMeterReader
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class DftMeterReaderMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class DftMeterReader : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public DftMeterReader()
            {
                Message = new DftMeterReaderMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace DisplayControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class DisplayControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class DisplayControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public DisplayControl()
            {
                Message = new DisplayControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace EbpConfiguration
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class EbpConfigurationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class EbpConfiguration : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public EbpConfiguration()
            {
                Message = new EbpConfigurationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace EGMConfigData
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        // ReSharper disable once InconsistentNaming
        public partial class EGMConfigDataMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        // ReSharper disable once InconsistentNaming
        public partial class EGMConfigData : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public EGMConfigData()
            {
                Message = new EGMConfigDataMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace EventBasedProgressive
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class EventBasedProgressiveMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class EventBasedProgressive : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public EventBasedProgressive()
            {
                Message = new EventBasedProgressiveMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace EventLog
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class EventLogMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class EventLog : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public EventLog()
            {
                Message = new EventLogMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ExtensionAppSelection
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ExtensionAppSelectionMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ExtensionAppSelection : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ExtensionAppSelection()
            {
                Message = new ExtensionAppSelectionMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ExtensionProgressiveControllerConfig
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ExtensionProgressiveControllerConfigMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ExtensionProgressiveControllerConfig : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ExtensionProgressiveControllerConfig()
            {
                Message = new ExtensionProgressiveControllerConfigMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ExtensionProgressiveControllerLinking
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ExtensionProgressiveControllerLinkingMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ExtensionProgressiveControllerLinking : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ExtensionProgressiveControllerLinking()
            {
                Message = new ExtensionProgressiveControllerLinkingMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ExtensionProgressiveControllerRuntime
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ExtensionProgressiveControllerRuntimeMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ExtensionProgressiveControllerRuntime : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ExtensionProgressiveControllerRuntime()
            {
                Message = new ExtensionProgressiveControllerRuntimeMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace FirewallManager
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class FirewallManagerMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class FirewallManager : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public FirewallManager()
            {
                Message = new FirewallManagerMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace FlashPlayerClock
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class FlashPlayerClockMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class FlashPlayerClock : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public FlashPlayerClock()
            {
                Message = new FlashPlayerClockMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace G2SConnection
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class G2SConnectionMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class G2SConnection : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public G2SConnection()
            {
                Message = new G2SConnectionMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameCycleBetting
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameCycleBettingMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameCycleBetting : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameCycleBetting()
            {
                Message = new GameCycleBettingMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameCycleEvents
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameCycleEventsMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameCycleEvents : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameCycleEvents()
            {
                Message = new GameCycleEventsMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameCyclePlay
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameCyclePlayMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameCyclePlay : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameCyclePlay()
            {
                Message = new GameCyclePlayMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameCycleSupervision
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameCycleSupervisionMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameCycleSupervision : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameCycleSupervision()
            {
                Message = new GameCycleSupervisionMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameGroupControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameGroupControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameGroupControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameGroupControl()
            {
                Message = new GameGroupControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameGroupInformation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameGroupInformationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameGroupInformation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameGroupInformation()
            {
                Message = new GameGroupInformationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameHistorySupplemental
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameHistorySupplementalMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameHistorySupplemental : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameHistorySupplemental()
            {
                Message = new GameHistorySupplementalMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameInformation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameInformationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameInformation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameInformation()
            {
                Message = new GameInformationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameLevelAward
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameLevelAwardMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameLevelAward : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameLevelAward()
            {
                Message = new GameLevelAwardMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameLink
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameLinkMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameLink : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameLink()
            {
                Message = new GameLinkMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameOutcomeEvents
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameOutcomeEventsMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameOutcomeEvents : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameOutcomeEvents()
            {
                Message = new GameOutcomeEventsMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GamePlayReporting
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GamePlayReportingMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GamePlayReporting : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GamePlayReporting()
            {
                Message = new GamePlayReportingMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GamePlayStatus
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GamePlayStatusMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GamePlayStatus : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GamePlayStatus()
            {
                Message = new GamePlayStatusMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GamePlayStore
    {
        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GamePlayStore : ICategory
        {
            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GamePresentationBehavior
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GamePresentationBehaviorMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GamePresentationBehavior : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GamePresentationBehavior()
            {
                Message = new GamePresentationBehaviorMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameProgressiveSettings
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameProgressiveSettingsMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameProgressiveSettings : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameProgressiveSettings()
            {
                Message = new GameProgressiveSettingsMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace GameReserve
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class GameReserveMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class GameReserve : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public GameReserve()
            {
                Message = new GameReserveMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace JackpotItaly
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class JackpotItalyMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class JackpotItaly : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public JackpotItaly()
            {
                Message = new JackpotItalyMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace KVSTypes
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class KeyValueStoreMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to initialize abstract class.
        /// </summary>
        public partial class KeyValueStore
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            protected KeyValueStore()
            {
                Message = new KeyValueStoreMessage();
            }

        }

    }

    namespace LegacyBonusControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class LegacyBonusControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class LegacyBonusControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public LegacyBonusControl()
            {
                Message = new LegacyBonusControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace LinkControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class LinkControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class LinkControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public LinkControl()
            {
                Message = new LinkControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace Localization
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class LocalizationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class Localization : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public Localization()
            {
                Message = new LocalizationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace MachineIdentification
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class MachineIdentificationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class MachineIdentification : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public MachineIdentification()
            {
                Message = new MachineIdentificationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace MachineSupervision
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class MachineSupervisionMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class MachineSupervision : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public MachineSupervision()
            {
                Message = new MachineSupervisionMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace MessageStrip
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class MessageStripMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class MessageStrip : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public MessageStrip()
            {
                Message = new MessageStripMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace MidGameMoneyAcceptance
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class MidGameMoneyAcceptanceMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class MidGameMoneyAcceptance : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public MidGameMoneyAcceptance()
            {
                Message = new MidGameMoneyAcceptanceMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace NetworkManagement
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class NetworkManagementMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class NetworkManagement : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public NetworkManagement()
            {
                Message = new NetworkManagementMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace NICInformation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        // ReSharper disable once InconsistentNaming
        public partial class NICInformationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        // ReSharper disable once InconsistentNaming
        public partial class NICInformation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public NICInformation()
            {
                Message = new NICInformationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace NonTransactionalCritDataRead
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class NonTransactionalCritDataReadMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class NonTransactionalCritDataRead : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public NonTransactionalCritDataRead()
            {
                Message = new NonTransactionalCritDataReadMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ParcelComm
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ParcelCommMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ParcelComm : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ParcelComm()
            {
                Message = new ParcelCommMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PayvarStore
    {
        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class PayvarStore : ICategory
        {
            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PerformCashout
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class PerformCashoutMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class PerformCashout : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public PerformCashout()
            {
                Message = new PerformCashoutMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PIDSessionTracking
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        // ReSharper disable once InconsistentNaming
        public partial class PIDSessionTrackingMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        // ReSharper disable once InconsistentNaming
        public partial class PIDSessionTracking : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public PIDSessionTracking()
            {
                Message = new PIDSessionTrackingMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PlayerCardServices
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class PlayerCardServicesMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class PlayerCardServices : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public PlayerCardServices()
            {
                Message = new PlayerCardServicesMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PlayerControlContextMonitoring
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class PlayerControlContextMonitoringMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class PlayerControlContextMonitoring : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public PlayerControlContextMonitoring()
            {
                Message = new PlayerControlContextMonitoringMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PlayerInformationDisplay
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class PlayerInformationDisplayMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class PlayerInformationDisplay : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public PlayerInformationDisplay()
            {
                Message = new PlayerInformationDisplayMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PlayerSession
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class PlayerSessionMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class PlayerSession : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public PlayerSession()
            {
                Message = new PlayerSessionMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PlayerSessionParameters
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class PlayerSessionParametersMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class PlayerSessionParameters : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public PlayerSessionParameters()
            {
                Message = new PlayerSessionParametersMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace PlayerTipping
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class PlayerTippingMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class PlayerTipping : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public PlayerTipping()
            {
                Message = new PlayerTippingMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ProgressiveData
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ProgressiveDataMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ProgressiveData : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ProgressiveData()
            {
                Message = new ProgressiveDataMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace RandomNumberGeneration
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class RandomNumberGenerationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class RandomNumberGeneration : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public RandomNumberGeneration()
            {
                Message = new RandomNumberGenerationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ReportGameDataInspection
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ReportGameDataInspectionMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ReportGameDataInspection : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ReportGameDataInspection()
            {
                Message = new ReportGameDataInspectionMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ReportGamePerformance
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ReportGamePerformanceMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ReportGamePerformance : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ReportGamePerformance()
            {
                Message = new ReportGamePerformanceMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ResponsibleGamingSessionDisplay
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ResponsibleGamingSessionDisplayMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ResponsibleGamingSessionDisplay : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ResponsibleGamingSessionDisplay()
            {
                Message = new ResponsibleGamingSessionDisplayMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace RetrieveGameLevelAwards
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class RetrieveGameLevelAwardsMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class RetrieveGameLevelAwards : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public RetrieveGameLevelAwards()
            {
                Message = new RetrieveGameLevelAwardsMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace RuntimeGameEvents
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class RuntimeGameEventsMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class RuntimeGameEvents : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public RuntimeGameEvents()
            {
                Message = new RuntimeGameEventsMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace SelectionManagement
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class SelectionManagementMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class SelectionManagement : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public SelectionManagement()
            {
                Message = new SelectionManagementMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace SessionManagement
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class SessionManagementMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class SessionManagement : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public SessionManagement()
            {
                Message = new SessionManagementMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace SetupValidation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class SetupValidationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class SetupValidation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public SetupValidation()
            {
                Message = new SetupValidationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ShellActivation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ShellActivationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ShellActivation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ShellActivation()
            {
                Message = new ShellActivationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ShellApiControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ShellApiControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ShellApiControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ShellApiControl()
            {
                Message = new ShellApiControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ShellHistoryControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ShellHistoryControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ShellHistoryControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ShellHistoryControl()
            {
                Message = new ShellHistoryControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ShellHistoryStore
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ShellHistoryStoreMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ShellHistoryStore : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ShellHistoryStore()
            {
                Message = new ShellHistoryStoreMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ShellStore
    {
        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ShellStore : ICategory
        {
            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ShellThemeControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ShellThemeControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ShellThemeControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ShellThemeControl()
            {
                Message = new ShellThemeControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ShowDemo
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ShowDemoMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ShowDemo : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ShowDemo()
            {
                Message = new ShowDemoMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace SportsBettingGamingCycle
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class SportsBettingGamingCycleMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class SportsBettingGamingCycle : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public SportsBettingGamingCycle()
            {
                Message = new SportsBettingGamingCycleMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace SystemActivation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class SystemActivationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class SystemActivation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public SystemActivation()
            {
                Message = new SystemActivationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace SystemApiControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class SystemApiControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class SystemApiControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public SystemApiControl()
            {
                Message = new SystemApiControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ThemeActivation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ThemeActivationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ThemeActivation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ThemeActivation()
            {
                Message = new ThemeActivationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ThemeApiControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ThemeApiControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ThemeApiControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ThemeApiControl()
            {
                Message = new ThemeApiControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ThemeControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ThemeControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ThemeControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ThemeControl()
            {
                Message = new ThemeControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ThemedHandpay
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ThemedHandpayMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ThemedHandpay : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ThemedHandpay()
            {
                Message = new ThemedHandpayMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ThemeDisplayEvents
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class ThemeDisplayEventsMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ThemeDisplayEvents : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public ThemeDisplayEvents()
            {
                Message = new ThemeDisplayEventsMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace ThemeStore
    {
        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class ThemeStore : ICategory
        {
            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace TicketPrintControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class TicketPrintControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class TicketPrintControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public TicketPrintControl()
            {
                Message = new TicketPrintControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace TiltControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class TiltControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class TiltControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public TiltControl()
            {
                Message = new TiltControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace TournamentMeters
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class TournamentMetersMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class TournamentMeters : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public TournamentMeters()
            {
                Message = new TournamentMetersMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace TournamentSessionControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class TournamentSessionControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class TournamentSessionControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public TournamentSessionControl()
            {
                Message = new TournamentSessionControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace TransactionalCritDataRead
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class TransactionalCritDataReadMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class TransactionalCritDataRead : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public TransactionalCritDataRead()
            {
                Message = new TransactionalCritDataReadMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace TransactionalCritDataWrite
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class TransactionalCritDataWriteMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class TransactionalCritDataWrite : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public TransactionalCritDataWrite()
            {
                Message = new TransactionalCritDataWriteMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace TsmActivation
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class TsmActivationMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class TsmActivation : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public TsmActivation()
            {
                Message = new TsmActivationMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace TsmApiControl
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class TsmApiControlMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class TsmApiControl : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public TsmApiControl()
            {
                Message = new TsmApiControlMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace VKBingo
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        // ReSharper disable once InconsistentNaming
        public partial class VKBingoMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        // ReSharper disable once InconsistentNaming
        public partial class VKBingo : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public VKBingo()
            {
                Message = new VKBingoMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace VoucherRedemption
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class VoucherRedemptionMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class VoucherRedemption : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public VoucherRedemption()
            {
                Message = new VoucherRedemptionMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

    namespace WinMismatch
    {
        /// <summary>
        /// Partial class to add <see cref="ICategoryMessage"/>.
        /// </summary>
        public partial class WinMismatchMessage : ICategoryMessage
        {
        }

        /// <summary>
        /// Partial class to add <see cref="ICategory"/>.
        /// </summary>
        public partial class WinMismatch : ICategory
        {
            /// <summary>
            /// Default constructor to initialize the interior message.
            /// </summary>
            public WinMismatch()
            {
                Message = new WinMismatchMessage();
            }

            #region ICategory Members

            /// <inheritdoc/>
            ICategoryMessage ICategory.Message => Message;

            /// <inheritdoc/>
            IVersion ICategory.Version
            {
                get => Version;
                set => Version = (Version)value;
            }

            #endregion

        }

    }

}

