//-----------------------------------------------------------------------
// <copyright file = "ILegacyBonusControlCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using Schemas.Internal.LegacyBonusControl;

    /// <summary>
    /// LegacyBonusControl category of messages.  Category: 1004  Version: 1. Provides control to hold off bookkeeping
    /// of legacy bonuses controlled by the game.
    /// </summary>
    /// <remarks>
    /// All documentation is generated from the XSD schema files.
    /// </remarks>
    public interface ILegacyBonusControlCategory
    {
        /// <summary>
        /// Sent from a Bin to the foundation on the FI channel.  Notifies the Foundation that the bin is ready for the
        /// bonus to be booked (i.e. posted to the player credit balance).
        /// </summary>
        /// <param name="uniqueBonusId">
        /// The UniqueBonusId which has been processed by the Bin. If no UniqueBonusId is given, all open hold off
        /// requests are ending.
        /// </param>
        /// <param name="uniqueBonusIdSpecified">
        /// 
        /// </param>
        void EndLegacyBonusBookingHoldOff(uint uniqueBonusId, bool uniqueBonusIdSpecified);

        /// <summary>
        /// Sent from a Bin to the foundation on the FI channel. Enables the sending of legacy bonuses to the Bin (game)
        /// on arrival.
        /// </summary>
        /// <param name="enabled">
        /// Whether to enable sending legacy bonuses to the bin.
        /// </param>
        /// <returns>
        /// The content of the LegacyBonusNotificationEnableReply message.
        /// </returns>
        bool LegacyBonusNotificationEnable(bool enabled);

        /// <summary>
        /// Sent from a Bin to the foundation on the FI channel. Requests the host status of the protocol controlling
        /// the legacy bonusing.
        /// </summary>
        /// <returns>
        /// The content of the QueryLegacyBonusHostStatusReply message.
        /// </returns>
        LegacyBonusHostStatusData QueryLegacyBonusHostStatus();

        /// <summary>
        /// Sent from a Bin to the foundation on the FI channel. Requests the hold off status for legacy bonus
        /// bookkeeping. The status provides information on whether the notifications for arrived bonuses are sent and
        /// which bonuses are open for processing.
        /// </summary>
        /// <returns>
        /// The content of the response.  This element should be omitted when an Exception is present.
        /// </returns>
        QueryLegacyBonusStatusReplyContent QueryLegacyBonusStatus();

        /// <summary>
        /// Sent from a Bin to the foundation on the FI channel. Requests to hold off booking for the bonus until the
        /// game sends EndLegacyBonusBookingHoldOff.
        /// </summary>
        /// <param name="uniqueBonusId">
        /// The unique identifier of the bonus during transaction.
        /// </param>
        /// <returns>
        /// The content of the RequestLegacyBonusBookingHoldOffReply message.
        /// </returns>
        bool RequestLegacyBonusBookingHoldOff(uint uniqueBonusId);

    }

}

