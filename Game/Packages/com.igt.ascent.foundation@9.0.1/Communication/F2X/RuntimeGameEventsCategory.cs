//-----------------------------------------------------------------------
// <copyright file = "RuntimeGameEventsCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.RuntimeGameEvents;
    using Schemas.Internal.Types;

    /// <summary>
    /// Implementation of the F2X <see cref="RuntimeGameEvents"/> category.
    /// RuntimeGameEvents category. Defines messages for Australia specific protocols to be notified when particular
    /// game actions are taken.
    /// Category: 155; Major Version: 1
    /// </summary>
    public class RuntimeGameEventsCategory : F2XTransactionalCategoryBase<RuntimeGameEvents>, IRuntimeGameEventsCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="RuntimeGameEventsCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public RuntimeGameEventsCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.RuntimeGameEvents;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IRuntimeGameEventsCategory Members

        /// <inheritdoc/>
        public void GameBetMeterKeysUpdate(string horizontalKey, string verticalKey)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GameBetMeterKeysUpdateSend>();
            var content = (GameBetMeterKeysUpdateSend)request.Message.Item;
            content.HorizontalKey = horizontalKey;
            content.VerticalKey = verticalKey;

            var reply = SendMessageAndGetReply<GameBetMeterKeysUpdateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void GameBetMeterUpdate(Amount betPerLine, uint selectedLines)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GameBetMeterUpdateSend>();
            var content = (GameBetMeterUpdateSend)request.Message.Item;
            content.BetPerLine = betPerLine;
            content.SelectedLines = selectedLines;

            var reply = SendMessageAndGetReply<GameBetMeterUpdateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void GameSelectionStatusUpdate(bool active)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GameSelectionStatusUpdateSend>();
            var content = (GameSelectionStatusUpdateSend)request.Message.Item;
            content.Active = active;

            var reply = SendMessageAndGetReply<GameSelectionStatusUpdateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public RuntimeGameEventsConfiguration GetRuntimeGameEventsConfiguration()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetRuntimeGameEventsConfigurationSend>();

            var reply = SendMessageAndGetReply<GetRuntimeGameEventsConfigurationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.RuntimeGameEventsConfiguration;
        }

        /// <inheritdoc/>
        public void PlayerChoiceUpdate(uint playerChoiceIndex)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<PlayerChoiceUpdateSend>();
            var content = (PlayerChoiceUpdateSend)request.Message.Item;
            content.PlayerChoiceIndex = playerChoiceIndex;

            var reply = SendMessageAndGetReply<PlayerChoiceUpdateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void WaitingForGenericInputStatusUpdate(bool waitingForInput)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<WaitingForGenericInputStatusUpdateSend>();
            var content = (WaitingForGenericInputStatusUpdateSend)request.Message.Item;
            content.WaitingForInput = waitingForInput;

            var reply = SendMessageAndGetReply<WaitingForGenericInputStatusUpdateReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

    }

}

