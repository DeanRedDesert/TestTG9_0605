//-----------------------------------------------------------------------
// <copyright file = "GameCycleBettingCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using F2XTransport;
    using Schemas.Internal.GameCycleBetting;
    using Schemas.Internal.Types;

    /// <summary>
    /// Implementation of the F2X <see cref="GameCycleBetting"/> category.
    /// GameCycleBetting category of messages, containing messages enabling a coplayer to place bets.
    /// Category: 1017; Major Version: 1
    /// </summary>
    public class GameCycleBettingCategory : F2XTransactionalCategoryBase<GameCycleBetting>, IGameCycleBettingCategory
    {
        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameCycleBettingCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public GameCycleBettingCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.GameCycleBetting;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IGameCycleBettingCategory Members

        /// <inheritdoc/>
        public bool CommitBet(Amount betAmount)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<CommitBetSend>();
            var content = (CommitBetSend)request.Message.Item;
            content.BetAmount = betAmount;

            var reply = SendMessageAndGetReply<CommitBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.BetCommitted;
        }

        /// <inheritdoc/>
        public ConfigData GetConfigData()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetConfigDataSend>();

            var reply = SendMessageAndGetReply<GetConfigDataReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.ConfigData;
        }

        /// <inheritdoc/>
        public bool PlaceBet(Amount betAmount)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<PlaceBetSend>();
            var content = (PlaceBetSend)request.Message.Item;
            content.BetAmount = betAmount;

            var reply = SendMessageAndGetReply<PlaceBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.BetPlaced;
        }

        /// <inheritdoc/>
        public void PlaceStartingBet(bool isMaxBet)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<PlaceStartingBetSend>();
            var content = (PlaceStartingBetSend)request.Message.Item;
            content.IsMaxBet = isMaxBet;

            var reply = SendMessageAndGetReply<PlaceStartingBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        /// <inheritdoc/>
        public void UncommitBet()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<UncommitBetSend>();

            var reply = SendMessageAndGetReply<UncommitBetReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

    }

}

