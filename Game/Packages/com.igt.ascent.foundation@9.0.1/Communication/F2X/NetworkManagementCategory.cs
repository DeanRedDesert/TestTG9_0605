//-----------------------------------------------------------------------
// <copyright file = "NetworkManagementCategory.cs" company = "IGT">
//     Copyright (c) 2023 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.NetworkManagement;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="NetworkManagement"/> category.
    /// The F2X NetworkManagement category of messages assists the client in modifying specific exposed behavior on the
    /// Network Manager.  For example, if a system extension needs to control routing of TCP messages through a NIC,
    /// this category should be used to do so.
    /// Category: 157; Major Version: 1
    /// </summary>
    public class NetworkManagementCategory : F2XTransactionalCategoryBase<NetworkManagement>, INetworkManagementCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="NetworkManagementCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        public NetworkManagementCategory(IF2XTransport transport)
            : base(transport)
        {
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.NetworkManagement;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by NetworkManagementCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region INetworkManagementCategory Members

        /// <inheritdoc/>
        public RoutingTableResult AddIpv4RoutingTableEntry(Ipv4RoutingTableEntry ipv4RoutingTableEntry)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<AddIpv4RoutingTableEntrySend>();
            var content = (AddIpv4RoutingTableEntrySend)request.Message.Item;
            content.Ipv4RoutingTableEntry = ipv4RoutingTableEntry;

            var reply = SendMessageAndGetReply<AddIpv4RoutingTableEntryReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Status;
        }

        /// <inheritdoc/>
        public IEnumerable<NicInformation> GetNicInformation()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetNicInformationSend>();

            var reply = SendMessageAndGetReply<GetNicInformationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.NicInformationList;
        }

        #endregion

    }

}

