//-----------------------------------------------------------------------
// <copyright file = "GameCycleSupervisionCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------
// This file requires manual editing when merging.
// All changes are marked with "MANUAL EDIT:"
//-----------------------------------------------------------------------


namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using F2XTransport;
    using Schemas.Internal.GameCycleSupervision;
    using Version = Schemas.Internal.Types.Version;

    /// <summary>
    /// Implementation of the F2X <see cref="GameCycleSupervision"/> category.
    /// Game Cycle Supervision category of messages.  Category: 3016  Version: 1
    /// Category: 3016; Major Version: 1
    /// </summary>
    public class GameCycleSupervisionCategory : F2XTransactionalCategoryBase<GameCycleSupervision>, IGameCycleSupervisionCategory, IMultiVersionSupport
    {
        #region Fields

        /// <summary>
        /// Object which implements the GameCycleSupervisionCategory callbacks.
        /// </summary>
        private readonly IGameCycleSupervisionCategoryCallbacks callbackHandler;

        /// <summary>
        /// All versions supported by this category class.
        /// </summary>
        private readonly List<Version> supportedVersions = new List<Version>
        {
            new Version(1, 0),
            new Version(1, 1)
        };

        /// <summary>
        /// The version to use for communications by this category.
        /// Initialized to 0.0. Will be set by <see cref="SetVersion"/>.
        /// </summary>
        private Version effectiveVersion = new Version(0, 0);

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="GameCycleSupervisionCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// GameCycleSupervisionCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public GameCycleSupervisionCategory(IF2XTransport transport, IGameCycleSupervisionCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<GameCycleModificationEventSend>(HandleGameCycleModificationEvent);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.GameCycleSupervision;

        /// <inheritdoc/>
        public override uint MajorVersion => effectiveVersion.MajorVersion;

        /// <inheritdoc/>
        public override uint MinorVersion => effectiveVersion.MinorVersion;

        #endregion

        #region IMultiVersionSupport Members

        /// <inheritdoc/>
        public void SetVersion(uint major, uint minor)
        {
            var version = new Version(major, minor);

            if(!supportedVersions.Contains(version))
            {
                throw new ArgumentException(
                    $"{version} is not supported by GameCycleSupervisionCategory class.");
            }

            effectiveVersion = version;
        }

        #endregion

        #region IGameCycleSupervisionCategory Members

        /// <inheritdoc/>
        public IEnumerable<GameCycleBehaviorModifier> ClearGameCycleBehaviorModifier(IEnumerable<GameCycleBehaviorModifier> behaviorModifiers)
        {
            // "MANUAL EDIT: Check to ensure that the new enumeration is not used with pre 1.1 versions.
            var gameCycleBehaviorModifiers = behaviorModifiers.ToList();
            if(MajorVersion == 1 && MinorVersion < 1 && gameCycleBehaviorModifiers.Contains(GameCycleBehaviorModifier.PreventGameStart))
            {
                throw new ArgumentOutOfRangeException("behaviorModifiers", "GameCycleBehaviorModifier.PreventGameStart cannot" +
                                                      " be used in pre-1.1 version categories.");
            }

            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<ClearGameCycleBehaviorModifierSend>();
            var content = (ClearGameCycleBehaviorModifierSend)request.Message.Item;
            content.BehaviorModifiers = gameCycleBehaviorModifiers.ToList();

            var reply = SendMessageAndGetReply<ClearGameCycleBehaviorModifierReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.EnabledBehaviorModifiers;
        }

        /// <inheritdoc/>
        public IEnumerable<GameCycleBehaviorModifier> EnableGameCycleBehaviorModifiers(IEnumerable<GameCycleBehaviorModifier> behaviorModifiers)
        {
            // "MANUAL EDIT: Check to ensure that the new enumeration is not used with pre 1.1 versions.
            var gameCycleBehaviorModifiers = behaviorModifiers.ToList();
            if(MajorVersion == 1 && MinorVersion < 1 && gameCycleBehaviorModifiers.Contains(GameCycleBehaviorModifier.PreventGameStart))
            {
                throw new ArgumentOutOfRangeException("behaviorModifiers", "GameCycleBehaviorModifier.PreventGameStart cannot" +
                                                                           " be used in pre-1.1 version categories.");
            }

            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<EnableGameCycleBehaviorModifiersSend>();
            var content = (EnableGameCycleBehaviorModifiersSend)request.Message.Item;
            content.BehaviorModifiers = gameCycleBehaviorModifiers;

            var reply = SendMessageAndGetReply<EnableGameCycleBehaviorModifiersReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.EnabledBehaviorModifiers;
        }

        /// <inheritdoc/>
        public void SetGameCycleModificationEventRegistration(IEnumerable<GameCycleModificationEventType> events)
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<SetGameCycleModificationEventRegistrationSend>();
            var content = (SetGameCycleModificationEventRegistrationSend)request.Message.Item;
            content.Events = events.ToList();

            var reply = SendMessageAndGetReply<SetGameCycleModificationEventRegistrationReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the GameCycleModificationEventSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleGameCycleModificationEvent(GameCycleModificationEventSend message)
        {
            var errorMessage = callbackHandler.ProcessGameCycleModificationEvent(message.GameCycleModificationEvent);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<GameCycleModificationEventReply>(errorCode, errorMessage);
            SendFoundationChannelResponse(replyMessage);
        }

        #endregion

    }

}

