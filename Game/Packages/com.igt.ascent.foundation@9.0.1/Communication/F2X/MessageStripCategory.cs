//-----------------------------------------------------------------------
// <copyright file = "MessageStripCategory.cs" company = "IGT">
//     Copyright (c) 2020 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by C3G.
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Communication.Foundation.F2X
{
    using System;
    using System.Collections.Generic;
    using F2XTransport;
    using Schemas.Internal.MessageStrip;

    /// <summary>
    /// Implementation of the F2X <see cref="MessageStrip"/> category.
    /// Message Strip category for the Foundation to send its clients a list of messages to be displayed on a Message
    /// Strip.
    /// Category: 152; Major Version: 1
    /// </summary>
    public class MessageStripCategory : F2XTransactionalCategoryBase<MessageStrip>, IMessageStripCategory
    {
        #region Fields

        /// <summary>
        /// Object which implements the MessageStripCategory callbacks.
        /// </summary>
        private readonly IMessageStripCategoryCallbacks callbackHandler;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a new <see cref="MessageStripCategory"/>.
        /// </summary>
        /// <param name="transport">
        /// Transport that this category will be installed in.
        /// </param>
        /// <param name="callbackHandler">
        /// MessageStripCategory callback handler.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if the <paramref name="callbackHandler"/> is null.
        /// </exception>
        public MessageStripCategory(IF2XTransport transport, IMessageStripCategoryCallbacks callbackHandler)
            : base(transport)
        {
            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));
            AddMessagehandler<UpdateMessagesSend>(HandleUpdateMessages);
        }

        #endregion

        #region IApiCategory Members

        /// <inheritdoc/>
        public override MessageCategory Category => MessageCategory.MessageStrip;

        /// <inheritdoc/>
        public override uint MajorVersion => 1;

        /// <inheritdoc/>
        public override uint MinorVersion => 0;

        #endregion

        #region IMessageStripCategory Members

        /// <inheritdoc/>
        public IEnumerable<Message> GetMessages()
        {
            Transport.MustHaveHeavyweightTransaction();
            var request = CreateTransactionalRequest<GetMessagesSend>();

            var reply = SendMessageAndGetReply<GetMessagesReply>(Channel.Foundation, request);
            CheckReply(reply.Exception);
            return reply.Content.Messages;
        }

        #endregion

        #region Message Handlers

        /// <summary>
        /// Handler for the UpdateMessagesSend message.
        /// </summary>
        /// <param name="message">
        /// Message from the Foundation to handle.
        /// </param>
        private void HandleUpdateMessages(UpdateMessagesSend message)
        {
            var errorMessage = callbackHandler.ProcessUpdateMessages(message.Messages);
            var errorCode = string.IsNullOrEmpty(errorMessage) ? 0 : 1;
            var replyMessage = CreateReply<UpdateMessagesReply>(errorCode, errorMessage);
            SendFoundationNonTransactionalChannelResponse(replyMessage);
        }

        #endregion

    }

}

