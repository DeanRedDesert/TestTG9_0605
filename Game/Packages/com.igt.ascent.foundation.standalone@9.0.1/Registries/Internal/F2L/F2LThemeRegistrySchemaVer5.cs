// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2L.F2LThemeRegistryVer5</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2;IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;CustomConfigItemsType=F2LRegistryTypeVer2.CustomConfigItemsType;PropertiesTypeSection=F2LRegistryTypeVer2.PropertiesTypeSection</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2L.F2LThemeRegistryVer5
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using CustomConfigItemsType=F2LRegistryTypeVer2.CustomConfigItemsType;
    using PropertiesTypeSection=F2LRegistryTypeVer2.PropertiesTypeSection;
    using System.Xml;
    using System.Collections.Generic;


    /// <summary>
    /// Game discovery registry for describing a theme and the initial state of theme related configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    [XmlRootAttribute(Namespace="F2LThemeRegistryVer5.xsd", IsNullable=false)]
    public partial class ThemeRegistry
    {
        #region Private fields
        private string themeNameKeyField;
        private string binRegistryField;
        private string shellRegistryField;
        private string reportRegistryField;
        private string g2SThemeIdField;
        private string sAPThemeIdField;
        private ThemeRegistryType typeField;
        private ThemeRegistryAccountingType accountingTypeField;
        private string resourceDirectoryField;
        private ThemeRegistryThemeSelectionMenu themeSelectionMenuField;
        private List<HierarchicalCustomMenuTabNode> hierarchicalCustomMenuTabsField;
        private ThemeRegistryTagDataFile tagDataFileField;
        private ThemeRegistryConfigurationRuleScript configurationRuleScriptField;
        private CustomConfigItemsType customConfigItemsField;
        private G2SCustomConfigItemMappingType g2SCustomConfigItemMappingField;
        private ThemeRegistryMaxBetResolution maxBetResolutionField;
        private MaxBetType buttonPanelMinBetField;
        private MaxBetType maxBetField;
        private System.Nullable<ThemeRegistryMaxBetButtonBehaviorSupported> maxBetButtonBehaviorSupportedField;
        private List<PropertiesTypeSection> propertiesField;
        private ThemeRegistryEnableRestriction enableRestrictionField;
        private System.Nullable<ushort> maxNumberOfEnabledDenominationsField;
        private System.Nullable<uint> wapSystemIdField;
        private bool? autoPlaySupportedField;
        private bool? autoPlayConfirmationSupportedField;
        private ThemeRegistrySyncSation syncSationField;
        private SerialIPPConfiguration serialIPPField;
        private ThemeSpecificMenuPages themeSpecificMenuPagesField;
        private string handpayOverrideSoundKeyField;
        private List<string> supportedCulturesField;
        private System.Nullable<byte> maxNumberOfEnabledCulturesField;
        private ThemeRegistryVBPConfigurationFile vBPConfigurationFileField;
        private ThemeRegistryHardwareRequirements hardwareRequirementsField;
        private System.Nullable<byte> daysToDisplayAsNewField;
        private ThemeRegistryAttractConfiguration attractConfigurationField;
        private List<ExtensionImportListExtensionImport> extensionImportListField;
        private bool? roundWagerUpPlayoffSupportedField;
        private bool? utilityModeSupportedField;
        private bool? winCappingSupportedField;
        private ThemeRegistryLineSelectionConfiguration lineSelectionConfigurationField;
        #endregion

        /// <summary>
        /// ThemeRegistry class constructor
        /// </summary>
        public ThemeRegistry()
        {
            extensionImportListField = new List<ExtensionImportListExtensionImport>();
            supportedCulturesField = new List<string>();
            propertiesField = new List<PropertiesTypeSection>();
            hierarchicalCustomMenuTabsField = new List<HierarchicalCustomMenuTabNode>();
            accountingTypeField = ThemeRegistryAccountingType.LegacyCasinoGame;
            enableRestrictionField = ThemeRegistryEnableRestriction.None;
        }

        /// <summary>
        /// Key used to resolve the localized Theme Name, used for display purposes as assigned by game designer.
        /// </summary>
        public string ThemeNameKey
        {
            get
            {
                return themeNameKeyField;
            }
            set
            {
                themeNameKeyField = value;
            }
        }

        /// <summary>
        /// Relative path to a bin registry to which this theme belongs.
        /// Optional, if specified, indicate that this theme registry is pointing to a game Bin.
        /// NOTE: Must have either BinRegistry or ShellRegistry (and ONLY one) shall be existing.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string BinRegistry
        {
            get
            {
                return binRegistryField;
            }
            set
            {
                binRegistryField = value;
            }
        }

        /// <summary>
        /// Relative path to a shell registry to which this theme belongs.
        /// Optional, if specified, indicate that this theme registry is pointing to a game Shell.
        /// NOTE: Must have either BinRegistry or ShellRegistry (and ONLY one) shall be existing.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ShellRegistry
        {
            get
            {
                return shellRegistryField;
            }
            set
            {
                shellRegistryField = value;
            }
        }

        /// <summary>
        /// Relative path to report registry that will handle reporting functions for the theme.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ReportRegistry
        {
            get
            {
                return reportRegistryField;
            }
            set
            {
                reportRegistryField = value;
            }
        }

        /// <summary>
        /// Unique G2S theme identifier.  This ID must be unique across ALL themes in ALL packages to satisfy uniqueness in the G2S domain.
        /// </summary>
        public string G2SThemeId
        {
            get
            {
                return g2SThemeIdField;
            }
            set
            {
                g2SThemeIdField = value;
            }
        }

        /// <summary>
        /// Unique SAP theme identifier with fixed length of 3 characters. This ID must be unique across all themes period.
        /// </summary>
        public string SAPThemeId
        {
            get
            {
                return sAPThemeIdField;
            }
            set
            {
                sAPThemeIdField = value;
            }
        }

        /// <summary>
        /// Theme type (e.g. Slot, Poker, Keno, etc.).  Used in grouping themes for Operator menus.  Restricted by enumeration.
        /// </summary>
        public ThemeRegistryType Type
        {
            get
            {
                return typeField;
            }
            set
            {
                typeField = value;
            }
        }

        /// <summary>
        /// Used in hybrid accounting to differentiate between live table vs legacy slot games.  Restricted by enumeration.
        /// </summary>
        public ThemeRegistryAccountingType AccountingType
        {
            get
            {
                return accountingTypeField;
            }
            set
            {
                accountingTypeField = value;
            }
        }

        /// <summary>
        /// Specifies the resource directory relative to the package root containing resources and localization tables.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ResourceDirectory
        {
            get
            {
                return resourceDirectoryField;
            }
            set
            {
                resourceDirectoryField = value;
            }
        }

        /// <summary>
        /// Information and resources required to present the theme to the player.
        /// </summary>
        public ThemeRegistryThemeSelectionMenu ThemeSelectionMenu
        {
            get
            {
                return themeSelectionMenuField;
            }
            set
            {
                themeSelectionMenuField = value;
            }
        }

        /// <summary>
        /// The multilayered filtering on the game setup menu page as well as the chooser. Filtering depths beyond 2 are not officially supported within the menu page and filtering depths for custom choosers will be chooser specific. If this and the CustomMenuTabs are present the CustomMenuTabs data will be ignored.
        /// </summary>
        [XmlArrayItemAttribute("Tabs", IsNullable=false)]
        public List<HierarchicalCustomMenuTabNode> HierarchicalCustomMenuTabs
        {
            get
            {
                return hierarchicalCustomMenuTabsField;
            }
            set
            {
                hierarchicalCustomMenuTabsField = value;
            }
        }

        /// <summary>
        /// Custom theme related file for use with the game.  Passed to the game during startup.  Opaque to the Foundation.
        /// </summary>
        public ThemeRegistryTagDataFile TagDataFile
        {
            get
            {
                return tagDataFileField;
            }
            set
            {
                tagDataFileField = value;
            }
        }

        /// <summary>
        /// Relative path to the configuration rule script.
        /// </summary>
        public ThemeRegistryConfigurationRuleScript ConfigurationRuleScript
        {
            get
            {
                return configurationRuleScriptField;
            }
            set
            {
                configurationRuleScriptField = value;
            }
        }

        /// <summary>
        /// Contains all custom configuration items being declared for the theme scope.  Custom config items are items stored for the game by the Foundation, but are not otherwise interpreted or configured except through the use of game specific plug-in menus and config rule scripts.
        /// </summary>
        public CustomConfigItemsType CustomConfigItems
        {
            get
            {
                return customConfigItemsField;
            }
            set
            {
                customConfigItemsField = value;
            }
        }

        /// <summary>
        /// Contains a listing of G2S configuration items that need to be mapped to the theme's custom configuration items, if supported.
        /// </summary>
        public G2SCustomConfigItemMappingType G2SCustomConfigItemMapping
        {
            get
            {
                return g2SCustomConfigItemMappingField;
            }
            set
            {
                g2SCustomConfigItemMappingField = value;
            }
        }

        /// <summary>
        /// Specifies that the max bet is configured as either "per theme", "per payvar", or "per payvar denomination".  If it is "per theme" then the max bet is defined in the theme registry; else it defined in the payvar.  This should be renamed "BetResolution" in the next major release.
        /// </summary>
        public ThemeRegistryMaxBetResolution MaxBetResolution
        {
            get
            {
                return maxBetResolutionField;
            }
            set
            {
                maxBetResolutionField = value;
            }
        }

        /// <summary>
        /// Minimum bet in credits that the button panel is allowed to display. When MaxBetResolution is "per theme" then the ButtonPanelMinBet element must exist in ThemeRegistry or it is defaulted to 0 to indicate there is no button panel min bet, otherwise min bet is setup in the payvar registry.
        /// </summary>
        public MaxBetType ButtonPanelMinBet
        {
            get
            {
                return buttonPanelMinBetField;
            }
            set
            {
                buttonPanelMinBetField = value;
            }
        }

        /// <summary>
        /// Maximum bet in credits. When MaxBetResolution is "per theme" then the MaxBet element must exist in ThemeRegistry, otherwise max bet is setup in the payvar registry.
        /// </summary>
        public MaxBetType MaxBet
        {
            get
            {
                return maxBetField;
            }
            set
            {
                maxBetField = value;
            }
        }

        /// <summary>
        /// Specifies the supported behavior of the max bet button.  "BetMaxCreditsOnly" should be specified if the max bet button can only be used when credits are greater than or equal to max bet.  "BetAvailableCredits" should be specified if the max bet button can be used to bet up to the available credits.  If not present, defaults to "BetMaxCreditsOnly"
        /// </summary>
        public ThemeRegistryMaxBetButtonBehaviorSupported MaxBetButtonBehaviorSupported
        {
            get
            {
                if (maxBetButtonBehaviorSupportedField.HasValue)
                {
                    return maxBetButtonBehaviorSupportedField.Value;
                }
                else
                {
                    return default(ThemeRegistryMaxBetButtonBehaviorSupported);
                }
            }
            set
            {
                maxBetButtonBehaviorSupportedField = value;
            }
        }

        [XmlIgnore]
        public bool MaxBetButtonBehaviorSupportedSpecified
        {
            get
            {
                return maxBetButtonBehaviorSupportedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    maxBetButtonBehaviorSupportedField = null;
                }
            }
        }

        /// <summary>
        /// Provides flexible/loosely coupled way of declaring static properties visible to the AI/Foundation.  Example: An optional AI package may contain a  custom Theme Selection Menu that may use properties to identify games that it is compatible with it.  Properties should be organized under sections and should be viewed as Key, Value pairs.
        /// </summary>
        [XmlArrayItemAttribute("Section", Namespace="F2LRegistryTypeVer2.xsd", IsNullable=false)]
        public List<PropertiesTypeSection> Properties
        {
            get
            {
                return propertiesField;
            }
            set
            {
                propertiesField = value;
            }
        }

        /// <summary>
        /// Specifies restrictions that must be met for enabling this theme.
        /// </summary>
        public ThemeRegistryEnableRestriction EnableRestriction
        {
            get
            {
                return enableRestrictionField;
            }
            set
            {
                enableRestrictionField = value;
            }
        }

        /// <summary>
        /// Used to determine up to how many denoms may be enabled for the theme.   If this element is not present then the maximum allowed by the Foundation/jurisdiction will be allowed.
        /// </summary>
        public ushort MaxNumberOfEnabledDenominations
        {
            get
            {
                if (maxNumberOfEnabledDenominationsField.HasValue)
                {
                    return maxNumberOfEnabledDenominationsField.Value;
                }
                else
                {
                    return default(ushort);
                }
            }
            set
            {
                maxNumberOfEnabledDenominationsField = value;
            }
        }

        [XmlIgnore]
        public bool MaxNumberOfEnabledDenominationsSpecified
        {
            get
            {
                return maxNumberOfEnabledDenominationsField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    maxNumberOfEnabledDenominationsField = null;
                }
            }
        }

        /// <summary>
        /// Use by WAP progressive controllers.  This decimal number (base 10) is sent by the game to the CCOM during communications to ensure that both are configured for the same WAP.  All non-WAP games are, by default, WAMM games and this field will be set to 40 by the foundation if this element is omitted.  DEPRECATED in favor of Progressive Concept elements and Link Maps.
        /// </summary>
        public uint WapSystemId
        {
            get
            {
                if (wapSystemIdField.HasValue)
                {
                    return wapSystemIdField.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                wapSystemIdField = value;
            }
        }

        [XmlIgnore]
        public bool WapSystemIdSpecified
        {
            get
            {
                return wapSystemIdField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    wapSystemIdField = null;
                }
            }
        }

        /// <summary>
        /// True if this theme supports player autoplay.  This is an optional element with a default value of "false" if not present.
        /// </summary>
        public bool AutoPlaySupported
        {
            get
            {
                if (autoPlaySupportedField.HasValue)
                {
                    return autoPlaySupportedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                autoPlaySupportedField = value;
            }
        }

        [XmlIgnore]
        public bool AutoPlaySupportedSpecified
        {
            get
            {
                return autoPlaySupportedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    autoPlaySupportedField = null;
                }
            }
        }

        /// <summary>
        /// True if this theme supports confirmation before honoring a player’s request to start autoplay. Autoplay confirmation requires the player to confirm (via a second touch/command) a request to start autoplay as required by some jurisdictions.  This is an optional element with a default value of "false" if not present.
        /// </summary>
        public bool AutoPlayConfirmationSupported
        {
            get
            {
                if (autoPlayConfirmationSupportedField.HasValue)
                {
                    return autoPlayConfirmationSupportedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                autoPlayConfirmationSupportedField = value;
            }
        }

        [XmlIgnore]
        public bool AutoPlayConfirmationSupportedSpecified
        {
            get
            {
                return autoPlayConfirmationSupportedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    autoPlayConfirmationSupportedField = null;
                }
            }
        }

        /// <summary>
        /// Provides configuration information for the SyncSation feature.
        /// </summary>
        public ThemeRegistrySyncSation SyncSation
        {
            get
            {
                return syncSationField;
            }
            set
            {
                syncSationField = value;
            }
        }

        /// <summary>
        /// IGT Progressive Protocol configuration data. Required if theme is to support IPP.   DEPRECATED in favor of Progressive Concept elements and Link Maps.
        /// </summary>
        public SerialIPPConfiguration SerialIPP
        {
            get
            {
                return serialIPPField;
            }
            set
            {
                serialIPPField = value;
            }
        }

        public ThemeSpecificMenuPages ThemeSpecificMenuPages
        {
            get
            {
                return themeSpecificMenuPagesField;
            }
            set
            {
                themeSpecificMenuPagesField = value;
            }
        }

        /// <summary>
        /// Localized reosource key to the sound file to be played/looped during a handpay lock up of this theme. This element is optional and if present will be played in place of the Foundation's default handpay sound.  This is a localized value.
        /// </summary>
        public string HandpayOverrideSoundKey
        {
            get
            {
                return handpayOverrideSoundKeyField;
            }
            set
            {
                handpayOverrideSoundKeyField = value;
            }
        }

        /// <summary>
        /// The list of cultures supported by the theme.
        /// </summary>
        [XmlArrayItemAttribute("Culture", IsNullable=false)]
        public List<string> SupportedCultures
        {
            get
            {
                return supportedCulturesField;
            }
            set
            {
                supportedCulturesField = value;
            }
        }

        /// <summary>
        /// Maximum number of cultures that the foundation is allowed to enable for the theme concurrently.  If not present, defaults to 2.
        /// </summary>
        public byte MaxNumberOfEnabledCultures
        {
            get
            {
                if (maxNumberOfEnabledCulturesField.HasValue)
                {
                    return maxNumberOfEnabledCulturesField.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                maxNumberOfEnabledCulturesField = value;
            }
        }

        [XmlIgnore]
        public bool MaxNumberOfEnabledCulturesSpecified
        {
            get
            {
                return maxNumberOfEnabledCulturesField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    maxNumberOfEnabledCulturesField = null;
                }
            }
        }

        /// <summary>
        /// Virtual Button Panel configuration file. Used to configure the Virtual Button Panel for themes that do not support the DPP.
        /// </summary>
        public ThemeRegistryVBPConfigurationFile VBPConfigurationFile
        {
            get
            {
                return vBPConfigurationFileField;
            }
            set
            {
                vBPConfigurationFileField = value;
            }
        }

        /// <summary>
        /// Theme specific hardware requirements.
        /// </summary>
        public ThemeRegistryHardwareRequirements HardwareRequirements
        {
            get
            {
                return hardwareRequirementsField;
            }
            set
            {
                hardwareRequirementsField = value;
            }
        }

        /// <summary>
        /// The initial number of days to display as a "new" theme, from the install date.  0 indicates never display as "new."  If not present, defaults to 60.
        /// </summary>
        public byte DaysToDisplayAsNew
        {
            get
            {
                if (daysToDisplayAsNewField.HasValue)
                {
                    return daysToDisplayAsNewField.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                daysToDisplayAsNewField = value;
            }
        }

        [XmlIgnore]
        public bool DaysToDisplayAsNewSpecified
        {
            get
            {
                return daysToDisplayAsNewField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    daysToDisplayAsNewField = null;
                }
            }
        }

        /// <summary>
        /// Attract related configuration items.
        /// </summary>
        public ThemeRegistryAttractConfiguration AttractConfiguration
        {
            get
            {
                return attractConfigurationField;
            }
            set
            {
                attractConfigurationField = value;
            }
        }

        /// <summary>
        /// Defines extensions (i.e. add-on content) that may be linked to this theme.
        /// </summary>
        [XmlArrayAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
        [XmlArrayItemAttribute("ExtensionImport", IsNullable=false)]
        public List<ExtensionImportListExtensionImport> ExtensionImportList
        {
            get
            {
                return extensionImportListField;
            }
            set
            {
                extensionImportListField = value;
            }
        }

        /// <summary>
        /// True if this theme supports round wager up playoff.  This is an optional element with a default value of "false" if not present.
        /// </summary>
        public bool RoundWagerUpPlayoffSupported
        {
            get
            {
                if (roundWagerUpPlayoffSupportedField.HasValue)
                {
                    return roundWagerUpPlayoffSupportedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                roundWagerUpPlayoffSupportedField = value;
            }
        }

        [XmlIgnore]
        public bool RoundWagerUpPlayoffSupportedSpecified
        {
            get
            {
                return roundWagerUpPlayoffSupportedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    roundWagerUpPlayoffSupportedField = null;
                }
            }
        }

        /// <summary>
        /// True if this theme supports utility mode (e.g. game evaluation diagnostic).  This is an optional element with a default value of "true" if not present.
        /// </summary>
        public bool UtilityModeSupported
        {
            get
            {
                if (utilityModeSupportedField.HasValue)
                {
                    return utilityModeSupportedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                utilityModeSupportedField = value;
            }
        }

        [XmlIgnore]
        public bool UtilityModeSupportedSpecified
        {
            get
            {
                return utilityModeSupportedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    utilityModeSupportedField = null;
                }
            }
        }

        /// <summary>
        /// True if this theme supports win capping.  This is an optional element with a default value of "false" if not present.
        /// </summary>
        public bool WinCappingSupported
        {
            get
            {
                if (winCappingSupportedField.HasValue)
                {
                    return winCappingSupportedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                winCappingSupportedField = value;
            }
        }

        [XmlIgnore]
        public bool WinCappingSupportedSpecified
        {
            get
            {
                return winCappingSupportedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    winCappingSupportedField = null;
                }
            }
        }

        /// <summary>
        /// Line selection configuration.
        /// </summary>
        public ThemeRegistryLineSelectionConfiguration LineSelectionConfiguration
        {
            get
            {
                return lineSelectionConfigurationField;
            }
            set
            {
                lineSelectionConfigurationField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public enum ThemeRegistryType
    {
        Slot,
        Keno,
        Poker,
        Blackjack,
        Bingo,
        Other,
        VideoKingBingo,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public enum ThemeRegistryAccountingType
    {
        LegacyCasinoGame,
        LiveTableGame,
    }

    /// <summary>
    /// Information and resources required to present the theme to the player.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeRegistryThemeSelectionMenu
    {
        #region Private fields
        private string themeIconKeyField;
        private string themeLogoKeyField;
        private string themePromoKeyField;
        private string themeLoadingDisplayKeyField;
        private string themeAttractKeyField;
        private List<ThemeRegistryThemeSelectionMenuMenuTab> menuTabsField;
        private List<string> customMenuTabsField;
        #endregion

        /// <summary>
        /// ThemeRegistryThemeSelectionMenu class constructor
        /// </summary>
        public ThemeRegistryThemeSelectionMenu()
        {
            customMenuTabsField = new List<string>();
            menuTabsField = new List<ThemeRegistryThemeSelectionMenuMenuTab>();
        }

        /// <summary>
        /// Image resource containing an icon used for theme selection (e.g. theme selection menu). This is a localized value.
        /// </summary>
        public string ThemeIconKey
        {
            get
            {
                return themeIconKeyField;
            }
            set
            {
                themeIconKeyField = value;
            }
        }

        /// <summary>
        /// Image resource containing a logo used for larger display areas (e.g. the top box). This is a localized value.
        /// </summary>
        public string ThemeLogoKey
        {
            get
            {
                return themeLogoKeyField;
            }
            set
            {
                themeLogoKeyField = value;
            }
        }

        /// <summary>
        /// Image resource used to promote the theme to the player in the Theme Selection Menu (e.g. advertises major game features). This is a localized value.
        /// </summary>
        public string ThemePromoKey
        {
            get
            {
                return themePromoKeyField;
            }
            set
            {
                themePromoKeyField = value;
            }
        }

        /// <summary>
        /// Image  resouce to be used while the theme is loading. This is a localized value.
        /// </summary>
        public string ThemeLoadingDisplayKey
        {
            get
            {
                return themeLoadingDisplayKeyField;
            }
            set
            {
                themeLoadingDisplayKeyField = value;
            }
        }

        /// <summary>
        /// Movie resource to be used for attract (on the top box). This is a localized value.
        /// </summary>
        public string ThemeAttractKey
        {
            get
            {
                return themeAttractKeyField;
            }
            set
            {
                themeAttractKeyField = value;
            }
        }

        /// <summary>
        /// The tab(s) on the theme selection menu where the theme should appear.  If this optional element is missing it indicates that the theme will only show up on the "All Games" tab (and any custom tabs as defined elsewhere).
        /// </summary>
        [XmlArrayItemAttribute("MenuTab", IsNullable=false)]
        public List<ThemeRegistryThemeSelectionMenuMenuTab> MenuTabs
        {
            get
            {
                return menuTabsField;
            }
            set
            {
                menuTabsField = value;
            }
        }

        /// <summary>
        /// The tab(s) on the theme selection menu where the theme should appear.  This is a custom tab that is not part of the standard enumerated list.
        /// </summary>
        [XmlArrayItemAttribute("CustomMenuTabKey", IsNullable=false)]
        public List<string> CustomMenuTabs
        {
            get
            {
                return customMenuTabsField;
            }
            set
            {
                customMenuTabsField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public enum ThemeRegistryThemeSelectionMenuMenuTab
    {
        Blackjack,
        iGame,
        Keno,
        Poker,
        Reel,
    }

    /// <summary>
    /// IGT Progressive Protocol configuration data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class SerialIPPConfiguration
    {
        #region Private fields
        private byte bonusTypeField;
        private bool? allowNonIPPControllerField;
        private bool allowMultipleProgressiveControllersField;
        private List<SerialIPPConfigurationContribution> matchContributionLevelsField;
        #endregion

        /// <summary>
        /// SerialIPPConfiguration class constructor
        /// </summary>
        public SerialIPPConfiguration()
        {
            matchContributionLevelsField = new List<SerialIPPConfigurationContribution>();
        }

        /// <summary>
        /// The designated IPP identifier for this theme.
        /// This value is agreed upon between the IPP controller and the theme, and must match in order for the controller to begin communication with the EGM.
        /// </summary>
        public byte BonusType
        {
            get
            {
                return bonusTypeField;
            }
            set
            {
                bonusTypeField = value;
            }
        }

        /// <summary>
        /// True if this theme allows non-IPP controllers when "BonusType" is non-zero.  This is an optional element with a default value of "false" if not present.
        /// </summary>
        public bool AllowNonIPPController
        {
            get
            {
                if (allowNonIPPControllerField.HasValue)
                {
                    return allowNonIPPControllerField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                allowNonIPPControllerField = value;
            }
        }

        [XmlIgnore]
        public bool AllowNonIPPControllerSpecified
        {
            get
            {
                return allowNonIPPControllerField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    allowNonIPPControllerField = null;
                }
            }
        }

        /// <summary>
        /// True if this theme allows progressive configuration from controllers in addition to the IPC.
        /// A false value will cause Serial IPP to validate all progressive links for this theme as being IPP controlled.
        /// </summary>
        public bool AllowMultipleProgressiveControllers
        {
            get
            {
                return allowMultipleProgressiveControllersField;
            }
            set
            {
                allowMultipleProgressiveControllersField = value;
            }
        }

        /// <summary>
        /// List of progressive level expected contributions.
        /// </summary>
        [XmlArrayItemAttribute("Contribution", IsNullable=false)]
        public List<SerialIPPConfigurationContribution> MatchContributionLevels
        {
            get
            {
                return matchContributionLevelsField;
            }
            set
            {
                matchContributionLevelsField = value;
            }
        }
    }

    /// <summary>
    /// The expected contribution percentage for this progressive level.
    /// If this value and the contribution percentage reported by the IPC do not match, then the progressive configuration for this theme will be reported as invalid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class SerialIPPConfigurationContribution
    {
        #region Private fields
        private int levelField;
        private decimal valueField;
        #endregion

        /// <summary>
        /// Progressive level associated with the contribution.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public int Level
        {
            get
            {
                return levelField;
            }
            set
            {
                levelField = value;
            }
        }

        [XmlTextAttribute]
        public decimal Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// A mapping of named G2S configuration items to the theme's custom configuration items, if supported.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class G2SCustomConfigItemMappingType
    {
        #region Private fields
        private string easyBetEnabledField;
        private string staticPaytableDigitalGlassEnabledField;
        #endregion

        /// <summary>
        /// The custom config item that maps to "EASY BET ENABLED" for G2S.  This must be a BooleanData or ItemData configuration item.  This item is used to configure restricting bets to predetermined levels.
        /// </summary>
        public string EasyBetEnabled
        {
            get
            {
                return easyBetEnabledField;
            }
            set
            {
                easyBetEnabledField = value;
            }
        }

        /// <summary>
        /// *** DEPRECATED in version 5.14; field will be accepted but have no functionality. ***
        /// </summary>
        public string StaticPaytableDigitalGlassEnabled
        {
            get
            {
                return staticPaytableDigitalGlassEnabledField;
            }
            set
            {
                staticPaytableDigitalGlassEnabledField = value;
            }
        }
    }

    /// <summary>
    /// An object to hold the filtering hierarchy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class HierarchicalCustomMenuTabNode
    {
        #region Private fields
        private string keyField;
        private List<HierarchicalCustomMenuTabNode> childrenField;
        #endregion

        /// <summary>
        /// HierarchicalCustomMenuTabNode class constructor
        /// </summary>
        public HierarchicalCustomMenuTabNode()
        {
            childrenField = new List<HierarchicalCustomMenuTabNode>();
        }

        /// <summary>
        /// A localized key representing the current filter level value.
        /// </summary>
        public string Key
        {
            get
            {
                return keyField;
            }
            set
            {
                keyField = value;
            }
        }

        /// <summary>
        /// The subtree off of the current tab node.
        /// </summary>
        [XmlElement("Children")]
        public List<HierarchicalCustomMenuTabNode> Children
        {
            get
            {
                return childrenField;
            }
            set
            {
                childrenField = value;
            }
        }
    }

    /// <summary>
    /// Enumeration describing the type of the line selections.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2LThemeRegistryVer5.xsd")]
    public enum LineSelection
    {
        /// <summary>
        /// The player cannot switch the number of lines played. The value is maintained per game.
        /// </summary>
        Forced,
        /// <summary>
        /// Availability of manually selectable number of lines during a game play.
        /// </summary>
        PlayerSelectable,
    }

    /// <summary>
    /// Custom theme related file for use with the game.  Passed to the game during startup.  Opaque to the Foundation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeRegistryTagDataFile
    {
        #region Private fields
        private string tagField;
        private string valueField;
        #endregion

        /// <summary>
        /// Custom theme related data for use with the game.  Passed to the game during startup.  Opaque to the Foundation.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Tag
        {
            get
            {
                return tagField;
            }
            set
            {
                tagField = value;
            }
        }

        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// Relative path to the configuration rule script.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeRegistryConfigurationRuleScript
    {
        #region Private fields
        private ConfigurationRuleInterfaceVersion configurationRuleInterfaceVersionField;
        private string valueField;
        #endregion

        /// <summary>
        /// Identifies the version of the interface used by configuration rules.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public ConfigurationRuleInterfaceVersion ConfigurationRuleInterfaceVersion
        {
            get
            {
                return configurationRuleInterfaceVersionField;
            }
            set
            {
                configurationRuleInterfaceVersionField = value;
            }
        }

        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// Type identifying the version of the custom configuration rules interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2LThemeRegistryVer5.xsd")]
    public enum ConfigurationRuleInterfaceVersion
    {
        [XmlEnumAttribute("1.0")]
        Item10,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public enum ThemeRegistryMaxBetResolution
    {
        PerTheme,
        PerPayvar,
        PerPayvarDenomination,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public enum ThemeRegistryMaxBetButtonBehaviorSupported
    {
        BetMaxCreditsOnly,
        BetAvailableCredits,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public enum ThemeRegistryEnableRestriction
    {
        None,
        ExclusiveTheme,
    }

    /// <summary>
    /// Provides configuration information for the SyncSation feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeRegistrySyncSation
    {
        #region Private fields
        private SyncSationBehavior behaviorField;
        #endregion

        /// <summary>
        /// ThemeRegistrySyncSation class constructor
        /// </summary>
        public ThemeRegistrySyncSation()
        {
            behaviorField = SyncSationBehavior.OptIn;
        }

        /// <summary>
        /// Indicates how the SyncSation feature should behave when the theme is active.
        /// </summary>
        public SyncSationBehavior Behavior
        {
            get
            {
                return behaviorField;
            }
            set
            {
                behaviorField = value;
            }
        }
    }

    /// <summary>
    /// Type describing the SyncSation feature behavior.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2LThemeRegistryVer5.xsd")]
    public enum SyncSationBehavior
    {
        /// <summary>
        /// Opt in to the SyncSation feature allowing SyncSation to run while the theme is active (Default).
        /// </summary>
        OptIn,
        /// <summary>
        /// Opt out of the SyncSation feature, preventing SyncSation from running while the theme is active.
        /// </summary>
        OptOut,
        /// <summary>
        /// Same behavior as OptIn, but will not allow SyncSation feature if the Theme is activated with a Tournament payvar.
        /// </summary>
        TournamentOptOut,
    }

    /// <summary>
    /// Provides the theme specific menus pages that may plug into the Attendant/Operator menus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    [XmlRootAttribute(Namespace="F2LThemeRegistryVer5.xsd", IsNullable=false)]
    public partial class ThemeSpecificMenuPages
    {
        #region Private fields
        private string themeSpecificMenuPageRootField;
        private List<ExtensionImportListExtensionImport> extensionImportListField;
        private ThemeSpecificMenuPagesAccountingPage accountingPageField;
        private ThemeSpecificMenuPagesLogPage logPageField;
        private ThemeSpecificMenuPagesSetupPage setupPageField;
        private ThemeSpecificMenuPagesBetStepsPage betStepsPageField;
        private List<ThemeSpecificMenuPagesSetupPage1> setupPagesField;
        #endregion

        /// <summary>
        /// ThemeSpecificMenuPages class constructor
        /// </summary>
        public ThemeSpecificMenuPages()
        {
            setupPagesField = new List<ThemeSpecificMenuPagesSetupPage1>();
            extensionImportListField = new List<ExtensionImportListExtensionImport>();
        }

        /// <summary>
        /// ThemeSpecificMenuPageRoot specifies the root directory that shall contain all resources for the theme specific menu pages defined below. This path is relative to the root of the package and is used as the search path to find menu pages as well as resources referenced from within those menu pages.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ThemeSpecificMenuPageRoot
        {
            get
            {
                return themeSpecificMenuPageRootField;
            }
            set
            {
                themeSpecificMenuPageRootField = value;
            }
        }

        /// <summary>
        /// Defines extensions (i.e. add-on content) that may be linked to this theme specific menu pages.
        /// </summary>
        [XmlArrayAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
        [XmlArrayItemAttribute("ExtensionImport", IsNullable=false)]
        public List<ExtensionImportListExtensionImport> ExtensionImportList
        {
            get
            {
                return extensionImportListField;
            }
            set
            {
                extensionImportListField = value;
            }
        }

        /// <summary>
        /// Menu page URL for theme specific accounting information.
        /// </summary>
        public ThemeSpecificMenuPagesAccountingPage AccountingPage
        {
            get
            {
                return accountingPageField;
            }
            set
            {
                accountingPageField = value;
            }
        }

        /// <summary>
        /// Menu page URL for theme specific log information.
        /// </summary>
        public ThemeSpecificMenuPagesLogPage LogPage
        {
            get
            {
                return logPageField;
            }
            set
            {
                logPageField = value;
            }
        }

        /// <summary>
        /// Menu page URL for theme specific configuration.  This is mutually exclusive with the SetupPages collection, and will be enforced at runtime.
        /// </summary>
        public ThemeSpecificMenuPagesSetupPage SetupPage
        {
            get
            {
                return setupPageField;
            }
            set
            {
                setupPageField = value;
            }
        }

        /// <summary>
        /// Menu page URL for theme specific bet steps configuration which will be loaded from the Game Setup Page. Security will handled by the game setup page.  DEPRECATED in 5.25 in favor of SetupPages.
        /// </summary>
        public ThemeSpecificMenuPagesBetStepsPage BetStepsPage
        {
            get
            {
                return betStepsPageField;
            }
            set
            {
                betStepsPageField = value;
            }
        }

        /// <summary>
        /// Collection of Menu page URLs for theme specified configurations.  This is mutually exclusive with the SetupPage element, and will be enforced at runtime.
        /// </summary>
        [XmlArrayItemAttribute("SetupPage", IsNullable=false)]
        public List<ThemeSpecificMenuPagesSetupPage1> SetupPages
        {
            get
            {
                return setupPagesField;
            }
            set
            {
                setupPagesField = value;
            }
        }
    }

    /// <summary>
    /// Menu page URL for theme specific accounting information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeSpecificMenuPagesAccountingPage
    {
        #region Private fields
        private MenuInterfaceVersion menuInterfaceVersionField;
        private MenuAccessRequirement accessRequirementField;
        private string valueField;
        #endregion

        /// <summary>
        /// Identifies the version of the interface used by the plugin menu page.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuInterfaceVersion MenuInterfaceVersion
        {
            get
            {
                return menuInterfaceVersionField;
            }
            set
            {
                menuInterfaceVersionField = value;
            }
        }

        /// <summary>
        /// The minimum Attendant/Operator access requirement to show the menu page.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuAccessRequirement AccessRequirement
        {
            get
            {
                return accessRequirementField;
            }
            set
            {
                accessRequirementField = value;
            }
        }

        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// Type identifying the version of the menu interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2LThemeRegistryVer5.xsd")]
    public enum MenuInterfaceVersion
    {
        [XmlEnumAttribute("1.0")]
        Item10,
        [XmlEnumAttribute("1.1")]
        Item11,
        [XmlEnumAttribute("1.2")]
        Item12,
        [XmlEnumAttribute("1.3")]
        Item13,
        [XmlEnumAttribute("1.4")]
        Item14,
        [XmlEnumAttribute("1.5")]
        Item15,
        [XmlEnumAttribute("1.6")]
        Item16,
    }

    /// <summary>
    /// Type describing the access requirement to show a plug-in menu page.  GameInProgressOrGreater is the least restrictive and the menu page will be shown on Ekey, Operator, and Attendant level access even if a game is currently in progress.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2LThemeRegistryVer5.xsd")]
    public enum MenuAccessRequirement
    {
        Invalid,
        GameInProgressOrGreater,
        AttendantOrGreater,
        OperatorOrGreater,
        Ekey,
    }

    /// <summary>
    /// Menu page URL for theme specific log information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeSpecificMenuPagesLogPage
    {
        #region Private fields
        private MenuInterfaceVersion menuInterfaceVersionField;
        private MenuAccessRequirement accessRequirementField;
        private string valueField;
        #endregion

        /// <summary>
        /// Identifies the version of the interface used by the plugin menu page.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuInterfaceVersion MenuInterfaceVersion
        {
            get
            {
                return menuInterfaceVersionField;
            }
            set
            {
                menuInterfaceVersionField = value;
            }
        }

        /// <summary>
        /// The minimum Attendant/Operator access requirement to show the menu page.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuAccessRequirement AccessRequirement
        {
            get
            {
                return accessRequirementField;
            }
            set
            {
                accessRequirementField = value;
            }
        }

        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// Menu page URL for theme specific configuration.  This is mutually exclusive with the SetupPages collection, and will be enforced at runtime.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeSpecificMenuPagesSetupPage
    {
        #region Private fields
        private MenuInterfaceVersion menuInterfaceVersionField;
        private MenuAccessRequirement accessRequirementField;
        private string valueField;
        #endregion

        /// <summary>
        /// Identifies the version of the interface used by the plugin menu page.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuInterfaceVersion MenuInterfaceVersion
        {
            get
            {
                return menuInterfaceVersionField;
            }
            set
            {
                menuInterfaceVersionField = value;
            }
        }

        /// <summary>
        /// The minimum Attendant/Operator access requirement to show the menu page.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuAccessRequirement AccessRequirement
        {
            get
            {
                return accessRequirementField;
            }
            set
            {
                accessRequirementField = value;
            }
        }

        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// Menu page URL for theme specific bet steps configuration which will be loaded from the Game Setup Page. Security will handled by the game setup page.  DEPRECATED in 5.25 in favor of SetupPages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeSpecificMenuPagesBetStepsPage
    {
        #region Private fields
        private MenuInterfaceVersion menuInterfaceVersionField;
        private MenuAccessRequirement accessRequirementField;
        private string valueField;
        #endregion

        /// <summary>
        /// Identifies the version of the interface used by the plugin menu page.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuInterfaceVersion MenuInterfaceVersion
        {
            get
            {
                return menuInterfaceVersionField;
            }
            set
            {
                menuInterfaceVersionField = value;
            }
        }

        /// <summary>
        /// The minimum Attendant/Operator access requirement to show the menu page.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuAccessRequirement AccessRequirement
        {
            get
            {
                return accessRequirementField;
            }
            set
            {
                accessRequirementField = value;
            }
        }

        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// Provides the theme specific menus pages that may plug into the Attendant/Operator menus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeSpecificMenuPagesSetupPage1
    {
        #region Private fields
        private string labelKeyField;
        private MenuInterfaceVersion menuInterfaceVersionField;
        private MenuAccessRequirement accessRequirementField;
        private string valueField;
        #endregion

        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string LabelKey
        {
            get
            {
                return labelKeyField;
            }
            set
            {
                labelKeyField = value;
            }
        }

        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuInterfaceVersion MenuInterfaceVersion
        {
            get
            {
                return menuInterfaceVersionField;
            }
            set
            {
                menuInterfaceVersionField = value;
            }
        }

        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public MenuAccessRequirement AccessRequirement
        {
            get
            {
                return accessRequirementField;
            }
            set
            {
                accessRequirementField = value;
            }
        }

        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// Virtual Button Panel configuration file. Used to configure the Virtual Button Panel for themes that do not support the DPP.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeRegistryVBPConfigurationFile
    {
        #region Private fields
        private string versionField;
        private string valueField;
        #endregion

        /// <summary>
        /// VBP Configuration File version.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Version
        {
            get
            {
                return versionField;
            }
            set
            {
                versionField = value;
            }
        }

        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <summary>
    /// Theme specific hardware requirements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeRegistryHardwareRequirements
    {
        #region Private fields
        private bool? topMonitorPortraitRequiredField;
        private bool? cashoutServiceButtonsRequiredField;
        #endregion

        /// <summary>
        /// Indicates the theme requirement for the top monitor to be configured for portrait mode. This element will default to false.
        /// </summary>
        public bool TopMonitorPortraitRequired
        {
            get
            {
                if (topMonitorPortraitRequiredField.HasValue)
                {
                    return topMonitorPortraitRequiredField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                topMonitorPortraitRequiredField = value;
            }
        }

        [XmlIgnore]
        public bool TopMonitorPortraitRequiredSpecified
        {
            get
            {
                return topMonitorPortraitRequiredField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    topMonitorPortraitRequiredField = null;
                }
            }
        }

        /// <summary>
        /// Indicates the theme requirement for the EGM to have either physical or emulated cashout and service buttons. This element will default to true.
        /// </summary>
        public bool CashoutServiceButtonsRequired
        {
            get
            {
                if (cashoutServiceButtonsRequiredField.HasValue)
                {
                    return cashoutServiceButtonsRequiredField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                cashoutServiceButtonsRequiredField = value;
            }
        }

        [XmlIgnore]
        public bool CashoutServiceButtonsRequiredSpecified
        {
            get
            {
                return cashoutServiceButtonsRequiredField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    cashoutServiceButtonsRequiredField = null;
                }
            }
        }
    }

    /// <summary>
    /// Attract related configuration items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeRegistryAttractConfiguration
    {
        #region Private fields
        private List<ushort> attractSupportedPlayListGroupsField;
        #endregion

        /// <summary>
        /// ThemeRegistryAttractConfiguration class constructor
        /// </summary>
        public ThemeRegistryAttractConfiguration()
        {
            attractSupportedPlayListGroupsField = new List<ushort>();
        }

        /// <summary>
        /// List of attract group identifiers supported by the game theme.  This may be used to support synchronized attracts/lighting for a bank of machines.
        /// </summary>
        [XmlArrayItemAttribute("PlayListGroupId", IsNullable=false)]
        public List<ushort> AttractSupportedPlayListGroups
        {
            get
            {
                return attractSupportedPlayListGroupsField;
            }
            set
            {
                attractSupportedPlayListGroupsField = value;
            }
        }
    }

    /// <summary>
    /// Line selection configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LThemeRegistryVer5.xsd")]
    public partial class ThemeRegistryLineSelectionConfiguration
    {
        #region Private fields
        private LineSelection defaultLineSelectionField;
        private List<LineSelection> availableLineSelectionsField;
        #endregion

        /// <summary>
        /// ThemeRegistryLineSelectionConfiguration class constructor
        /// </summary>
        public ThemeRegistryLineSelectionConfiguration()
        {
            availableLineSelectionsField = new List<LineSelection>();
        }

        /// <summary>
        /// Specifies the type of default line selection.
        /// </summary>
        public LineSelection DefaultLineSelection
        {
            get
            {
                return defaultLineSelectionField;
            }
            set
            {
                defaultLineSelectionField = value;
            }
        }

        /// <summary>
        /// The list of available line selection configurations supported by theme.
        /// </summary>
        public List<LineSelection> AvailableLineSelections
        {
            get
            {
                return availableLineSelectionsField;
            }
            set
            {
                availableLineSelectionsField = value;
            }
        }
    }
}
#pragma warning restore
