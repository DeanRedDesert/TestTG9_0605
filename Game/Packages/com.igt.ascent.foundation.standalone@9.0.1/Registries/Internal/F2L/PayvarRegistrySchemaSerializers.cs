// <auto-generated>
//   This file was generated by GenerateSerializers.py.
//   Changes to this file may cause incorrect behavior and will be lost if the file is regenerated.
// </auto-generated>

#pragma warning disable

#if _DYNAMIC_XMLSERIALIZER_COMPILATION

[assembly:System.Security.AllowPartiallyTrustedCallers()]

[assembly:System.Security.SecurityTransparent()]

[assembly:System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1)]

#endif

namespace IGT.Game.Core.Registries.Internal.F2L.Schemas.Serializers {



    public class XmlSerializationWriterPayvarRegistry : System.Xml.Serialization.XmlSerializationWriter {



        public void Write34_PayvarRegistry(object o) {

            WriteStartDocument();

            if (o == null) {

                WriteEmptyTag(@"PayvarRegistry", @"F2LPayvarRegistryVer3.xsd");

                return;

            }

            TopLevelElement();

            Write33_PayvarRegistry(@"PayvarRegistry", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry)o), false, false);

        }



        void Write33_PayvarRegistry(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LPayvarRegistryVer3.xsd");

            WriteElementString(@"PaytableName", @"F2LPayvarRegistryVer3.xsd", ((global::System.String)o.@PaytableName));

            WriteElementString(@"PayvarType", @"F2LPayvarRegistryVer3.xsd", Write1_PayvarType(((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType)o.@PayvarType)));

            WriteElementStringRaw(@"PaybackPercentage", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Decimal)((global::System.Decimal)o.@PaybackPercentage)));

            WriteElementStringRaw(@"MinimumPaybackPercentage", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Decimal)((global::System.Decimal)o.@MinimumPaybackPercentage)));

            if (o.@MinimumPaybackPercentageWithoutProgressivesSpecified) {

                WriteElementStringRaw(@"MinimumPaybackPercentageWithoutProgressives", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Decimal)((global::System.Decimal)o.@MinimumPaybackPercentageWithoutProgressives)));

            }

            WriteElementString(@"ThemeRegistry", @"F2LPayvarRegistryVer3.xsd", ((global::System.String)o.@ThemeRegistry));

            Write3_PayvarRegistryTagDataFile(@"TagDataFile", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryTagDataFile)o.@TagDataFile), false, false);

            if (o.@MinimumBitsOfEntropyForRNGSpecified) {

                WriteElementStringRaw(@"MinimumBitsOfEntropyForRNG", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.UInt32)((global::System.UInt32)o.@MinimumBitsOfEntropyForRNG)));

            }

            {

                global::System.Collections.Generic.List<global::System.Decimal> a = (global::System.Collections.Generic.List<global::System.Decimal>)((global::System.Collections.Generic.List<global::System.Decimal>)o.@WagerCategories);

                if (a != null){

                    WriteStartElement(@"WagerCategories", @"F2LPayvarRegistryVer3.xsd", null, false);

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        WriteElementStringRaw(@"Percentage", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Decimal)((global::System.Decimal)a[ia])));

                    }

                    WriteEndElement();

                }

            }

            Write17_CustomConfigItemsType(@"CustomConfigItems", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsType)o.@CustomConfigItems), false, false);

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel>)((global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel>)o.@ProgressiveGameLevels);

                if (a != null){

                    WriteStartElement(@"ProgressiveGameLevels", @"F2LPayvarRegistryVer3.xsd", null, false);

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write19_Item(@"ProgressiveGameLevel", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel)a[ia]), false, false);

                    }

                    WriteEndElement();

                }

            }

            Write23_ProgressiveConceptsType(@"ProgressiveConcepts", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptsType)o.@ProgressiveConcepts), false, false);

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel>)((global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel>)o.@WinLevels);

                if (a != null){

                    WriteStartElement(@"WinLevels", @"F2LPayvarRegistryVer3.xsd", null, false);

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write25_PayvarRegistryWinLevel(@"WinLevel", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel)a[ia]), false, false);

                    }

                    WriteEndElement();

                }

            }

            {

                global::System.Collections.Generic.List<global::System.UInt32> a = (global::System.Collections.Generic.List<global::System.UInt32>)((global::System.Collections.Generic.List<global::System.UInt32>)o.@SupportedDenominations);

                if (a != null){

                    WriteStartElement(@"SupportedDenominations", @"F2LPayvarRegistryVer3.xsd", null, false);

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        WriteElementStringRaw(@"Denom", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.UInt32)((global::System.UInt32)a[ia])));

                    }

                    WriteEndElement();

                }

            }

            Write30_MaxBetType(@"ButtonPanelMinBet", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetType)o.@ButtonPanelMinBet), false, false);

            Write30_MaxBetType(@"MaxBet", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetType)o.@MaxBet), false, false);

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection>)((global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection>)o.@Properties);

                if (a != null){

                    WriteStartElement(@"Properties", @"F2LPayvarRegistryVer3.xsd", null, false);

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write32_PropertiesTypeSection(@"Section", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection)a[ia]), false, false);

                    }

                    WriteEndElement();

                }

            }

            if (o.@DoubleUpSupportedSpecified) {

                WriteElementStringRaw(@"DoubleUpSupported", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@DoubleUpSupported)));

            }

            if (o.@AllowDoubleUpOnJackpotHandpaySpecified) {

                WriteElementStringRaw(@"AllowDoubleUpOnJackpotHandpay", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@AllowDoubleUpOnJackpotHandpay)));

            }

            if (o.@HasMidGameWagerSpecified) {

                WriteElementStringRaw(@"HasMidGameWager", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@HasMidGameWager)));

            }

            WriteEndElement(o);

        }



        void Write32_PropertiesTypeSection(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            WriteAttribute(@"Name", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@Name));

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty>)o.@Property;

                if (a != null) {

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write31_PropertiesTypeSectionProperty(@"Property", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty)a[ia]), false, false);

                    }

                }

            }

            WriteEndElement(o);

        }



        void Write31_PropertiesTypeSectionProperty(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            WriteElementString(@"Name", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@Name));

            WriteElementString(@"Value", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@Value));

            WriteEndElement(o);

        }



        void Write30_MaxBetType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"MaxBetType", @"F2LRegistryTypeVer2.xsd");

            Write28_MaxBetTypeValuePool(@"ValuePool", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePool)o.@ValuePool), false, false);

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue>)o.@Value;

                if (a != null) {

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write29_MaxBetTypeValue(@"Value", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue)a[ia]), false, false);

                    }

                }

            }

            WriteEndElement(o);

        }



        void Write29_MaxBetTypeValue(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            WriteAttribute(@"Denom", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.UInt32)((global::System.UInt32)o.@Denom)));

            {

                WriteValue(System.Xml.XmlConvert.ToString((global::System.UInt64)((global::System.UInt64)o.@Value)));

            }

            WriteEndElement(o);

        }



        void Write28_MaxBetTypeValuePool(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePool o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePool)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            if ((object)(o.@Item) != null){

                if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolRange) {

                    Write27_MaxBetTypeValuePoolRange(@"Range", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolRange)o.@Item), false, false);

                }

                else if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolList) {

                    Write26_MaxBetTypeValuePoolList(@"List", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolList)o.@Item), false, false);

                }

                else  if ((object)(o.@Item) != null){

                    throw CreateUnknownTypeException(o.@Item);

                }

            }

            WriteEndElement(o);

        }



        void Write26_MaxBetTypeValuePoolList(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolList o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolList)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            {

                global::System.Collections.Generic.List<global::System.UInt64> a = (global::System.Collections.Generic.List<global::System.UInt64>)o.@Enumeration;

                if (a != null) {

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        WriteElementStringRaw(@"Enumeration", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.UInt64)((global::System.UInt64)a[ia])));

                    }

                }

            }

            WriteEndElement(o);

        }



        void Write27_MaxBetTypeValuePoolRange(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolRange o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolRange)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            WriteAttribute(@"Min", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.UInt64)((global::System.UInt64)o.@Min)));

            WriteAttribute(@"Max", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.UInt64)((global::System.UInt64)o.@Max)));

            WriteEndElement(o);

        }



        void Write25_PayvarRegistryWinLevel(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LPayvarRegistryVer3.xsd");

            WriteElementString(@"Description", @"F2LPayvarRegistryVer3.xsd", ((global::System.String)o.@Description));

            Write24_Item(@"ProgressiveSupport", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevelProgressiveSupport)o.@ProgressiveSupport), false, false);

            WriteEndElement(o);

        }



        void Write24_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevelProgressiveSupport o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevelProgressiveSupport)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LPayvarRegistryVer3.xsd");

            WriteElementStringRaw(@"ProgressiveGameLevelIndex", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.UInt16)((global::System.UInt16)o.@ProgressiveGameLevelIndex)));

            WriteElementStringRaw(@"Odds", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.UInt64)((global::System.UInt64)o.@Odds)));

            WriteEndElement(o);

        }



        void Write23_ProgressiveConceptsType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptsType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptsType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"ProgressiveConceptsType", @"F2LPayvarRegistryVer3.xsd");

            if (o.@LegacyGameLevelLinkingPermittedSpecified) {

                WriteAttribute(@"LegacyGameLevelLinkingPermitted", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@LegacyGameLevelLinkingPermitted)));

            }

            if (o.@LegacyIppLinkMapSelectionPermittedSpecified) {

                WriteAttribute(@"LegacyIppLinkMapSelectionPermitted", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@LegacyIppLinkMapSelectionPermitted)));

            }

            if (o.@CustomLinkMapsPermittedSpecified) {

                WriteAttribute(@"CustomLinkMapsPermitted", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@CustomLinkMapsPermitted)));

            }

            if (o.@NonProgressiveLinkMapSelectionPermittedSpecified) {

                WriteAttribute(@"NonProgressiveLinkMapSelectionPermitted", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@NonProgressiveLinkMapSelectionPermitted)));

            }

            if (o.@NonProgressiveLinkMapByDefaultSpecified) {

                WriteAttribute(@"NonProgressiveLinkMapByDefault", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@NonProgressiveLinkMapByDefault)));

            }

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType>)o.@ProgressiveConcept;

                if (a != null) {

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write22_ProgressiveConceptType(@"ProgressiveConcept", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType)a[ia]), false, false);

                    }

                }

            }

            if (o.@LegacyGameLevelLinkingPermittedSpecified) {

            }

            if (o.@LegacyIppLinkMapSelectionPermittedSpecified) {

            }

            if (o.@CustomLinkMapsPermittedSpecified) {

            }

            if (o.@NonProgressiveLinkMapSelectionPermittedSpecified) {

            }

            if (o.@NonProgressiveLinkMapByDefaultSpecified) {

            }

            WriteEndElement(o);

        }



        void Write22_ProgressiveConceptType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"ProgressiveConceptType", @"F2LPayvarRegistryVer3.xsd");

            Write20_Item(@"ProgressiveConceptIdentifier", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1.ProgressiveConceptIdentifierType)o.@ProgressiveConceptIdentifier), false, false);

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType>)((global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType>)o.@ProgressiveConceptRequirements);

                if (a != null){

                    WriteStartElement(@"ProgressiveConceptRequirements", @"F2LPayvarRegistryVer3.xsd", null, false);

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write21_Item(@"ProgressiveConceptRequirement", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType)a[ia]), false, false);

                    }

                    WriteEndElement();

                }

            }

            WriteEndElement(o);

        }



        void Write21_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"ProgressiveConceptRequirementType", @"F2LPayvarRegistryVer3.xsd");

            {

                global::System.Collections.Generic.List<global::System.UInt32> a = (global::System.Collections.Generic.List<global::System.UInt32>)((global::System.Collections.Generic.List<global::System.UInt32>)o.@DenominationConstraint);

                if (a != null){

                    WriteStartElement(@"DenominationConstraint", @"F2LPayvarRegistryVer3.xsd", null, false);

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        WriteElementStringRaw(@"DenomRequirement", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.UInt32)((global::System.UInt32)a[ia])));

                    }

                    WriteEndElement();

                }

            }

            WriteEndElement(o);

        }



        void Write20_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1.ProgressiveConceptIdentifierType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1.ProgressiveConceptIdentifierType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"ProgressiveConceptIdentifierType", @"F2XRegistryTypesVer1.xsd");

            WriteElementString(@"ProgressiveConceptCode", @"F2XRegistryTypesVer1.xsd", ((global::System.String)o.@ProgressiveConceptCode));

            WriteElementString(@"Authority", @"F2XRegistryTypesVer1.xsd", ((global::System.String)o.@Authority));

            WriteEndElement(o);

        }



        void Write19_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LPayvarRegistryVer3.xsd");

            WriteElementString(@"Description", @"F2LPayvarRegistryVer3.xsd", ((global::System.String)o.@Description));

            WriteElementString(@"ControllerType", @"F2LPayvarRegistryVer3.xsd", ((global::System.String)o.@ControllerType));

            if (o.@ControllerLevelSpecified) {

                WriteElementStringRaw(@"ControllerLevel", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.UInt32)((global::System.UInt32)o.@ControllerLevel)));

            }

            if (o.@ForcedContributionSpecified) {

                WriteElementStringRaw(@"ForcedContribution", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.Decimal)((global::System.Decimal)o.@ForcedContribution)));

            }

            if (o.@StartCreditSpecified) {

                WriteElementStringRaw(@"StartCredit", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.UInt64)((global::System.UInt64)o.@StartCredit)));

            }

            Write18_Item(@"ProgressiveConceptSettings", @"F2LPayvarRegistryVer3.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevelProgressiveConceptSettings)o.@ProgressiveConceptSettings), false, false);

            WriteEndElement(o);

        }



        void Write18_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevelProgressiveConceptSettings o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevelProgressiveConceptSettings)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LPayvarRegistryVer3.xsd");

            if (o.@StartCreditsSpecified) {

                WriteElementStringRaw(@"StartCredits", @"F2LPayvarRegistryVer3.xsd", System.Xml.XmlConvert.ToString((global::System.UInt64)((global::System.UInt64)o.@StartCredits)));

            }

            WriteElementString(@"ContributionPercent", @"F2LPayvarRegistryVer3.xsd", ((global::System.String)o.@ContributionPercent));

            WriteEndElement(o);

        }



        void Write17_CustomConfigItemsType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"CustomConfigItemsType", @"F2LRegistryTypeVer2.xsd");

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem>)o.@ConfigItem;

                if (a != null) {

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write15_Item(@"ConfigItem", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem)a[ia]), false, false);

                    }

                }

            }

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection>)((global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection>)o.@ConfigMenuSections);

                if (a != null){

                    WriteStartElement(@"ConfigMenuSections", @"F2LRegistryTypeVer2.xsd", null, false);

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write16_Item(@"ConfigMenuSection", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection)a[ia]), false, false);

                    }

                    WriteEndElement();

                }

            }

            WriteEndElement(o);

        }



        void Write16_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            WriteAttribute(@"Description", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@Description));

            WriteAttribute(@"NameIdentifier", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@NameIdentifier));

            WriteEndElement(o);

        }



        void Write15_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            WriteElementString(@"Name", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@Name));

            if (o.@PersistentSpecified) {

                WriteElementStringRaw(@"Persistent", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@Persistent)));

            }

            Write13_Item(@"Data", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemData)o.@Data), false, false);

            Write14_Item(@"Modifiability", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemModifiability)o.@Modifiability), false, false);

            WriteEndElement(o);

        }



        void Write14_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemModifiability o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemModifiability)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            WriteAttribute(@"Description", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@Description));

            WriteAttribute(@"CanModLocal", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@CanModLocal)));

            WriteAttribute(@"CanModRemote", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@CanModRemote)));

            WriteAttribute(@"SectionName", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@SectionName));

            if (o.@OrderInSectionSpecified) {

                WriteAttribute(@"OrderInSection", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.UInt32)((global::System.UInt32)o.@OrderInSection)));

            }

            if (o.@OrderInSectionSpecified) {

            }

            WriteEndElement(o);

        }



        void Write13_Item(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemData o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemData)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            if ((object)(o.@Item) != null){

                if (o.@Item is global::System.Boolean) {

                    WriteElementStringRaw(@"BooleanData", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@Item)));

                }

                else if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.Int64Type) {

                    Write10_Int64Type(@"Int64Data", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.Int64Type)o.@Item), false, false);

                }

                else if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.ItemType) {

                    Write11_ItemType(@"ItemData", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.ItemType)o.@Item), false, false);

                }

                else if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.StringType) {

                    Write12_StringType(@"StringData", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.StringType)o.@Item), false, false);

                }

                else if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FloatType) {

                    Write9_FloatType(@"FloatData", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FloatType)o.@Item), false, false);

                }

                else if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.AmountType) {

                    Write4_AmountType(@"AmountData", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.AmountType)o.@Item), false, false);

                }

                else if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationType) {

                    Write6_EnumerationType(@"EnumerationData", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationType)o.@Item), false, false);

                }

                else if (o.@Item is global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListType) {

                    Write8_FlagListType(@"FlagListData", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListType)o.@Item), false, false);

                }

                else  if ((object)(o.@Item) != null){

                    throw CreateUnknownTypeException(o.@Item);

                }

            }

            WriteEndElement(o);

        }



        void Write8_FlagListType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"FlagListType", @"F2LRegistryTypeVer2.xsd");

            WriteAttribute(@"EnumReferenceList", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@EnumReferenceList));

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement>)o.@Element;

                if (a != null) {

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write7_FlagListTypeElement(@"Element", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement)a[ia]), false, false);

                    }

                }

            }

            WriteEndElement(o);

        }



        void Write7_FlagListTypeElement(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            if ((object)(o.@Value) != null){

                WriteValue(((global::System.String)o.@Value));

            }

            WriteEndElement(o);

        }



        void Write6_EnumerationType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"EnumerationType", @"F2LRegistryTypeVer2.xsd");

            {

                global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration> a = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration>)o.@Enumeration;

                if (a != null) {

                    for (int ia = 0; ia < ((System.Collections.ICollection)a).Count; ia++) {

                        Write5_EnumerationTypeEnumeration(@"Enumeration", @"F2LRegistryTypeVer2.xsd", ((global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration)a[ia]), false, false);

                    }

                }

            }

            WriteEndElement(o);

        }



        void Write5_EnumerationTypeEnumeration(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LRegistryTypeVer2.xsd");

            if ((object)(o.@Value) != null){

                WriteValue(((global::System.String)o.@Value));

            }

            WriteEndElement(o);

        }



        void Write4_AmountType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.AmountType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.AmountType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"AmountType", @"F2LRegistryTypeVer2.xsd");

            if (o.@MinSpecified) {

                WriteAttribute(@"Min", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Int64)((global::System.Int64)o.@Min)));

            }

            if (o.@MaxSpecified) {

                WriteAttribute(@"Max", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Int64)((global::System.Int64)o.@Max)));

            }

            if (o.@MinSpecified) {

            }

            if (o.@MaxSpecified) {

            }

            {

                WriteValue(System.Xml.XmlConvert.ToString((global::System.Int64)((global::System.Int64)o.@Value)));

            }

            WriteEndElement(o);

        }



        void Write9_FloatType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FloatType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FloatType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"FloatType", @"F2LRegistryTypeVer2.xsd");

            if (o.@MinSpecified) {

                WriteAttribute(@"Min", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Single)((global::System.Single)o.@Min)));

            }

            if (o.@MaxSpecified) {

                WriteAttribute(@"Max", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Single)((global::System.Single)o.@Max)));

            }

            if (o.@MinSpecified) {

            }

            if (o.@MaxSpecified) {

            }

            {

                WriteValue(System.Xml.XmlConvert.ToString((global::System.Single)((global::System.Single)o.@Value)));

            }

            WriteEndElement(o);

        }



        void Write12_StringType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.StringType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.StringType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"StringType", @"F2LRegistryTypeVer2.xsd");

            if (o.@MinLenSpecified) {

                WriteAttribute(@"MinLen", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@MinLen)));

            }

            if (o.@MaxLenSpecified) {

                WriteAttribute(@"MaxLen", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@MaxLen)));

            }

            if (o.@MinLenSpecified) {

            }

            if (o.@MaxLenSpecified) {

            }

            if ((object)(o.@Value) != null){

                WriteValue(((global::System.String)o.@Value));

            }

            WriteEndElement(o);

        }



        void Write11_ItemType(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.ItemType o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.ItemType)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"ItemType", @"F2LRegistryTypeVer2.xsd");

            WriteAttribute(@"EnumReferenceList", @"F2LRegistryTypeVer2.xsd", ((global::System.String)o.@EnumReferenceList));

            if ((object)(o.@Value) != null){

                WriteValue(((global::System.String)o.@Value));

            }

            WriteEndElement(o);

        }



        void Write10_Int64Type(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.Int64Type o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.Int64Type)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(@"Int64Type", @"F2LRegistryTypeVer2.xsd");

            if (o.@MinSpecified) {

                WriteAttribute(@"Min", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Int64)((global::System.Int64)o.@Min)));

            }

            if (o.@MaxSpecified) {

                WriteAttribute(@"Max", @"F2LRegistryTypeVer2.xsd", System.Xml.XmlConvert.ToString((global::System.Int64)((global::System.Int64)o.@Max)));

            }

            if (o.@MinSpecified) {

            }

            if (o.@MaxSpecified) {

            }

            {

                WriteValue(System.Xml.XmlConvert.ToString((global::System.Int64)((global::System.Int64)o.@Value)));

            }

            WriteEndElement(o);

        }



        void Write3_PayvarRegistryTagDataFile(string n, string ns, global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryTagDataFile o, bool isNullable, bool needType) {

            if ((object)o == null) {

                if (isNullable) WriteNullTagLiteral(n, ns);

                return;

            }

            if (!needType) {

                System.Type t = o.GetType();

                if (t == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryTagDataFile)) {

                }

                else {

                    throw CreateUnknownTypeException(o);

                }

            }

            WriteStartElement(n, ns, o, false, null);

            if (needType) WriteXsiType(null, @"F2LPayvarRegistryVer3.xsd");

            WriteAttribute(@"Tag", @"F2LPayvarRegistryVer3.xsd", ((global::System.String)o.@Tag));

            if ((object)(o.@Value) != null){

                WriteValue(((global::System.String)o.@Value));

            }

            WriteEndElement(o);

        }



        string Write1_PayvarType(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType v) {

            string s = null;

            switch (v) {

                case global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType.@Standard: s = @"Standard"; break;

                case global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType.@Tournament: s = @"Tournament"; break;

                case global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType.@PayvarGroupTemplate: s = @"PayvarGroupTemplate"; break;

                case global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType.@SingleMultiTemplate: s = @"SingleMultiTemplate"; break;

                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType");

            }

            return s;

        }



        protected override void InitCallbacks() {

        }

    }



    public class XmlSerializationReaderPayvarRegistry : System.Xml.Serialization.XmlSerializationReader {



        public object Read34_PayvarRegistry() {

            object o = null;

            Reader.MoveToContent();

            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                if (((object) Reader.LocalName == (object)id1_PayvarRegistry && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                    o = Read33_PayvarRegistry(false, true);

                }

                else {

                    throw CreateUnknownNodeException();

                }

            }

            else {

                UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:PayvarRegistry");

            }

            return (object)o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry Read33_PayvarRegistry(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry();

            if ((object)(o.@WagerCategories) == null) o.@WagerCategories = new global::System.Collections.Generic.List<global::System.Decimal>();

            global::System.Collections.Generic.List<global::System.Decimal> a_8 = (global::System.Collections.Generic.List<global::System.Decimal>)o.@WagerCategories;

            if ((object)(o.@ProgressiveGameLevels) == null) o.@ProgressiveGameLevels = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel> a_10 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel>)o.@ProgressiveGameLevels;

            if ((object)(o.@WinLevels) == null) o.@WinLevels = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel> a_12 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel>)o.@WinLevels;

            if ((object)(o.@SupportedDenominations) == null) o.@SupportedDenominations = new global::System.Collections.Generic.List<global::System.UInt32>();

            global::System.Collections.Generic.List<global::System.UInt32> a_13 = (global::System.Collections.Generic.List<global::System.UInt32>)o.@SupportedDenominations;

            if ((object)(o.@Properties) == null) o.@Properties = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection> a_16 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection>)o.@Properties;

            bool[] paramsRead = new bool[20];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations0 = 0;

            int readerCount0 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id4_PaytableName && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@PaytableName = Reader.ReadElementString();

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id5_PayvarType && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@PayvarType = Read1_PayvarType(Reader.ReadElementString());

                        }

                        paramsRead[1] = true;

                    }

                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id6_PaybackPercentage && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@PaybackPercentage = System.Xml.XmlConvert.ToDecimal(Reader.ReadElementString());

                        }

                        paramsRead[2] = true;

                    }

                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id7_MinimumPaybackPercentage && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@MinimumPaybackPercentage = System.Xml.XmlConvert.ToDecimal(Reader.ReadElementString());

                        }

                        paramsRead[3] = true;

                    }

                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id8_Item && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@MinimumPaybackPercentageWithoutProgressivesSpecified = true;

                        {

                            o.@MinimumPaybackPercentageWithoutProgressives = System.Xml.XmlConvert.ToDecimal(Reader.ReadElementString());

                        }

                        paramsRead[4] = true;

                    }

                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id9_ThemeRegistry && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@ThemeRegistry = CollapseWhitespace(Reader.ReadElementString());

                        }

                        paramsRead[5] = true;

                    }

                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id10_TagDataFile && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@TagDataFile = Read3_PayvarRegistryTagDataFile(false, true);

                        paramsRead[6] = true;

                    }

                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id11_MinimumBitsOfEntropyForRNG && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@MinimumBitsOfEntropyForRNGSpecified = true;

                        {

                            o.@MinimumBitsOfEntropyForRNG = System.Xml.XmlConvert.ToUInt32(Reader.ReadElementString());

                        }

                        paramsRead[7] = true;

                    }

                    else if (((object) Reader.LocalName == (object)id12_WagerCategories && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        if (!ReadNull()) {

                            if ((object)(o.@WagerCategories) == null) o.@WagerCategories = new global::System.Collections.Generic.List<global::System.Decimal>();

                            global::System.Collections.Generic.List<global::System.Decimal> a_8_0 = (global::System.Collections.Generic.List<global::System.Decimal>)o.@WagerCategories;

                            if ((Reader.IsEmptyElement)) {

                                Reader.Skip();

                            }

                            else {

                                Reader.ReadStartElement();

                                Reader.MoveToContent();

                                int whileIterations1 = 0;

                                int readerCount1 = ReaderCount;

                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                                        if (((object) Reader.LocalName == (object)id13_Percentage && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                                            {

                                                a_8_0.Add(System.Xml.XmlConvert.ToDecimal(Reader.ReadElementString()));

                                            }

                                        }

                                        else {

                                            UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:Percentage");

                                        }

                                    }

                                    else {

                                        UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:Percentage");

                                    }

                                    Reader.MoveToContent();

                                    CheckReaderCount(ref whileIterations1, ref readerCount1);

                                }

                            ReadEndElement();

                            }

                        }

                    }

                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id14_CustomConfigItems && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@CustomConfigItems = Read17_CustomConfigItemsType(false, true);

                        paramsRead[9] = true;

                    }

                    else if (((object) Reader.LocalName == (object)id15_ProgressiveGameLevels && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        if (!ReadNull()) {

                            if ((object)(o.@ProgressiveGameLevels) == null) o.@ProgressiveGameLevels = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel>();

                            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel> a_10_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel>)o.@ProgressiveGameLevels;

                            if ((Reader.IsEmptyElement)) {

                                Reader.Skip();

                            }

                            else {

                                Reader.ReadStartElement();

                                Reader.MoveToContent();

                                int whileIterations2 = 0;

                                int readerCount2 = ReaderCount;

                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                                        if (((object) Reader.LocalName == (object)id16_ProgressiveGameLevel && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                                            if ((object)(a_10_0) == null) Reader.Skip(); else a_10_0.Add(Read19_Item(false, true));

                                        }

                                        else {

                                            UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:ProgressiveGameLevel");

                                        }

                                    }

                                    else {

                                        UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:ProgressiveGameLevel");

                                    }

                                    Reader.MoveToContent();

                                    CheckReaderCount(ref whileIterations2, ref readerCount2);

                                }

                            ReadEndElement();

                            }

                        }

                    }

                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id17_ProgressiveConcepts && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@ProgressiveConcepts = Read23_ProgressiveConceptsType(false, true);

                        paramsRead[11] = true;

                    }

                    else if (((object) Reader.LocalName == (object)id18_WinLevels && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        if (!ReadNull()) {

                            if ((object)(o.@WinLevels) == null) o.@WinLevels = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel>();

                            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel> a_12_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel>)o.@WinLevels;

                            if ((Reader.IsEmptyElement)) {

                                Reader.Skip();

                            }

                            else {

                                Reader.ReadStartElement();

                                Reader.MoveToContent();

                                int whileIterations3 = 0;

                                int readerCount3 = ReaderCount;

                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                                        if (((object) Reader.LocalName == (object)id19_WinLevel && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                                            if ((object)(a_12_0) == null) Reader.Skip(); else a_12_0.Add(Read25_PayvarRegistryWinLevel(false, true));

                                        }

                                        else {

                                            UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:WinLevel");

                                        }

                                    }

                                    else {

                                        UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:WinLevel");

                                    }

                                    Reader.MoveToContent();

                                    CheckReaderCount(ref whileIterations3, ref readerCount3);

                                }

                            ReadEndElement();

                            }

                        }

                    }

                    else if (((object) Reader.LocalName == (object)id20_SupportedDenominations && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        if (!ReadNull()) {

                            if ((object)(o.@SupportedDenominations) == null) o.@SupportedDenominations = new global::System.Collections.Generic.List<global::System.UInt32>();

                            global::System.Collections.Generic.List<global::System.UInt32> a_13_0 = (global::System.Collections.Generic.List<global::System.UInt32>)o.@SupportedDenominations;

                            if ((Reader.IsEmptyElement)) {

                                Reader.Skip();

                            }

                            else {

                                Reader.ReadStartElement();

                                Reader.MoveToContent();

                                int whileIterations4 = 0;

                                int readerCount4 = ReaderCount;

                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                                        if (((object) Reader.LocalName == (object)id21_Denom && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                                            {

                                                a_13_0.Add(System.Xml.XmlConvert.ToUInt32(Reader.ReadElementString()));

                                            }

                                        }

                                        else {

                                            UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:Denom");

                                        }

                                    }

                                    else {

                                        UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:Denom");

                                    }

                                    Reader.MoveToContent();

                                    CheckReaderCount(ref whileIterations4, ref readerCount4);

                                }

                            ReadEndElement();

                            }

                        }

                    }

                    else if (!paramsRead[14] && ((object) Reader.LocalName == (object)id22_ButtonPanelMinBet && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@ButtonPanelMinBet = Read30_MaxBetType(false, true);

                        paramsRead[14] = true;

                    }

                    else if (!paramsRead[15] && ((object) Reader.LocalName == (object)id23_MaxBet && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@MaxBet = Read30_MaxBetType(false, true);

                        paramsRead[15] = true;

                    }

                    else if (((object) Reader.LocalName == (object)id24_Properties && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        if (!ReadNull()) {

                            if ((object)(o.@Properties) == null) o.@Properties = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection>();

                            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection> a_16_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection>)o.@Properties;

                            if ((Reader.IsEmptyElement)) {

                                Reader.Skip();

                            }

                            else {

                                Reader.ReadStartElement();

                                Reader.MoveToContent();

                                int whileIterations5 = 0;

                                int readerCount5 = ReaderCount;

                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                                        if (((object) Reader.LocalName == (object)id25_Section && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                                            if ((object)(a_16_0) == null) Reader.Skip(); else a_16_0.Add(Read32_PropertiesTypeSection(false, true));

                                        }

                                        else {

                                            UnknownNode(null, @"F2LRegistryTypeVer2.xsd:Section");

                                        }

                                    }

                                    else {

                                        UnknownNode(null, @"F2LRegistryTypeVer2.xsd:Section");

                                    }

                                    Reader.MoveToContent();

                                    CheckReaderCount(ref whileIterations5, ref readerCount5);

                                }

                            ReadEndElement();

                            }

                        }

                    }

                    else if (!paramsRead[17] && ((object) Reader.LocalName == (object)id27_DoubleUpSupported && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@DoubleUpSupportedSpecified = true;

                        {

                            o.@DoubleUpSupported = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());

                        }

                        paramsRead[17] = true;

                    }

                    else if (!paramsRead[18] && ((object) Reader.LocalName == (object)id28_AllowDoubleUpOnJackpotHandpay && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@AllowDoubleUpOnJackpotHandpaySpecified = true;

                        {

                            o.@AllowDoubleUpOnJackpotHandpay = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());

                        }

                        paramsRead[18] = true;

                    }

                    else if (!paramsRead[19] && ((object) Reader.LocalName == (object)id29_HasMidGameWager && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@HasMidGameWagerSpecified = true;

                        {

                            o.@HasMidGameWager = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());

                        }

                        paramsRead[19] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:PaytableName, F2LPayvarRegistryVer3.xsd:PayvarType, F2LPayvarRegistryVer3.xsd:PaybackPercentage, F2LPayvarRegistryVer3.xsd:MinimumPaybackPercentage, F2LPayvarRegistryVer3.xsd:MinimumPaybackPercentageWithoutProgressives, F2LPayvarRegistryVer3.xsd:ThemeRegistry, F2LPayvarRegistryVer3.xsd:TagDataFile, F2LPayvarRegistryVer3.xsd:MinimumBitsOfEntropyForRNG, F2LPayvarRegistryVer3.xsd:WagerCategories, F2LPayvarRegistryVer3.xsd:CustomConfigItems, F2LPayvarRegistryVer3.xsd:ProgressiveGameLevels, F2LPayvarRegistryVer3.xsd:ProgressiveConcepts, F2LPayvarRegistryVer3.xsd:WinLevels, F2LPayvarRegistryVer3.xsd:SupportedDenominations, F2LPayvarRegistryVer3.xsd:ButtonPanelMinBet, F2LPayvarRegistryVer3.xsd:MaxBet, F2LPayvarRegistryVer3.xsd:Properties, F2LPayvarRegistryVer3.xsd:DoubleUpSupported, F2LPayvarRegistryVer3.xsd:AllowDoubleUpOnJackpotHandpay, F2LPayvarRegistryVer3.xsd:HasMidGameWager");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:PaytableName, F2LPayvarRegistryVer3.xsd:PayvarType, F2LPayvarRegistryVer3.xsd:PaybackPercentage, F2LPayvarRegistryVer3.xsd:MinimumPaybackPercentage, F2LPayvarRegistryVer3.xsd:MinimumPaybackPercentageWithoutProgressives, F2LPayvarRegistryVer3.xsd:ThemeRegistry, F2LPayvarRegistryVer3.xsd:TagDataFile, F2LPayvarRegistryVer3.xsd:MinimumBitsOfEntropyForRNG, F2LPayvarRegistryVer3.xsd:WagerCategories, F2LPayvarRegistryVer3.xsd:CustomConfigItems, F2LPayvarRegistryVer3.xsd:ProgressiveGameLevels, F2LPayvarRegistryVer3.xsd:ProgressiveConcepts, F2LPayvarRegistryVer3.xsd:WinLevels, F2LPayvarRegistryVer3.xsd:SupportedDenominations, F2LPayvarRegistryVer3.xsd:ButtonPanelMinBet, F2LPayvarRegistryVer3.xsd:MaxBet, F2LPayvarRegistryVer3.xsd:Properties, F2LPayvarRegistryVer3.xsd:DoubleUpSupported, F2LPayvarRegistryVer3.xsd:AllowDoubleUpOnJackpotHandpay, F2LPayvarRegistryVer3.xsd:HasMidGameWager");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations0, ref readerCount0);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection Read32_PropertiesTypeSection(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSection();

            if ((object)(o.@Property) == null) o.@Property = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty> a_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty>)o.@Property;

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id30_Name && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Name = Reader.Value;

                    paramsRead[1] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Name");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations6 = 0;

            int readerCount6 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (((object) Reader.LocalName == (object)id31_Property && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        if ((object)(a_0) == null) Reader.Skip(); else a_0.Add(Read31_PropertiesTypeSectionProperty(false, true));

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Property");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Property");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations6, ref readerCount6);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty Read31_PropertiesTypeSectionProperty(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.PropertiesTypeSectionProperty();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations7 = 0;

            int readerCount7 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id30_Name && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        {

                            o.@Name = Reader.ReadElementString();

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id32_Value && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        {

                            o.@Value = Reader.ReadElementString();

                        }

                        paramsRead[1] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Name, F2LRegistryTypeVer2.xsd:Value");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Name, F2LRegistryTypeVer2.xsd:Value");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations7, ref readerCount7);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetType Read30_MaxBetType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id33_MaxBetType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetType();

            if ((object)(o.@Value) == null) o.@Value = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue> a_1 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue>)o.@Value;

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations8 = 0;

            int readerCount8 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_ValuePool && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@ValuePool = Read28_MaxBetTypeValuePool(false, true);

                        paramsRead[0] = true;

                    }

                    else if (((object) Reader.LocalName == (object)id32_Value && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        if ((object)(a_1) == null) Reader.Skip(); else a_1.Add(Read29_MaxBetTypeValue(false, true));

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:ValuePool, F2LRegistryTypeVer2.xsd:Value");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:ValuePool, F2LRegistryTypeVer2.xsd:Value");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations8, ref readerCount8);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue Read29_MaxBetTypeValue(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValue();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id21_Denom && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Denom = System.Xml.XmlConvert.ToUInt32(Reader.Value);

                    paramsRead[0] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Denom");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations9 = 0;

            int readerCount9 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    o.@Value = System.Xml.XmlConvert.ToUInt64(Reader.ReadString());

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations9, ref readerCount9);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePool Read28_MaxBetTypeValuePool(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePool o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePool();

            bool[] paramsRead = new bool[1];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations10 = 0;

            int readerCount10 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id35_List && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read26_MaxBetTypeValuePoolList(false, true);

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id36_Range && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read27_MaxBetTypeValuePoolRange(false, true);

                        paramsRead[0] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:List, F2LRegistryTypeVer2.xsd:Range");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:List, F2LRegistryTypeVer2.xsd:Range");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations10, ref readerCount10);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolRange Read27_MaxBetTypeValuePoolRange(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolRange o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolRange();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id37_Min && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Min = System.Xml.XmlConvert.ToUInt64(Reader.Value);

                    paramsRead[0] = true;

                }

                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id38_Max && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Max = System.Xml.XmlConvert.ToUInt64(Reader.Value);

                    paramsRead[1] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Min, F2LRegistryTypeVer2.xsd:Max");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations11 = 0;

            int readerCount11 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations11, ref readerCount11);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolList Read26_MaxBetTypeValuePoolList(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolList o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.MaxBetTypeValuePoolList();

            if ((object)(o.@Enumeration) == null) o.@Enumeration = new global::System.Collections.Generic.List<global::System.UInt64>();

            global::System.Collections.Generic.List<global::System.UInt64> a_0 = (global::System.Collections.Generic.List<global::System.UInt64>)o.@Enumeration;

            bool[] paramsRead = new bool[1];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations12 = 0;

            int readerCount12 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (((object) Reader.LocalName == (object)id39_Enumeration && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        {

                            a_0.Add(System.Xml.XmlConvert.ToUInt64(Reader.ReadElementString()));

                        }

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Enumeration");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Enumeration");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations12, ref readerCount12);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel Read25_PayvarRegistryWinLevel(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevel();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations13 = 0;

            int readerCount13 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id40_Description && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@Description = Reader.ReadElementString();

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id41_ProgressiveSupport && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@ProgressiveSupport = Read24_Item(false, true);

                        paramsRead[1] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:Description, F2LPayvarRegistryVer3.xsd:ProgressiveSupport");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:Description, F2LPayvarRegistryVer3.xsd:ProgressiveSupport");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations13, ref readerCount13);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevelProgressiveSupport Read24_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevelProgressiveSupport o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryWinLevelProgressiveSupport();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations14 = 0;

            int readerCount14 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id42_ProgressiveGameLevelIndex && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@ProgressiveGameLevelIndex = System.Xml.XmlConvert.ToUInt16(Reader.ReadElementString());

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id43_Odds && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@Odds = System.Xml.XmlConvert.ToUInt64(Reader.ReadElementString());

                        }

                        paramsRead[1] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:ProgressiveGameLevelIndex, F2LPayvarRegistryVer3.xsd:Odds");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:ProgressiveGameLevelIndex, F2LPayvarRegistryVer3.xsd:Odds");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations14, ref readerCount14);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptsType Read23_ProgressiveConceptsType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id44_ProgressiveConceptsType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptsType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptsType();

            if ((object)(o.@ProgressiveConcept) == null) o.@ProgressiveConcept = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType> a_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType>)o.@ProgressiveConcept;

            bool[] paramsRead = new bool[6];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id45_Item && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                    o.@LegacyGameLevelLinkingPermitted = System.Xml.XmlConvert.ToBoolean(Reader.Value);

                    o.@LegacyGameLevelLinkingPermittedSpecified = true;

                    paramsRead[1] = true;

                }

                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id46_Item && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                    o.@LegacyIppLinkMapSelectionPermitted = System.Xml.XmlConvert.ToBoolean(Reader.Value);

                    o.@LegacyIppLinkMapSelectionPermittedSpecified = true;

                    paramsRead[2] = true;

                }

                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id47_CustomLinkMapsPermitted && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                    o.@CustomLinkMapsPermitted = System.Xml.XmlConvert.ToBoolean(Reader.Value);

                    o.@CustomLinkMapsPermittedSpecified = true;

                    paramsRead[3] = true;

                }

                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id48_Item && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                    o.@NonProgressiveLinkMapSelectionPermitted = System.Xml.XmlConvert.ToBoolean(Reader.Value);

                    o.@NonProgressiveLinkMapSelectionPermittedSpecified = true;

                    paramsRead[4] = true;

                }

                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id49_NonProgressiveLinkMapByDefault && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                    o.@NonProgressiveLinkMapByDefault = System.Xml.XmlConvert.ToBoolean(Reader.Value);

                    o.@NonProgressiveLinkMapByDefaultSpecified = true;

                    paramsRead[5] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:LegacyGameLevelLinkingPermitted, F2LPayvarRegistryVer3.xsd:LegacyIppLinkMapSelectionPermitted, F2LPayvarRegistryVer3.xsd:CustomLinkMapsPermitted, F2LPayvarRegistryVer3.xsd:NonProgressiveLinkMapSelectionPermitted, F2LPayvarRegistryVer3.xsd:NonProgressiveLinkMapByDefault");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations15 = 0;

            int readerCount15 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (((object) Reader.LocalName == (object)id50_ProgressiveConcept && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        if ((object)(a_0) == null) Reader.Skip(); else a_0.Add(Read22_ProgressiveConceptType(false, true));

                    }

                    else {

                        UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:ProgressiveConcept");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:ProgressiveConcept");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations15, ref readerCount15);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType Read22_ProgressiveConceptType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id51_ProgressiveConceptType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptType();

            if ((object)(o.@ProgressiveConceptRequirements) == null) o.@ProgressiveConceptRequirements = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType> a_1 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType>)o.@ProgressiveConceptRequirements;

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations16 = 0;

            int readerCount16 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id52_ProgressiveConceptIdentifier && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@ProgressiveConceptIdentifier = Read20_Item(false, true);

                        paramsRead[0] = true;

                    }

                    else if (((object) Reader.LocalName == (object)id53_ProgressiveConceptRequirements && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        if (!ReadNull()) {

                            if ((object)(o.@ProgressiveConceptRequirements) == null) o.@ProgressiveConceptRequirements = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType>();

                            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType> a_1_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType>)o.@ProgressiveConceptRequirements;

                            if ((Reader.IsEmptyElement)) {

                                Reader.Skip();

                            }

                            else {

                                Reader.ReadStartElement();

                                Reader.MoveToContent();

                                int whileIterations17 = 0;

                                int readerCount17 = ReaderCount;

                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                                        if (((object) Reader.LocalName == (object)id54_ProgressiveConceptRequirement && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                                            if ((object)(a_1_0) == null) Reader.Skip(); else a_1_0.Add(Read21_Item(false, true));

                                        }

                                        else {

                                            UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:ProgressiveConceptRequirement");

                                        }

                                    }

                                    else {

                                        UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:ProgressiveConceptRequirement");

                                    }

                                    Reader.MoveToContent();

                                    CheckReaderCount(ref whileIterations17, ref readerCount17);

                                }

                            ReadEndElement();

                            }

                        }

                    }

                    else {

                        UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:ProgressiveConceptIdentifier, F2LPayvarRegistryVer3.xsd:ProgressiveConceptRequirements");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:ProgressiveConceptIdentifier, F2LPayvarRegistryVer3.xsd:ProgressiveConceptRequirements");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations16, ref readerCount16);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType Read21_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id55_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.ProgressiveConceptRequirementType();

            if ((object)(o.@DenominationConstraint) == null) o.@DenominationConstraint = new global::System.Collections.Generic.List<global::System.UInt32>();

            global::System.Collections.Generic.List<global::System.UInt32> a_0 = (global::System.Collections.Generic.List<global::System.UInt32>)o.@DenominationConstraint;

            bool[] paramsRead = new bool[1];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations18 = 0;

            int readerCount18 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (((object) Reader.LocalName == (object)id56_DenominationConstraint && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        if (!ReadNull()) {

                            if ((object)(o.@DenominationConstraint) == null) o.@DenominationConstraint = new global::System.Collections.Generic.List<global::System.UInt32>();

                            global::System.Collections.Generic.List<global::System.UInt32> a_0_0 = (global::System.Collections.Generic.List<global::System.UInt32>)o.@DenominationConstraint;

                            if ((Reader.IsEmptyElement)) {

                                Reader.Skip();

                            }

                            else {

                                Reader.ReadStartElement();

                                Reader.MoveToContent();

                                int whileIterations19 = 0;

                                int readerCount19 = ReaderCount;

                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                                        if (((object) Reader.LocalName == (object)id57_DenomRequirement && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                                            {

                                                a_0_0.Add(System.Xml.XmlConvert.ToUInt32(Reader.ReadElementString()));

                                            }

                                        }

                                        else {

                                            UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:DenomRequirement");

                                        }

                                    }

                                    else {

                                        UnknownNode(null, @"F2LPayvarRegistryVer3.xsd:DenomRequirement");

                                    }

                                    Reader.MoveToContent();

                                    CheckReaderCount(ref whileIterations19, ref readerCount19);

                                }

                            ReadEndElement();

                            }

                        }

                    }

                    else {

                        UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:DenominationConstraint");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:DenominationConstraint");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations18, ref readerCount18);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1.ProgressiveConceptIdentifierType Read20_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id58_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id59_F2XRegistryTypesVer1xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1.ProgressiveConceptIdentifierType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1.ProgressiveConceptIdentifierType();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations20 = 0;

            int readerCount20 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id60_ProgressiveConceptCode && (object) Reader.NamespaceURI == (object)id59_F2XRegistryTypesVer1xsd)) {

                        {

                            o.@ProgressiveConceptCode = Reader.ReadElementString();

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id61_Authority && (object) Reader.NamespaceURI == (object)id59_F2XRegistryTypesVer1xsd)) {

                        {

                            o.@Authority = Reader.ReadElementString();

                        }

                        paramsRead[1] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2XRegistryTypesVer1.xsd:ProgressiveConceptCode, F2XRegistryTypesVer1.xsd:Authority");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2XRegistryTypesVer1.xsd:ProgressiveConceptCode, F2XRegistryTypesVer1.xsd:Authority");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations20, ref readerCount20);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel Read19_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevel();

            bool[] paramsRead = new bool[6];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations21 = 0;

            int readerCount21 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id40_Description && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@Description = Reader.ReadElementString();

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id62_ControllerType && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@ControllerType = Reader.ReadElementString();

                        }

                        paramsRead[1] = true;

                    }

                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id63_ControllerLevel && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@ControllerLevelSpecified = true;

                        {

                            o.@ControllerLevel = System.Xml.XmlConvert.ToUInt32(Reader.ReadElementString());

                        }

                        paramsRead[2] = true;

                    }

                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id64_ForcedContribution && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@ForcedContributionSpecified = true;

                        {

                            o.@ForcedContribution = System.Xml.XmlConvert.ToDecimal(Reader.ReadElementString());

                        }

                        paramsRead[3] = true;

                    }

                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id65_StartCredit && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@StartCreditSpecified = true;

                        {

                            o.@StartCredit = System.Xml.XmlConvert.ToUInt64(Reader.ReadElementString());

                        }

                        paramsRead[4] = true;

                    }

                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id66_ProgressiveConceptSettings && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@ProgressiveConceptSettings = Read18_Item(false, true);

                        paramsRead[5] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:Description, F2LPayvarRegistryVer3.xsd:ControllerType, F2LPayvarRegistryVer3.xsd:ControllerLevel, F2LPayvarRegistryVer3.xsd:ForcedContribution, F2LPayvarRegistryVer3.xsd:StartCredit, F2LPayvarRegistryVer3.xsd:ProgressiveConceptSettings");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:Description, F2LPayvarRegistryVer3.xsd:ControllerType, F2LPayvarRegistryVer3.xsd:ControllerLevel, F2LPayvarRegistryVer3.xsd:ForcedContribution, F2LPayvarRegistryVer3.xsd:StartCredit, F2LPayvarRegistryVer3.xsd:ProgressiveConceptSettings");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations21, ref readerCount21);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevelProgressiveConceptSettings Read18_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevelProgressiveConceptSettings o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryProgressiveGameLevelProgressiveConceptSettings();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations22 = 0;

            int readerCount22 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id67_StartCredits && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        o.@StartCreditsSpecified = true;

                        {

                            o.@StartCredits = System.Xml.XmlConvert.ToUInt64(Reader.ReadElementString());

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id68_ContributionPercent && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                        {

                            o.@ContributionPercent = Reader.ReadElementString();

                        }

                        paramsRead[1] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:StartCredits, F2LPayvarRegistryVer3.xsd:ContributionPercent");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:StartCredits, F2LPayvarRegistryVer3.xsd:ContributionPercent");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations22, ref readerCount22);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsType Read17_CustomConfigItemsType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id69_CustomConfigItemsType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsType();

            if ((object)(o.@ConfigItem) == null) o.@ConfigItem = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem> a_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem>)o.@ConfigItem;

            if ((object)(o.@ConfigMenuSections) == null) o.@ConfigMenuSections = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection> a_1 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection>)o.@ConfigMenuSections;

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations23 = 0;

            int readerCount23 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (((object) Reader.LocalName == (object)id70_ConfigItem && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        if ((object)(a_0) == null) Reader.Skip(); else a_0.Add(Read15_Item(false, true));

                    }

                    else if (((object) Reader.LocalName == (object)id71_ConfigMenuSections && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        if (!ReadNull()) {

                            if ((object)(o.@ConfigMenuSections) == null) o.@ConfigMenuSections = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection>();

                            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection> a_1_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection>)o.@ConfigMenuSections;

                            if ((Reader.IsEmptyElement)) {

                                Reader.Skip();

                            }

                            else {

                                Reader.ReadStartElement();

                                Reader.MoveToContent();

                                int whileIterations24 = 0;

                                int readerCount24 = ReaderCount;

                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                                        if (((object) Reader.LocalName == (object)id72_ConfigMenuSection && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                                            if ((object)(a_1_0) == null) Reader.Skip(); else a_1_0.Add(Read16_Item(false, true));

                                        }

                                        else {

                                            UnknownNode(null, @"F2LRegistryTypeVer2.xsd:ConfigMenuSection");

                                        }

                                    }

                                    else {

                                        UnknownNode(null, @"F2LRegistryTypeVer2.xsd:ConfigMenuSection");

                                    }

                                    Reader.MoveToContent();

                                    CheckReaderCount(ref whileIterations24, ref readerCount24);

                                }

                            ReadEndElement();

                            }

                        }

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:ConfigItem, F2LRegistryTypeVer2.xsd:ConfigMenuSections");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:ConfigItem, F2LRegistryTypeVer2.xsd:ConfigMenuSections");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations23, ref readerCount23);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection Read16_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigMenuSection();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id40_Description && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Description = Reader.Value;

                    paramsRead[0] = true;

                }

                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id73_NameIdentifier && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@NameIdentifier = Reader.Value;

                    paramsRead[1] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Description, F2LRegistryTypeVer2.xsd:NameIdentifier");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations25 = 0;

            int readerCount25 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations25, ref readerCount25);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem Read15_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItem();

            bool[] paramsRead = new bool[4];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations26 = 0;

            int readerCount26 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id30_Name && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        {

                            o.@Name = Reader.ReadElementString();

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id74_Persistent && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@PersistentSpecified = true;

                        {

                            o.@Persistent = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());

                        }

                        paramsRead[1] = true;

                    }

                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id75_Data && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Data = Read13_Item(false, true);

                        paramsRead[2] = true;

                    }

                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id76_Modifiability && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Modifiability = Read14_Item(false, true);

                        paramsRead[3] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Name, F2LRegistryTypeVer2.xsd:Persistent, F2LRegistryTypeVer2.xsd:Data, F2LRegistryTypeVer2.xsd:Modifiability");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Name, F2LRegistryTypeVer2.xsd:Persistent, F2LRegistryTypeVer2.xsd:Data, F2LRegistryTypeVer2.xsd:Modifiability");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations26, ref readerCount26);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemModifiability Read14_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemModifiability o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemModifiability();

            bool[] paramsRead = new bool[5];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id40_Description && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Description = Reader.Value;

                    paramsRead[0] = true;

                }

                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id77_CanModLocal && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@CanModLocal = System.Xml.XmlConvert.ToBoolean(Reader.Value);

                    paramsRead[1] = true;

                }

                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id78_CanModRemote && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@CanModRemote = System.Xml.XmlConvert.ToBoolean(Reader.Value);

                    paramsRead[2] = true;

                }

                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id79_SectionName && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@SectionName = Reader.Value;

                    paramsRead[3] = true;

                }

                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id80_OrderInSection && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@OrderInSection = System.Xml.XmlConvert.ToUInt32(Reader.Value);

                    o.@OrderInSectionSpecified = true;

                    paramsRead[4] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Description, F2LRegistryTypeVer2.xsd:CanModLocal, F2LRegistryTypeVer2.xsd:CanModRemote, F2LRegistryTypeVer2.xsd:SectionName, F2LRegistryTypeVer2.xsd:OrderInSection");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations27 = 0;

            int readerCount27 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations27, ref readerCount27);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemData Read13_Item(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemData o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.CustomConfigItemsTypeConfigItemData();

            bool[] paramsRead = new bool[1];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations28 = 0;

            int readerCount28 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id81_AmountData && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read4_AmountType(false, true);

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id82_BooleanData && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        {

                            o.@Item = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());

                        }

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id83_EnumerationData && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read6_EnumerationType(false, true);

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id84_FlagListData && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read8_FlagListType(false, true);

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id85_FloatData && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read9_FloatType(false, true);

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id86_Int64Data && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read10_Int64Type(false, true);

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id87_ItemData && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read11_ItemType(false, true);

                        paramsRead[0] = true;

                    }

                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id88_StringData && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        o.@Item = Read12_StringType(false, true);

                        paramsRead[0] = true;

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:AmountData, F2LRegistryTypeVer2.xsd:BooleanData, F2LRegistryTypeVer2.xsd:EnumerationData, F2LRegistryTypeVer2.xsd:FlagListData, F2LRegistryTypeVer2.xsd:FloatData, F2LRegistryTypeVer2.xsd:Int64Data, F2LRegistryTypeVer2.xsd:ItemData, F2LRegistryTypeVer2.xsd:StringData");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:AmountData, F2LRegistryTypeVer2.xsd:BooleanData, F2LRegistryTypeVer2.xsd:EnumerationData, F2LRegistryTypeVer2.xsd:FlagListData, F2LRegistryTypeVer2.xsd:FloatData, F2LRegistryTypeVer2.xsd:Int64Data, F2LRegistryTypeVer2.xsd:ItemData, F2LRegistryTypeVer2.xsd:StringData");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations28, ref readerCount28);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.StringType Read12_StringType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id89_StringType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.StringType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.StringType();

            bool[] paramsRead = new bool[3];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id90_MinLen && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@MinLen = System.Xml.XmlConvert.ToInt32(Reader.Value);

                    o.@MinLenSpecified = true;

                    paramsRead[0] = true;

                }

                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id91_MaxLen && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@MaxLen = System.Xml.XmlConvert.ToInt32(Reader.Value);

                    o.@MaxLenSpecified = true;

                    paramsRead[1] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:MinLen, F2LRegistryTypeVer2.xsd:MaxLen");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations29 = 0;

            int readerCount29 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    tmp = ReadString(tmp, false);

                    o.@Value = tmp;

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations29, ref readerCount29);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.ItemType Read11_ItemType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id92_ItemType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.ItemType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.ItemType();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id93_EnumReferenceList && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@EnumReferenceList = Reader.Value;

                    paramsRead[0] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:EnumReferenceList");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations30 = 0;

            int readerCount30 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    tmp = ReadString(tmp, false);

                    o.@Value = tmp;

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations30, ref readerCount30);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.Int64Type Read10_Int64Type(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id94_Int64Type && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.Int64Type o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.Int64Type();

            bool[] paramsRead = new bool[3];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id37_Min && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Min = System.Xml.XmlConvert.ToInt64(Reader.Value);

                    o.@MinSpecified = true;

                    paramsRead[0] = true;

                }

                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id38_Max && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Max = System.Xml.XmlConvert.ToInt64(Reader.Value);

                    o.@MaxSpecified = true;

                    paramsRead[1] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Min, F2LRegistryTypeVer2.xsd:Max");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations31 = 0;

            int readerCount31 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    o.@Value = System.Xml.XmlConvert.ToInt64(Reader.ReadString());

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations31, ref readerCount31);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FloatType Read9_FloatType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id95_FloatType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FloatType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FloatType();

            bool[] paramsRead = new bool[3];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id37_Min && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Min = System.Xml.XmlConvert.ToSingle(Reader.Value);

                    o.@MinSpecified = true;

                    paramsRead[0] = true;

                }

                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id38_Max && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Max = System.Xml.XmlConvert.ToSingle(Reader.Value);

                    o.@MaxSpecified = true;

                    paramsRead[1] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Min, F2LRegistryTypeVer2.xsd:Max");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations32 = 0;

            int readerCount32 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    o.@Value = System.Xml.XmlConvert.ToSingle(Reader.ReadString());

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations32, ref readerCount32);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListType Read8_FlagListType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id96_FlagListType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListType();

            if ((object)(o.@Element) == null) o.@Element = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement> a_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement>)o.@Element;

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id93_EnumReferenceList && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@EnumReferenceList = Reader.Value;

                    paramsRead[1] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:EnumReferenceList");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations33 = 0;

            int readerCount33 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (((object) Reader.LocalName == (object)id97_Element && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        if ((object)(a_0) == null) Reader.Skip(); else a_0.Add(Read7_FlagListTypeElement(false, true));

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Element");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Element");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations33, ref readerCount33);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement Read7_FlagListTypeElement(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.FlagListTypeElement();

            bool[] paramsRead = new bool[1];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations34 = 0;

            int readerCount34 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    tmp = ReadString(tmp, false);

                    o.@Value = tmp;

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations34, ref readerCount34);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationType Read6_EnumerationType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id98_EnumerationType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationType();

            if ((object)(o.@Enumeration) == null) o.@Enumeration = new global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration>();

            global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration> a_0 = (global::System.Collections.Generic.List<global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration>)o.@Enumeration;

            bool[] paramsRead = new bool[1];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations35 = 0;

            int readerCount35 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    if (((object) Reader.LocalName == (object)id39_Enumeration && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                        if ((object)(a_0) == null) Reader.Skip(); else a_0.Add(Read5_EnumerationTypeEnumeration(false, true));

                    }

                    else {

                        UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Enumeration");

                    }

                }

                else {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Enumeration");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations35, ref readerCount35);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration Read5_EnumerationTypeEnumeration(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.EnumerationTypeEnumeration();

            bool[] paramsRead = new bool[1];

            while (Reader.MoveToNextAttribute()) {

                if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o);

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations36 = 0;

            int readerCount36 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    tmp = ReadString(tmp, false);

                    o.@Value = tmp;

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations36, ref readerCount36);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.AmountType Read4_AmountType(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id99_AmountType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id26_F2LRegistryTypeVer2xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.AmountType o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2.AmountType();

            bool[] paramsRead = new bool[3];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id37_Min && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Min = System.Xml.XmlConvert.ToInt64(Reader.Value);

                    o.@MinSpecified = true;

                    paramsRead[0] = true;

                }

                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id38_Max && (object) Reader.NamespaceURI == (object)id26_F2LRegistryTypeVer2xsd)) {

                    o.@Max = System.Xml.XmlConvert.ToInt64(Reader.Value);

                    o.@MaxSpecified = true;

                    paramsRead[1] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LRegistryTypeVer2.xsd:Min, F2LRegistryTypeVer2.xsd:Max");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations37 = 0;

            int readerCount37 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    o.@Value = System.Xml.XmlConvert.ToInt64(Reader.ReadString());

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations37, ref readerCount37);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryTagDataFile Read3_PayvarRegistryTagDataFile(bool isNullable, bool checkType) {

            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;

            bool isNull = false;

            if (isNullable) isNull = ReadNull();

            if (checkType) {

            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_F2LPayvarRegistryVer3xsd)) {

            }

            else

                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);

            }

            if (isNull) return null;

            global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryTagDataFile o;

            o = new global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistryTagDataFile();

            bool[] paramsRead = new bool[2];

            while (Reader.MoveToNextAttribute()) {

                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id100_Tag && (object) Reader.NamespaceURI == (object)id2_F2LPayvarRegistryVer3xsd)) {

                    o.@Tag = Reader.Value;

                    paramsRead[0] = true;

                }

                else if (!IsXmlnsAttribute(Reader.Name)) {

                    UnknownNode((object)o, @"F2LPayvarRegistryVer3.xsd:Tag");

                }

            }

            Reader.MoveToElement();

            if (Reader.IsEmptyElement) {

                Reader.Skip();

                return o;

            }

            Reader.ReadStartElement();

            Reader.MoveToContent();

            int whileIterations38 = 0;

            int readerCount38 = ReaderCount;

            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {

                string tmp = null;

                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {

                    UnknownNode((object)o, @"");

                }

                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 

                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 

                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 

                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {

                    tmp = ReadString(tmp, true);

                    o.@Value = tmp;

                }

                else {

                    UnknownNode((object)o, @"");

                }

                Reader.MoveToContent();

                CheckReaderCount(ref whileIterations38, ref readerCount38);

            }

            ReadEndElement();

            return o;

        }



        global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType Read1_PayvarType(string s) {

            switch (s) {

                case @"Standard": return global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType.@Standard;

                case @"Tournament": return global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType.@Tournament;

                case @"PayvarGroupTemplate": return global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType.@PayvarGroupTemplate;

                case @"SingleMultiTemplate": return global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType.@SingleMultiTemplate;

                default: throw CreateUnknownConstantException(s, typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarType));

            }

        }



        protected override void InitCallbacks() {

        }



        string id62_ControllerType;

        string id40_Description;

        string id45_Item;

        string id69_CustomConfigItemsType;

        string id86_Int64Data;

        string id52_ProgressiveConceptIdentifier;

        string id55_Item;

        string id47_CustomLinkMapsPermitted;

        string id91_MaxLen;

        string id53_ProgressiveConceptRequirements;

        string id35_List;

        string id42_ProgressiveGameLevelIndex;

        string id72_ConfigMenuSection;

        string id93_EnumReferenceList;

        string id61_Authority;

        string id22_ButtonPanelMinBet;

        string id80_OrderInSection;

        string id92_ItemType;

        string id12_WagerCategories;

        string id59_F2XRegistryTypesVer1xsd;

        string id97_Element;

        string id14_CustomConfigItems;

        string id4_PaytableName;

        string id6_PaybackPercentage;

        string id5_PayvarType;

        string id3_Item;

        string id88_StringData;

        string id95_FloatType;

        string id96_FlagListType;

        string id39_Enumeration;

        string id58_Item;

        string id90_MinLen;

        string id50_ProgressiveConcept;

        string id9_ThemeRegistry;

        string id74_Persistent;

        string id46_Item;

        string id23_MaxBet;

        string id94_Int64Type;

        string id21_Denom;

        string id65_StartCredit;

        string id56_DenominationConstraint;

        string id29_HasMidGameWager;

        string id7_MinimumPaybackPercentage;

        string id60_ProgressiveConceptCode;

        string id13_Percentage;

        string id98_EnumerationType;

        string id83_EnumerationData;

        string id18_WinLevels;

        string id37_Min;

        string id87_ItemData;

        string id64_ForcedContribution;

        string id79_SectionName;

        string id27_DoubleUpSupported;

        string id19_WinLevel;

        string id8_Item;

        string id30_Name;

        string id82_BooleanData;

        string id20_SupportedDenominations;

        string id38_Max;

        string id100_Tag;

        string id11_MinimumBitsOfEntropyForRNG;

        string id81_AmountData;

        string id36_Range;

        string id17_ProgressiveConcepts;

        string id73_NameIdentifier;

        string id28_AllowDoubleUpOnJackpotHandpay;

        string id68_ContributionPercent;

        string id76_Modifiability;

        string id67_StartCredits;

        string id75_Data;

        string id10_TagDataFile;

        string id43_Odds;

        string id77_CanModLocal;

        string id71_ConfigMenuSections;

        string id57_DenomRequirement;

        string id26_F2LRegistryTypeVer2xsd;

        string id44_ProgressiveConceptsType;

        string id89_StringType;

        string id70_ConfigItem;

        string id54_ProgressiveConceptRequirement;

        string id78_CanModRemote;

        string id85_FloatData;

        string id41_ProgressiveSupport;

        string id31_Property;

        string id51_ProgressiveConceptType;

        string id49_NonProgressiveLinkMapByDefault;

        string id15_ProgressiveGameLevels;

        string id66_ProgressiveConceptSettings;

        string id24_Properties;

        string id34_ValuePool;

        string id48_Item;

        string id84_FlagListData;

        string id32_Value;

        string id1_PayvarRegistry;

        string id2_F2LPayvarRegistryVer3xsd;

        string id33_MaxBetType;

        string id99_AmountType;

        string id16_ProgressiveGameLevel;

        string id25_Section;

        string id63_ControllerLevel;



        protected override void InitIDs() {

            id62_ControllerType = Reader.NameTable.Add(@"ControllerType");

            id40_Description = Reader.NameTable.Add(@"Description");

            id45_Item = Reader.NameTable.Add(@"LegacyGameLevelLinkingPermitted");

            id69_CustomConfigItemsType = Reader.NameTable.Add(@"CustomConfigItemsType");

            id86_Int64Data = Reader.NameTable.Add(@"Int64Data");

            id52_ProgressiveConceptIdentifier = Reader.NameTable.Add(@"ProgressiveConceptIdentifier");

            id55_Item = Reader.NameTable.Add(@"ProgressiveConceptRequirementType");

            id47_CustomLinkMapsPermitted = Reader.NameTable.Add(@"CustomLinkMapsPermitted");

            id91_MaxLen = Reader.NameTable.Add(@"MaxLen");

            id53_ProgressiveConceptRequirements = Reader.NameTable.Add(@"ProgressiveConceptRequirements");

            id35_List = Reader.NameTable.Add(@"List");

            id42_ProgressiveGameLevelIndex = Reader.NameTable.Add(@"ProgressiveGameLevelIndex");

            id72_ConfigMenuSection = Reader.NameTable.Add(@"ConfigMenuSection");

            id93_EnumReferenceList = Reader.NameTable.Add(@"EnumReferenceList");

            id61_Authority = Reader.NameTable.Add(@"Authority");

            id22_ButtonPanelMinBet = Reader.NameTable.Add(@"ButtonPanelMinBet");

            id80_OrderInSection = Reader.NameTable.Add(@"OrderInSection");

            id92_ItemType = Reader.NameTable.Add(@"ItemType");

            id12_WagerCategories = Reader.NameTable.Add(@"WagerCategories");

            id59_F2XRegistryTypesVer1xsd = Reader.NameTable.Add(@"F2XRegistryTypesVer1.xsd");

            id97_Element = Reader.NameTable.Add(@"Element");

            id14_CustomConfigItems = Reader.NameTable.Add(@"CustomConfigItems");

            id4_PaytableName = Reader.NameTable.Add(@"PaytableName");

            id6_PaybackPercentage = Reader.NameTable.Add(@"PaybackPercentage");

            id5_PayvarType = Reader.NameTable.Add(@"PayvarType");

            id3_Item = Reader.NameTable.Add(@"");

            id88_StringData = Reader.NameTable.Add(@"StringData");

            id95_FloatType = Reader.NameTable.Add(@"FloatType");

            id96_FlagListType = Reader.NameTable.Add(@"FlagListType");

            id39_Enumeration = Reader.NameTable.Add(@"Enumeration");

            id58_Item = Reader.NameTable.Add(@"ProgressiveConceptIdentifierType");

            id90_MinLen = Reader.NameTable.Add(@"MinLen");

            id50_ProgressiveConcept = Reader.NameTable.Add(@"ProgressiveConcept");

            id9_ThemeRegistry = Reader.NameTable.Add(@"ThemeRegistry");

            id74_Persistent = Reader.NameTable.Add(@"Persistent");

            id46_Item = Reader.NameTable.Add(@"LegacyIppLinkMapSelectionPermitted");

            id23_MaxBet = Reader.NameTable.Add(@"MaxBet");

            id94_Int64Type = Reader.NameTable.Add(@"Int64Type");

            id21_Denom = Reader.NameTable.Add(@"Denom");

            id65_StartCredit = Reader.NameTable.Add(@"StartCredit");

            id56_DenominationConstraint = Reader.NameTable.Add(@"DenominationConstraint");

            id29_HasMidGameWager = Reader.NameTable.Add(@"HasMidGameWager");

            id7_MinimumPaybackPercentage = Reader.NameTable.Add(@"MinimumPaybackPercentage");

            id60_ProgressiveConceptCode = Reader.NameTable.Add(@"ProgressiveConceptCode");

            id13_Percentage = Reader.NameTable.Add(@"Percentage");

            id98_EnumerationType = Reader.NameTable.Add(@"EnumerationType");

            id83_EnumerationData = Reader.NameTable.Add(@"EnumerationData");

            id18_WinLevels = Reader.NameTable.Add(@"WinLevels");

            id37_Min = Reader.NameTable.Add(@"Min");

            id87_ItemData = Reader.NameTable.Add(@"ItemData");

            id64_ForcedContribution = Reader.NameTable.Add(@"ForcedContribution");

            id79_SectionName = Reader.NameTable.Add(@"SectionName");

            id27_DoubleUpSupported = Reader.NameTable.Add(@"DoubleUpSupported");

            id19_WinLevel = Reader.NameTable.Add(@"WinLevel");

            id8_Item = Reader.NameTable.Add(@"MinimumPaybackPercentageWithoutProgressives");

            id30_Name = Reader.NameTable.Add(@"Name");

            id82_BooleanData = Reader.NameTable.Add(@"BooleanData");

            id20_SupportedDenominations = Reader.NameTable.Add(@"SupportedDenominations");

            id38_Max = Reader.NameTable.Add(@"Max");

            id100_Tag = Reader.NameTable.Add(@"Tag");

            id11_MinimumBitsOfEntropyForRNG = Reader.NameTable.Add(@"MinimumBitsOfEntropyForRNG");

            id81_AmountData = Reader.NameTable.Add(@"AmountData");

            id36_Range = Reader.NameTable.Add(@"Range");

            id17_ProgressiveConcepts = Reader.NameTable.Add(@"ProgressiveConcepts");

            id73_NameIdentifier = Reader.NameTable.Add(@"NameIdentifier");

            id28_AllowDoubleUpOnJackpotHandpay = Reader.NameTable.Add(@"AllowDoubleUpOnJackpotHandpay");

            id68_ContributionPercent = Reader.NameTable.Add(@"ContributionPercent");

            id76_Modifiability = Reader.NameTable.Add(@"Modifiability");

            id67_StartCredits = Reader.NameTable.Add(@"StartCredits");

            id75_Data = Reader.NameTable.Add(@"Data");

            id10_TagDataFile = Reader.NameTable.Add(@"TagDataFile");

            id43_Odds = Reader.NameTable.Add(@"Odds");

            id77_CanModLocal = Reader.NameTable.Add(@"CanModLocal");

            id71_ConfigMenuSections = Reader.NameTable.Add(@"ConfigMenuSections");

            id57_DenomRequirement = Reader.NameTable.Add(@"DenomRequirement");

            id26_F2LRegistryTypeVer2xsd = Reader.NameTable.Add(@"F2LRegistryTypeVer2.xsd");

            id44_ProgressiveConceptsType = Reader.NameTable.Add(@"ProgressiveConceptsType");

            id89_StringType = Reader.NameTable.Add(@"StringType");

            id70_ConfigItem = Reader.NameTable.Add(@"ConfigItem");

            id54_ProgressiveConceptRequirement = Reader.NameTable.Add(@"ProgressiveConceptRequirement");

            id78_CanModRemote = Reader.NameTable.Add(@"CanModRemote");

            id85_FloatData = Reader.NameTable.Add(@"FloatData");

            id41_ProgressiveSupport = Reader.NameTable.Add(@"ProgressiveSupport");

            id31_Property = Reader.NameTable.Add(@"Property");

            id51_ProgressiveConceptType = Reader.NameTable.Add(@"ProgressiveConceptType");

            id49_NonProgressiveLinkMapByDefault = Reader.NameTable.Add(@"NonProgressiveLinkMapByDefault");

            id15_ProgressiveGameLevels = Reader.NameTable.Add(@"ProgressiveGameLevels");

            id66_ProgressiveConceptSettings = Reader.NameTable.Add(@"ProgressiveConceptSettings");

            id24_Properties = Reader.NameTable.Add(@"Properties");

            id34_ValuePool = Reader.NameTable.Add(@"ValuePool");

            id48_Item = Reader.NameTable.Add(@"NonProgressiveLinkMapSelectionPermitted");

            id84_FlagListData = Reader.NameTable.Add(@"FlagListData");

            id32_Value = Reader.NameTable.Add(@"Value");

            id1_PayvarRegistry = Reader.NameTable.Add(@"PayvarRegistry");

            id2_F2LPayvarRegistryVer3xsd = Reader.NameTable.Add(@"F2LPayvarRegistryVer3.xsd");

            id33_MaxBetType = Reader.NameTable.Add(@"MaxBetType");

            id99_AmountType = Reader.NameTable.Add(@"AmountType");

            id16_ProgressiveGameLevel = Reader.NameTable.Add(@"ProgressiveGameLevel");

            id25_Section = Reader.NameTable.Add(@"Section");

            id63_ControllerLevel = Reader.NameTable.Add(@"ControllerLevel");

        }

    }



    public abstract class XmlSerializer1 : System.Xml.Serialization.XmlSerializer {

        protected override System.Xml.Serialization.XmlSerializationReader CreateReader() {

            return new XmlSerializationReaderPayvarRegistry();

        }

        protected override System.Xml.Serialization.XmlSerializationWriter CreateWriter() {

            return new XmlSerializationWriterPayvarRegistry();

        }

    }



    public sealed class PayvarRegistrySerializer : XmlSerializer1 {



        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {

            return xmlReader.IsStartElement(@"PayvarRegistry", @"F2LPayvarRegistryVer3.xsd");

        }



        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {

            ((XmlSerializationWriterPayvarRegistry)writer).Write34_PayvarRegistry(objectToSerialize);

        }



        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {

            return ((XmlSerializationReaderPayvarRegistry)reader).Read34_PayvarRegistry();

        }

    }



    public partial class XmlSerializerContract : global::System.Xml.Serialization.XmlSerializerImplementation {

        public override global::System.Xml.Serialization.XmlSerializationReader Reader { get { return new XmlSerializationReaderPayvarRegistry(); } }

        public override global::System.Xml.Serialization.XmlSerializationWriter Writer { get { return new XmlSerializationWriterPayvarRegistry(); } }

        System.Collections.Hashtable readMethods = null;

        public override System.Collections.Hashtable ReadMethods {

            get {

                if (readMethods == null) {

                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();

                    _tmp[@"IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry:F2LPayvarRegistryVer3.xsd::False:"] = @"Read34_PayvarRegistry";

                    if (readMethods == null) readMethods = _tmp;

                }

                return readMethods;

            }

        }

        System.Collections.Hashtable writeMethods = null;

        public override System.Collections.Hashtable WriteMethods {

            get {

                if (writeMethods == null) {

                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();

                    _tmp[@"IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry:F2LPayvarRegistryVer3.xsd::False:"] = @"Write34_PayvarRegistry";

                    if (writeMethods == null) writeMethods = _tmp;

                }

                return writeMethods;

            }

        }

        System.Collections.Hashtable typedSerializers = null;

        public override System.Collections.Hashtable TypedSerializers {

            get {

                if (typedSerializers == null) {

                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();

                    _tmp.Add(@"IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry:F2LPayvarRegistryVer3.xsd::False:", new PayvarRegistrySerializer());

                    if (typedSerializers == null) typedSerializers = _tmp;

                }

                return typedSerializers;

            }

        }

        public override System.Boolean CanSerialize(System.Type type) {

            if (type == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry)) return true;

            return false;

        }

        public override System.Xml.Serialization.XmlSerializer GetSerializer(System.Type type) {

            if (type == typeof(global::IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3.PayvarRegistry)) return new PayvarRegistrySerializer();

            return null;

        }

    }

}

#pragma warning restore
