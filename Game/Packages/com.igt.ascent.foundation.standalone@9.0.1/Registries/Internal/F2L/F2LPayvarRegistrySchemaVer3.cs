// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2;IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;CustomConfigItemsType=F2LRegistryTypeVer2.CustomConfigItemsType;PropertiesTypeSection=F2LRegistryTypeVer2.PropertiesTypeSection</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2L.F2LPayvarRegistryVer3
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2L.F2LRegistryTypeVer2;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using CustomConfigItemsType=F2LRegistryTypeVer2.CustomConfigItemsType;
    using PropertiesTypeSection=F2LRegistryTypeVer2.PropertiesTypeSection;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Game discovery registry for describing a payvar (short for "pay variation").  Contains data related to a paytable and the initial state of paytable related configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LPayvarRegistryVer3.xsd")]
    [XmlRootAttribute(Namespace="F2LPayvarRegistryVer3.xsd", IsNullable=false)]
    public partial class PayvarRegistry
    {
        #region Private fields
        private string paytableNameField;
        private PayvarType payvarTypeField;
        private decimal paybackPercentageField;
        private decimal minimumPaybackPercentageField;
        private System.Nullable<decimal> minimumPaybackPercentageWithoutProgressivesField;
        private string themeRegistryField;
        private PayvarRegistryTagDataFile tagDataFileField;
        private System.Nullable<uint> minimumBitsOfEntropyForRNGField;
        private List<decimal> wagerCategoriesField;
        private CustomConfigItemsType customConfigItemsField;
        private List<PayvarRegistryProgressiveGameLevel> progressiveGameLevelsField;
        private ProgressiveConceptsType progressiveConceptsField;
        private List<PayvarRegistryWinLevel> winLevelsField;
        private List<uint> supportedDenominationsField;
        private MaxBetType buttonPanelMinBetField;
        private MaxBetType maxBetField;
        private List<PropertiesTypeSection> propertiesField;
        private bool? doubleUpSupportedField;
        private bool? allowDoubleUpOnJackpotHandpayField;
        private bool? hasMidGameWagerField;
        #endregion
        
        /// <summary>
        /// PayvarRegistry class constructor
        /// </summary>
        public PayvarRegistry()
        {
            propertiesField = new List<PropertiesTypeSection>();
            supportedDenominationsField = new List<uint>();
            winLevelsField = new List<PayvarRegistryWinLevel>();
            progressiveGameLevelsField = new List<PayvarRegistryProgressiveGameLevel>();
            wagerCategoriesField = new List<decimal>();
            payvarTypeField = PayvarType.Standard;
        }
        
        /// <summary>
        /// Paytable name used for display purposes as assigned by game designer. (e.g. AVV036310)
        /// </summary>
        public string PaytableName
        {
            get
            {
                return paytableNameField;
            }
            set
            {
                paytableNameField = value;
            }
        }
        
        /// <summary>
        /// Indicates the payvar type.
        /// </summary>
        public PayvarType PayvarType
        {
            get
            {
                return payvarTypeField;
            }
            set
            {
                payvarTypeField = value;
            }
        }
        
        /// <summary>
        /// This is the theoretical maximum payback percentage (including progressive contributions where applicable).
        /// </summary>
        public decimal PaybackPercentage
        {
            get
            {
                return paybackPercentageField;
            }
            set
            {
                paybackPercentageField = value;
            }
        }
        
        /// <summary>
        /// This is the theoretical minimum payback percentage (including progressive contributions where applicable).  If the game designer has included the (mandatory) progressive contribution as part of this value, then the MinimumPaybackPercentageWithoutProgressives optional element must also be included.
        /// </summary>
        public decimal MinimumPaybackPercentage
        {
            get
            {
                return minimumPaybackPercentageField;
            }
            set
            {
                minimumPaybackPercentageField = value;
            }
        }
        
        /// <summary>
        /// This is the theoretical minimum payback percentage excluding progressive contributions.  This element must be included if the game designer has included the (mandatory) progressive contribution as part of the MinimumPaybackPercentage element.
        /// </summary>
        public decimal MinimumPaybackPercentageWithoutProgressives
        {
            get
            {
                if (minimumPaybackPercentageWithoutProgressivesField.HasValue)
                {
                    return minimumPaybackPercentageWithoutProgressivesField.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                minimumPaybackPercentageWithoutProgressivesField = value;
            }
        }
        
        [XmlIgnore]
        public bool MinimumPaybackPercentageWithoutProgressivesSpecified
        {
            get
            {
                return minimumPaybackPercentageWithoutProgressivesField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    minimumPaybackPercentageWithoutProgressivesField = null;
                }
            }
        }
        
        /// <summary>
        /// Relative path to theme registry to which this payvar belongs to.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ThemeRegistry
        {
            get
            {
                return themeRegistryField;
            }
            set
            {
                themeRegistryField = value;
            }
        }
        
        /// <summary>
        /// Custom Payvar related file for use with the game.  Passed to the game during startup.  Opaque to the Foundation.
        /// </summary>
        public PayvarRegistryTagDataFile TagDataFile
        {
            get
            {
                return tagDataFileField;
            }
            set
            {
                tagDataFileField = value;
            }
        }
        
        /// <summary>
        /// The minimum number of bits of entropy used by the RNG that is necessary for the game to achieve all outcomes. The RNG will have at least this many bits of entropy available per outcome request.
        /// </summary>
        public uint MinimumBitsOfEntropyForRNG
        {
            get
            {
                if (minimumBitsOfEntropyForRNGField.HasValue)
                {
                    return minimumBitsOfEntropyForRNGField.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                minimumBitsOfEntropyForRNGField = value;
            }
        }
        
        [XmlIgnore]
        public bool MinimumBitsOfEntropyForRNGSpecified
        {
            get
            {
                return minimumBitsOfEntropyForRNGField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    minimumBitsOfEntropyForRNGField = null;
                }
            }
        }
        
        /// <summary>
        /// Contains all Wager Category information.
        /// </summary>
        [XmlArrayItemAttribute("Percentage", IsNullable=false)]
        public List<decimal> WagerCategories
        {
            get
            {
                return wagerCategoriesField;
            }
            set
            {
                wagerCategoriesField = value;
            }
        }
        
        /// <summary>
        /// Contains all custom configuration items being declared for the payvar scope.  Custom config items are items stored for the game by the Foundation, but are not otherwise interpreted or configured except through the use of game specific plug-in menus and config rule scripts.
        /// </summary>
        public CustomConfigItemsType CustomConfigItems
        {
            get
            {
                return customConfigItemsField;
            }
            set
            {
                customConfigItemsField = value;
            }
        }
        
        /// <summary>
        /// The payvar declares the set of progressive game levels that may be linked to progressive controller levels.
        /// </summary>
        [XmlArrayItemAttribute("ProgressiveGameLevel", IsNullable=false)]
        public List<PayvarRegistryProgressiveGameLevel> ProgressiveGameLevels
        {
            get
            {
                return progressiveGameLevelsField;
            }
            set
            {
                progressiveGameLevelsField = value;
            }
        }
        
        /// <summary>
        /// The list of progressive concepts supported by the payvar.  If this element is omitted then game-levels (if any) may be linked individually in a legacy manner (i.e. without the use of Progressive Concept Identifiers and Link Maps).
        /// </summary>
        public ProgressiveConceptsType ProgressiveConcepts
        {
            get
            {
                return progressiveConceptsField;
            }
            set
            {
                progressiveConceptsField = value;
            }
        }
        
        /// <summary>
        /// The list of wins associated with the paytable (AKA "win categories").  Used by G2S.
        /// </summary>
        [XmlArrayItemAttribute("WinLevel", IsNullable=false)]
        public List<PayvarRegistryWinLevel> WinLevels
        {
            get
            {
                return winLevelsField;
            }
            set
            {
                winLevelsField = value;
            }
        }
        
        /// <summary>
        /// The list of denominations supported by this payvar.
        /// </summary>
        [XmlArrayItemAttribute("Denom", IsNullable=false)]
        public List<uint> SupportedDenominations
        {
            get
            {
                return supportedDenominationsField;
            }
            set
            {
                supportedDenominationsField = value;
            }
        }
        
        /// <summary>
        /// Minimum bet in credits that the button panel is allowed to display. If MaxBetResolution for the theme is PER GAME or PER DENOMINATION then this element must exist or it is defaulted to 0 to indicate there is no button panel min bet, otherwise min bet is setup in the theme registry.
        /// </summary>
        public MaxBetType ButtonPanelMinBet
        {
            get
            {
                return buttonPanelMinBetField;
            }
            set
            {
                buttonPanelMinBetField = value;
            }
        }
        
        /// <summary>
        /// Maximum bet in credits. If MaxBetResolution for the theme is PER GAME or PER DENOMINATION then this element must exist.
        /// </summary>
        public MaxBetType MaxBet
        {
            get
            {
                return maxBetField;
            }
            set
            {
                maxBetField = value;
            }
        }
        
        /// <summary>
        /// Provides flexible/loosely coupled way of declaring static properties visible to the AI/Foundation.  Example: An optional AI package may contain a  custom Game Selection Menu that may use properties to identify games that it is compatible with it.  Properties should be organized under sections and should be viewed as Key, Value pairs.
        /// </summary>
        [XmlArrayItemAttribute("Section", Namespace="F2LRegistryTypeVer2.xsd", IsNullable=false)]
        public List<PropertiesTypeSection> Properties
        {
            get
            {
                return propertiesField;
            }
            set
            {
                propertiesField = value;
            }
        }
        
        /// <summary>
        /// True if this payvar supports double up.  This is an optional element with a default value of "false" if not present.
        /// </summary>
        public bool DoubleUpSupported
        {
            get
            {
                if (doubleUpSupportedField.HasValue)
                {
                    return doubleUpSupportedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                doubleUpSupportedField = value;
            }
        }
        
        [XmlIgnore]
        public bool DoubleUpSupportedSpecified
        {
            get
            {
                return doubleUpSupportedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    doubleUpSupportedField = null;
                }
            }
        }
        
        /// <summary>
        /// True if this payvar allows double up on jackpot handpay.  When True, DoubleUpSupported needs to be true.  This is an optional element with a default value of "false" if not present.
        /// </summary>
        public bool AllowDoubleUpOnJackpotHandpay
        {
            get
            {
                if (allowDoubleUpOnJackpotHandpayField.HasValue)
                {
                    return allowDoubleUpOnJackpotHandpayField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                allowDoubleUpOnJackpotHandpayField = value;
            }
        }
        
        [XmlIgnore]
        public bool AllowDoubleUpOnJackpotHandpaySpecified
        {
            get
            {
                return allowDoubleUpOnJackpotHandpayField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    allowDoubleUpOnJackpotHandpayField = null;
                }
            }
        }
        
        /// <summary>
        /// If the game uses mid game wagers. If so the foundation will delay game start messaging for protocols until the game is complete to allow for possible wager changes.
        /// </summary>
        public bool HasMidGameWager
        {
            get
            {
                if (hasMidGameWagerField.HasValue)
                {
                    return hasMidGameWagerField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                hasMidGameWagerField = value;
            }
        }
        
        [XmlIgnore]
        public bool HasMidGameWagerSpecified
        {
            get
            {
                return hasMidGameWagerField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    hasMidGameWagerField = null;
                }
            }
        }
    }
    
    /// <summary>
    /// Enumerated list of payvar types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2LPayvarRegistryVer3.xsd")]
    public enum PayvarType
    {
        Standard,
        Tournament,
        PayvarGroupTemplate,
        SingleMultiTemplate,
    }
    
    /// <summary>
    /// Custom Payvar related file for use with the game.  Passed to the game during startup.  Opaque to the Foundation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LPayvarRegistryVer3.xsd")]
    public partial class PayvarRegistryTagDataFile
    {
        #region Private fields
        private string tagField;
        private string valueField;
        #endregion
        
        /// <summary>
        /// Custom payvar related data for use with the game.  Passed to the game during startup.  Opaque to the Foundation.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Tag
        {
            get
            {
                return tagField;
            }
            set
            {
                tagField = value;
            }
        }
        
        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// A progressive concept requirement.  Note that ALL constraint sub-elements must be met for this ProgressiveConceptRequirement to be met.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2LPayvarRegistryVer3.xsd")]
    public partial class ProgressiveConceptRequirementType
    {
        #region Private fields
        private List<uint> denominationConstraintField;
        #endregion
        
        /// <summary>
        /// ProgressiveConceptRequirementType class constructor
        /// </summary>
        public ProgressiveConceptRequirementType()
        {
            denominationConstraintField = new List<uint>();
        }
        
        /// <summary>
        /// List of valid denominations for this progressive concept requirement.  If this element is omitted then ALL denominations supported by the payvar are considered valid.
        /// </summary>
        [XmlArrayItemAttribute("DenomRequirement", IsNullable=false)]
        public List<uint> DenominationConstraint
        {
            get
            {
                return denominationConstraintField;
            }
            set
            {
                denominationConstraintField = value;
            }
        }
    }
    
    /// <summary>
    /// A progressive concept supported by the payvar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2LPayvarRegistryVer3.xsd")]
    public partial class ProgressiveConceptType
    {
        #region Private fields
        private ProgressiveConceptIdentifierType progressiveConceptIdentifierField;
        private List<ProgressiveConceptRequirementType> progressiveConceptRequirementsField;
        #endregion
        
        /// <summary>
        /// ProgressiveConceptType class constructor
        /// </summary>
        public ProgressiveConceptType()
        {
            progressiveConceptRequirementsField = new List<ProgressiveConceptRequirementType>();
        }
        
        /// <summary>
        /// The progressive concept identifier that determines which associated progressive Link Maps may be applied (assuming progressive concept requirements are met).
        /// </summary>
        public ProgressiveConceptIdentifierType ProgressiveConceptIdentifier
        {
            get
            {
                return progressiveConceptIdentifierField;
            }
            set
            {
                progressiveConceptIdentifierField = value;
            }
        }
        
        /// <summary>
        /// List of progressive concept requirements.  If the requirements of ONE or MORE ProgressiveConceptRequirement elements are met, then the ProgressiveConceptIdentifier is considered acceptable for this payvar.  If this element is omitted then the ProgressiveConceptIdentifier is considered to always be valid for this payvar.
        /// </summary>
        [XmlArrayItemAttribute("ProgressiveConceptRequirement", IsNullable=false)]
        public List<ProgressiveConceptRequirementType> ProgressiveConceptRequirements
        {
            get
            {
                return progressiveConceptRequirementsField;
            }
            set
            {
                progressiveConceptRequirementsField = value;
            }
        }
    }
    
    /// <summary>
    /// The list of progressive concepts supported by the payvar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2LPayvarRegistryVer3.xsd")]
    public partial class ProgressiveConceptsType
    {
        #region Private fields
        private List<ProgressiveConceptType> progressiveConceptField;
        private bool? legacyGameLevelLinkingPermittedField;
        private bool? legacyIppLinkMapSelectionPermittedField;
        private bool? customLinkMapsPermittedField;
        private bool? nonProgressiveLinkMapSelectionPermittedField;
        private bool? nonProgressiveLinkMapByDefaultField;
        #endregion
        
        /// <summary>
        /// ProgressiveConceptsType class constructor
        /// </summary>
        public ProgressiveConceptsType()
        {
            progressiveConceptField = new List<ProgressiveConceptType>();
        }
        
        /// <summary>
        /// A progressive concept supported by the payvar. In case the operator selected link map conflicts with the ProgressiveGameLevel ControllerType, the link map settings will take precedence over the setting and overrides on a per level-basis.
        /// </summary>
        [XmlElement("ProgressiveConcept")]
        public List<ProgressiveConceptType> ProgressiveConcept
        {
            get
            {
                return progressiveConceptField;
            }
            set
            {
                progressiveConceptField = value;
            }
        }
        
        /// <summary>
        /// If "true" this payvar permits the game-levels to be linked individually to controller-levels (e.g. by the operator) as a selectable alternative to a qualifying Link Map.  Note:  If "true", the theme may need to implement additional runtime configuration validation (e.g. Report executable configuration validation and/or game-side tilts).  If omitted this value defaults to "false".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool LegacyGameLevelLinkingPermitted
        {
            get
            {
                if (legacyGameLevelLinkingPermittedField.HasValue)
                {
                    return legacyGameLevelLinkingPermittedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                legacyGameLevelLinkingPermittedField = value;
            }
        }
        
        [XmlIgnore]
        public bool LegacyGameLevelLinkingPermittedSpecified
        {
            get
            {
                return legacyGameLevelLinkingPermittedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    legacyGameLevelLinkingPermittedField = null;
                }
            }
        }
        
        /// <summary>
        /// If "true" this payvar allows "Legacy IPP" to be a LinkId/Link Map selection (offered to the operator), effectively disabling the progressive concept logic and relying on legacy IPP linking and validation logic. If omitted this value defaults to "false".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool LegacyIppLinkMapSelectionPermitted
        {
            get
            {
                if (legacyIppLinkMapSelectionPermittedField.HasValue)
                {
                    return legacyIppLinkMapSelectionPermittedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                legacyIppLinkMapSelectionPermittedField = value;
            }
        }
        
        [XmlIgnore]
        public bool LegacyIppLinkMapSelectionPermittedSpecified
        {
            get
            {
                return legacyIppLinkMapSelectionPermittedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    legacyIppLinkMapSelectionPermittedField = null;
                }
            }
        }
        
        /// <summary>
        /// Custom Link Maps are Link Maps created by the operator (or by other mechanisms created dynamically in the field).  If "true", custom Link Maps are permitted as selectable options (to the operator) in addition to Link Maps that qualify based on Progressive Concept Identifiers.  Note:  If "true", the theme may need to implement additional runtime configuration validation (e.g. Report executable configuration validation and/or game-side tilts).  If omitted this value defaults to "false".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool CustomLinkMapsPermitted
        {
            get
            {
                if (customLinkMapsPermittedField.HasValue)
                {
                    return customLinkMapsPermittedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                customLinkMapsPermittedField = value;
            }
        }
        
        [XmlIgnore]
        public bool CustomLinkMapsPermittedSpecified
        {
            get
            {
                return customLinkMapsPermittedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    customLinkMapsPermittedField = null;
                }
            }
        }
        
        /// <summary>
        /// If "true" this payvar allows "No Progressives" to be a valid selection (by the operator), allowing the equivalent of a link map configuration such that no game-levels are linked to controller-levels.  If omitted this value defaults to "false".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool NonProgressiveLinkMapSelectionPermitted
        {
            get
            {
                if (nonProgressiveLinkMapSelectionPermittedField.HasValue)
                {
                    return nonProgressiveLinkMapSelectionPermittedField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                nonProgressiveLinkMapSelectionPermittedField = value;
            }
        }
        
        [XmlIgnore]
        public bool NonProgressiveLinkMapSelectionPermittedSpecified
        {
            get
            {
                return nonProgressiveLinkMapSelectionPermittedField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    nonProgressiveLinkMapSelectionPermittedField = null;
                }
            }
        }
        
        /// <summary>
        /// If "true" the default selection of link maps for this payvar will populate to "No Progressives" if "NonProgressiveLinkMapSelectionPermitted" is set to true.  If omitted this value defaults to "false". If the "NonProgressiveLinkMapSelectionPermitted" is set to false and "NonProgressiveLinkMapByDefault is set to true, this will result in a semantic error and an invalid configuration.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool NonProgressiveLinkMapByDefault
        {
            get
            {
                if (nonProgressiveLinkMapByDefaultField.HasValue)
                {
                    return nonProgressiveLinkMapByDefaultField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                nonProgressiveLinkMapByDefaultField = value;
            }
        }
        
        [XmlIgnore]
        public bool NonProgressiveLinkMapByDefaultSpecified
        {
            get
            {
                return nonProgressiveLinkMapByDefaultField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    nonProgressiveLinkMapByDefaultField = null;
                }
            }
        }
    }
    
    /// <summary>
    /// A progressive game level entry.  The progressive game level entry is referenced by a zero based index based on the order of entries in this list (e.g. the Outcome List references this list using an index number).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LPayvarRegistryVer3.xsd")]
    public partial class PayvarRegistryProgressiveGameLevel
    {
        #region Private fields
        private string descriptionField;
        private string controllerTypeField;
        private System.Nullable<uint> controllerLevelField;
        private System.Nullable<decimal> forcedContributionField;
        private System.Nullable<ulong> startCreditField;
        private PayvarRegistryProgressiveGameLevelProgressiveConceptSettings progressiveConceptSettingsField;
        #endregion
        
        /// <summary>
        /// Descriptive name of game level.
        /// </summary>
        public string Description
        {
            get
            {
                return descriptionField;
            }
            set
            {
                descriptionField = value;
            }
        }
        
        /// <summary>
        /// The payvar may optionally require  a game level be automatically linked to a controller and controller level.  When this is done the payvar must specify a specific controller type by name, as well as the controller level (e.g. for WAP ControllerType="wap", ControllerLevel=0).  DEPRECATED in favor of Progressive Concept elements and Link Maps.
        /// </summary>
        public string ControllerType
        {
            get
            {
                return controllerTypeField;
            }
            set
            {
                controllerTypeField = value;
            }
        }
        
        /// <summary>
        /// Progressive controller level for auto-linking.   DEPRECATED in favor of Progressive Concept elements and Link Maps.
        /// </summary>
        public uint ControllerLevel
        {
            get
            {
                if (controllerLevelField.HasValue)
                {
                    return controllerLevelField.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                controllerLevelField = value;
            }
        }
        
        [XmlIgnore]
        public bool ControllerLevelSpecified
        {
            get
            {
                return controllerLevelField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    controllerLevelField = null;
                }
            }
        }
        
        /// <summary>
        /// Forced contribution percentage.  DEPRECATED in favor of Progressive Concept elements and Link Maps.
        /// </summary>
        public decimal ForcedContribution
        {
            get
            {
                if (forcedContributionField.HasValue)
                {
                    return forcedContributionField.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                forcedContributionField = value;
            }
        }
        
        [XmlIgnore]
        public bool ForcedContributionSpecified
        {
            get
            {
                return forcedContributionField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    forcedContributionField = null;
                }
            }
        }
        
        /// <summary>
        /// Number of start credits for the progressive level.  DEPRECATED in favor of Progressive Concept elements and Link Maps.
        /// </summary>
        public ulong StartCredit
        {
            get
            {
                if (startCreditField.HasValue)
                {
                    return startCreditField.Value;
                }
                else
                {
                    return default(ulong);
                }
            }
            set
            {
                startCreditField = value;
            }
        }
        
        [XmlIgnore]
        public bool StartCreditSpecified
        {
            get
            {
                return startCreditField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    startCreditField = null;
                }
            }
        }
        
        /// <summary>
        /// List of settings, for a game-level, that may be used by Link Map validation rules.  (Link Maps are related to the Progressive Concept elements).
        /// </summary>
        public PayvarRegistryProgressiveGameLevelProgressiveConceptSettings ProgressiveConceptSettings
        {
            get
            {
                return progressiveConceptSettingsField;
            }
            set
            {
                progressiveConceptSettingsField = value;
            }
        }
    }
    
    /// <summary>
    /// List of settings, for a game-level, that may be used by Link Map validation rules.  (Link Maps are related to the Progressive Concept elements).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LPayvarRegistryVer3.xsd")]
    public partial class PayvarRegistryProgressiveGameLevelProgressiveConceptSettings
    {
        #region Private fields
        private System.Nullable<ulong> startCreditsField;
        private string contributionPercentField;
        #endregion
        
        /// <summary>
        /// Start credits for use in Progressive Concept Link Map validation.  This value (scaled by denomination) may be compared to linkable controller-levels, as per Link Map constraints.
        /// </summary>
        public ulong StartCredits
        {
            get
            {
                if (startCreditsField.HasValue)
                {
                    return startCreditsField.Value;
                }
                else
                {
                    return default(ulong);
                }
            }
            set
            {
                startCreditsField = value;
            }
        }
        
        [XmlIgnore]
        public bool StartCreditsSpecified
        {
            get
            {
                return startCreditsField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    startCreditsField = null;
                }
            }
        }
        
        /// <summary>
        /// Contribution percent for use in Progressive Concept Link Map validation.  This value may be compared to linkable controller-levels, as per Link Map constraints.  Recommend at least 3 decimal digits of precision.  NOTE: The precision matters.  For example, entering 0.04 verses 0.040 makes a difference when compared to a controller-level contribution value of 0.041; 0.04 may pass due to rounding to a lower precision value, while 0.040 may fail (pass/fail also depends on Link Map tolerance settings).
        /// </summary>
        public string ContributionPercent
        {
            get
            {
                return contributionPercentField;
            }
            set
            {
                contributionPercentField = value;
            }
        }
    }
    
    /// <summary>
    /// A win level entry.  The win level entry is referenced by a zero based index based on the order of entries in this list (e.g. the Outcome List references this list using an index number).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LPayvarRegistryVer3.xsd")]
    public partial class PayvarRegistryWinLevel
    {
        #region Private fields
        private string descriptionField;
        private PayvarRegistryWinLevelProgressiveSupport progressiveSupportField;
        #endregion
        
        /// <summary>
        /// Name or description of this win level.
        /// </summary>
        public string Description
        {
            get
            {
                return descriptionField;
            }
            set
            {
                descriptionField = value;
            }
        }
        
        /// <summary>
        /// Added if the level supports progressive
        /// </summary>
        public PayvarRegistryWinLevelProgressiveSupport ProgressiveSupport
        {
            get
            {
                return progressiveSupportField;
            }
            set
            {
                progressiveSupportField = value;
            }
        }
    }
    
    /// <summary>
    /// Added if the level supports progressive
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2LPayvarRegistryVer3.xsd")]
    public partial class PayvarRegistryWinLevelProgressiveSupport
    {
        #region Private fields
        private ushort progressiveGameLevelIndexField;
        private ulong oddsField;
        #endregion
        
        /// <summary>
        /// Progressive game level associated with the win level.
        /// </summary>
        public ushort ProgressiveGameLevelIndex
        {
            get
            {
                return progressiveGameLevelIndexField;
            }
            set
            {
                progressiveGameLevelIndexField = value;
            }
        }
        
        /// <summary>
        /// Odds associated with the win level (for G2S). The value of this element specifies the n in "1 in n" type of odd notation.
        /// </summary>
        public ulong Odds
        {
            get
            {
                return oddsField;
            }
            set
            {
                oddsField = value;
            }
        }
    }
    
    /// <summary>
    /// List of valid denominations for this progressive concept requirement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2LPayvarRegistryVer3.xsd")]
    [XmlRootAttribute(Namespace="F2LPayvarRegistryVer3.xsd", IsNullable=true)]
    public partial class DenominationConstraintType
    {
        #region Private fields
        private List<uint> denomRequirementField;
        #endregion
        
        /// <summary>
        /// DenominationConstraintType class constructor
        /// </summary>
        public DenominationConstraintType()
        {
            denomRequirementField = new List<uint>();
        }
        
        /// <summary>
        /// Valid denomination for the denomination constraint.
        /// </summary>
        [XmlElement("DenomRequirement")]
        public List<uint> DenomRequirement
        {
            get
            {
                return denomRequirementField;
            }
            set
            {
                denomRequirementField = value;
            }
        }
    }
}
#pragma warning restore
