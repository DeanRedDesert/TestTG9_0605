// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XChooserRegistryVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;Version=IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1.Version</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XChooserRegistryVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using Version=IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1.Version;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Registry which defines chooser information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XChooserRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XChooserRegistryVer1.xsd", IsNullable=false)]
    public partial class ChooserRegistry
    {
        #region Private fields
        private Version requiredVersionField;
        private string clientVersionField;
        private string chooserNameField;
        private string clientProcessNameField;
        private string commandLineField;
        private List<CommandLineArgumentsArgument> commandLineArgumentsField;
        private TagDataFileType tagDataFileField;
        private List<CustomConfigItemsTypeConfigItem> customConfigItemsField;
        private ChooserRegistryInstallationRestriction installationRestrictionField;
        private string chooserDesignatorField;
        private ChooserDefinitionSupport chooserDefinitionField;
        private List<ExtensionImportListExtensionImport> extensionImportListField;
        private bool cashoutServiceButtonsRequiredField;
        private bool emulatedMediaControllerEnabledField;
        #endregion
        
        /// <summary>
        /// ChooserRegistry class constructor
        /// </summary>
        public ChooserRegistry()
        {
            extensionImportListField = new List<ExtensionImportListExtensionImport>();
            customConfigItemsField = new List<CustomConfigItemsTypeConfigItem>();
            commandLineArgumentsField = new List<CommandLineArgumentsArgument>();
            installationRestrictionField = ChooserRegistryInstallationRestriction.OnlyThemesInBundle;
            chooserDefinitionField = ChooserDefinitionSupport.NotSupported;
            cashoutServiceButtonsRequiredField = true;
            emulatedMediaControllerEnabledField = true;
        }
        
        /// <summary>
        /// The Version of the CTC required for this chooser.  The major version must match, and the minor version must be less than or equal to the CTC minor version.
        /// </summary>
        public Version RequiredVersion
        {
            get
            {
                return requiredVersionField;
            }
            set
            {
                requiredVersionField = value;
            }
        }
        
        /// <summary>
        /// Defines the chooser version. Displayed in operator menu.
        /// </summary>
        public string ClientVersion
        {
            get
            {
                return clientVersionField;
            }
            set
            {
                clientVersionField = value;
            }
        }
        
        /// <summary>
        /// Defines the chooser name.
        /// </summary>
        public string ChooserName
        {
            get
            {
                return chooserNameField;
            }
            set
            {
                chooserNameField = value;
            }
        }
        
        /// <summary>
        /// Name of the executable to run in order to launch this chooser
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ClientProcessName
        {
            get
            {
                return clientProcessNameField;
            }
            set
            {
                clientProcessNameField = value;
            }
        }
        
        /// <summary>
        /// Named arguments can be used to compose the command line used to launch the executable. They should be prefixed with “-g” flag to be distinguished from Foundation side arguments.  For example, an argument named "Arg1" with a value of "ArgOne", and "Arg2" with a value of "ArgTwo" can be referenced in this element as "-g1$(Arg1) –g2$(Arg2)", such that the executable will be launched as  "absolute_path/client.exe –g1ArgOne –g2ArgTwo".
        /// The Foundation will also provide the variable "PackageRoot" so files may be referenced relative to the package root, For example, "$(PackageRoot)/relative_path/client.dll"
        /// </summary>
        public string CommandLine
        {
            get
            {
                return commandLineField;
            }
            set
            {
                commandLineField = value;
            }
        }
        
        /// <summary>
        /// Collection of arguments to be used as references in a CommandLineType element.
        /// </summary>
        [XmlArrayItemAttribute("Argument", Namespace="F2XRegistryTypesVer1.xsd", IsNullable=false)]
        public List<CommandLineArgumentsArgument> CommandLineArguments
        {
            get
            {
                return commandLineArgumentsField;
            }
            set
            {
                commandLineArgumentsField = value;
            }
        }
        
        /// <summary>
        /// Custom executable-related file for use with the executable.  Passed to the executable during startup.  Opaque to the Foundation.
        /// </summary>
        public TagDataFileType TagDataFile
        {
            get
            {
                return tagDataFileField;
            }
            set
            {
                tagDataFileField = value;
            }
        }
        
        /// <summary>
        /// Contains all custom configuration items being declared for this scope. Custom config items are items stored by the Selection Manager, but are not otherwise interpreted or configured at this time.
        /// </summary>
        [XmlArrayItemAttribute("ConfigItem", Namespace="F2XRegistryTypesVer1.xsd", IsNullable=false)]
        public List<CustomConfigItemsTypeConfigItem> CustomConfigItems
        {
            get
            {
                return customConfigItemsField;
            }
            set
            {
                customConfigItemsField = value;
            }
        }
        
        /// <summary>
        /// Defines the level of restriction for games that are supported by this chooser configuration.
        /// </summary>
        public ChooserRegistryInstallationRestriction InstallationRestriction
        {
            get
            {
                return installationRestrictionField;
            }
            set
            {
                installationRestrictionField = value;
            }
        }
        
        /// <summary>
        /// Unique Chooser designator with fixed length of 6 characters; the UUUUUU piece of CHFFFUUUUUUSRR from the naming convention for Choosers. This must be unique across all Choosers.
        /// </summary>
        public string ChooserDesignator
        {
            get
            {
                return chooserDesignatorField;
            }
            set
            {
                chooserDesignatorField = value;
            }
        }
        
        /// <summary>
        /// Defines the level of Chooser Definition support for this Chooser.
        /// </summary>
        public ChooserDefinitionSupport ChooserDefinition
        {
            get
            {
                return chooserDefinitionField;
            }
            set
            {
                chooserDefinitionField = value;
            }
        }
        
        /// <summary>
        /// Defines extensions (i.e. add-on content) that may be linked to the chooser.
        /// </summary>
        [XmlArrayAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
        [XmlArrayItemAttribute("ExtensionImport", IsNullable=false)]
        public List<ExtensionImportListExtensionImport> ExtensionImportList
        {
            get
            {
                return extensionImportListField;
            }
            set
            {
                extensionImportListField = value;
            }
        }
        
        /// <summary>
        /// Indicates the Chooser requirement for the EGM to have either physical or emulated cashout and service buttons. This element will default to true, and if the flag is missing it is presumed that the physical or emulated Cashout and Service buttons are required.
        /// </summary>
        public bool CashoutServiceButtonsRequired
        {
            get
            {
                return cashoutServiceButtonsRequiredField;
            }
            set
            {
                cashoutServiceButtonsRequiredField = value;
            }
        }
        
        /// <summary>
        /// Flag indicating whether to use Emulated Media Controller (true/false). If omitted, EMC will be enabled.
        /// </summary>
        public bool EmulatedMediaControllerEnabled
        {
            get
            {
                return emulatedMediaControllerEnabledField;
            }
            set
            {
                emulatedMediaControllerEnabledField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XChooserRegistryVer1.xsd")]
    public enum ChooserRegistryInstallationRestriction
    {
        OnlyThemesInBundle,
        AnyThemes,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XChooserRegistryVer1.xsd")]
    public enum ChooserDefinitionSupport
    {
        /// <summary>
        /// Chooser does not support Chooser Definition.  No Chooser Definition functionality will be provided.
        /// </summary>
        NotSupported,
        /// <summary>
        /// Chooser supports Chooser Definition, but does not require it.  The Chooser will function with or without a linked Chooser Definition.
        /// </summary>
        Optional,
        /// <summary>
        /// Chooser supports Chooser Definition, and it is required.  The Chooser will not function without a linked Chooser Definition.
        /// </summary>
        Required,
    }
}
#pragma warning restore
