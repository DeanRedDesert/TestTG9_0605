// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XGameSetInterfaceRegistryVer2</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;IGT.Game.Core.Registries.Internal.F2X.F2XBaseExtensionInterfaceDefinitionRegistryVer1</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XGameSetInterfaceRegistryVer2
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using IGT.Game.Core.Registries.Internal.F2X.F2XBaseExtensionInterfaceDefinitionRegistryVer1;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Registry for describing the interface for the game set extension. This interface is used to associate the Game Set Configuration Data File(s) (GSCDF) with a Game Set Definition File (GSDF).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd", IsNullable=false)]
    public partial class GameSetInterfaceRegistry : ExtensionInterfaceDefinitionRegistry
    {
        #region Private fields
        private List<VersionedSection> versionedGameSetSectionsField;
        #endregion
        
        /// <summary>
        /// GameSetInterfaceRegistry class constructor
        /// </summary>
        public GameSetInterfaceRegistry()
        {
            versionedGameSetSectionsField = new List<VersionedSection>();
        }
        
        /// <summary>
        /// Contains a list of game set definitions that must be provided to meet the interface definition's requirements for a specific version
        /// </summary>
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<VersionedSection> VersionedGameSetSections
        {
            get
            {
                return versionedGameSetSectionsField;
            }
            set
            {
                versionedGameSetSectionsField = value;
            }
        }
    }
    
    /// <summary>
    /// Contains a list of game set definitions that must be provided to meet the interface definition's requirements for a specific version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    public partial class VersionedSection
    {
        #region Private fields
        private GameSet gameSetField;
        private string versionField;
        private string hashField;
        #endregion
        
        /// <summary>
        /// A Game Set is a shared (across themes) configuration that is built of sets of denominations that have individual RTP and max bet values.
        /// </summary>
        public GameSet GameSet
        {
            get
            {
                return gameSetField;
            }
            set
            {
                gameSetField = value;
            }
        }
        
        /// <summary>
        /// Version of the section. Minor version must be sequential with previous section, and starting with 1.0
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Version
        {
            get
            {
                return versionField;
            }
            set
            {
                versionField = value;
            }
        }
        
        /// <summary>
        /// Checksum of configuration data within the section
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Hash
        {
            get
            {
                return hashField;
            }
            set
            {
                hashField = value;
            }
        }
    }
    
    /// <summary>
    /// A Game Set is a shared (across themes) configuration that is built of sets of denominations that have individual RTP and max bet values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    public partial class GameSet
    {
        #region Private fields
        private List<DenomSet> denomSetListField;
        private List<string> linkMapGroupListField;
        private string gameSetNameField;
        private BankSynchronizedConfigType bankSynchronizedConfigurationTypeField;
        #endregion
        
        /// <summary>
        /// GameSet class constructor
        /// </summary>
        public GameSet()
        {
            linkMapGroupListField = new List<string>();
            denomSetListField = new List<DenomSet>();
            bankSynchronizedConfigurationTypeField = BankSynchronizedConfigType.Enforced;
        }
        
        /// <summary>
        /// A list of available sets of denominations. The denom sets will have a list of avialable denoms with specific settings for each.
        /// </summary>
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<DenomSet> DenomSetList
        {
            get
            {
                return denomSetListField;
            }
            set
            {
                denomSetListField = value;
            }
        }
        
        /// <summary>
        /// A list of available Link Map Group names for use with the Game Set. The group name is an identifier that the operator will see, as well as an identifier used by the GameSetConfigData to define which specific link map to enable for each configuration. It is an optional field. This field is not available for Non-Progressive gamesets.
        /// </summary>
        [XmlArrayItemAttribute("LinkMapGroup", IsNullable=false)]
        public List<string> LinkMapGroupList
        {
            get
            {
                return linkMapGroupListField;
            }
            set
            {
                linkMapGroupListField = value;
            }
        }
        
        /// <summary>
        /// The name of the game set this interface file creates. This will be displayed to operators during setup.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string GameSetName
        {
            get
            {
                return gameSetNameField;
            }
            set
            {
                gameSetNameField = value;
            }
        }
        
        /// <summary>
        /// An optional flag which indicates if this game set configuration is sync'd across a bank of EGMs.  If the flag is omitted or set to Enforced, the game set configuration is applied to all EGMs in the bank, which requires an active host connection to enable the game set.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public BankSynchronizedConfigType BankSynchronizedConfigurationType
        {
            get
            {
                return bankSynchronizedConfigurationTypeField;
            }
            set
            {
                bankSynchronizedConfigurationTypeField = value;
            }
        }
    }
    
    /// <summary>
    /// A set of 1 to 6 denoms for use together.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    public partial class DenomSet
    {
        #region Private fields
        private List<Denom> denomField;
        private bool perDenomRtpConfigField;
        private bool perDenomMaxBetConfigField;
        #endregion
        
        /// <summary>
        /// DenomSet class constructor
        /// </summary>
        public DenomSet()
        {
            denomField = new List<Denom>();
            perDenomRtpConfigField = true;
            perDenomMaxBetConfigField = true;
        }
        
        /// <summary>
        /// The values available for configuration for a specific denomination in a denom set. This entry will associate the denom value with available options for RTP and Max Bet values. Currently we restrict the number of denoms in a DenomSet to 1 minimum, and 6 maximum per the feature's requirements. It is possible this will be expanded in the future to more than 6.
        /// </summary>
        [XmlElement("Denom")]
        public List<Denom> Denom
        {
            get
            {
                return denomField;
            }
            set
            {
                denomField = value;
            }
        }
        
        /// <summary>
        /// Sets if the RTPs in this denom set should be configured by the operator on a per denom basis, or if the selection should adjust the values for all denoms at once. Defaults to per denomination configuration.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool PerDenomRtpConfig
        {
            get
            {
                return perDenomRtpConfigField;
            }
            set
            {
                perDenomRtpConfigField = value;
            }
        }
        
        /// <summary>
        /// Sets if the Max Bets in this denom set should be configured by the operator on a per denom basis, or if the selection should adjust the values for all denoms at once. Defaults to per denomination configuration.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool PerDenomMaxBetConfig
        {
            get
            {
                return perDenomMaxBetConfigField;
            }
            set
            {
                perDenomMaxBetConfigField = value;
            }
        }
    }
    
    /// <summary>
    /// The values available for configuration for a specific denomination in a denom set. This entry will associate the denom value with available options for RTP and Max Bet values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    public partial class Denom
    {
        #region Private fields
        private List<PayvarMap> payvarMapListField;
        private uint valueField;
        #endregion
        
        /// <summary>
        /// Denom class constructor
        /// </summary>
        public Denom()
        {
            payvarMapListField = new List<PayvarMap>();
        }
        
        /// <summary>
        /// A list of Payvars that will be selectable by the operator. Each Payvar has an associated RTP that is a generalized value (e.g. "98%", not "97.89%") as this is for the entire game set. This generic form will be displayed to operators during setup directly. The GameSetConfigurationData file will associate this general value with a specific payvar for that theme.
        /// </summary>
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<PayvarMap> PayvarMapList
        {
            get
            {
                return payvarMapListField;
            }
            set
            {
                payvarMapListField = value;
            }
        }
        
        /// <summary>
        /// The value of the denom being defined.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public uint Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// A payvar entry. Each payvar is associated with an RTP. Every payvar map holds a list of max bets that are available for configuration when it is selected.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    public partial class PayvarMap
    {
        #region Private fields
        private List<MaxBet> maxBetListField;
        private MaxBet defaultMaxBetField;
        private string rTPField;
        #endregion
        
        /// <summary>
        /// PayvarMap class constructor
        /// </summary>
        public PayvarMap()
        {
            maxBetListField = new List<MaxBet>();
        }
        
        /// <summary>
        /// A max bet value to be used for a game set. This value is the final value. That is to say, it is not resolved by the theme to a more specific value, but used directly.
        /// </summary>
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<MaxBet> MaxBetList
        {
            get
            {
                return maxBetListField;
            }
            set
            {
                maxBetListField = value;
            }
        }
        
        /// <summary>
        /// An optional field to set the default maximum bet value that is selected for this payvar. This value should exist in the MaxBetList, this is only the setting for which value is the default. If no default is provided then the lowest value will be used.
        /// </summary>
        public MaxBet DefaultMaxBet
        {
            get
            {
                return defaultMaxBetField;
            }
            set
            {
                defaultMaxBetField = value;
            }
        }
        
        /// <summary>
        /// An RTP that is available for configuration. RTPs are a generalized value (e.g. "98%", not "97.89%") as this is for the entire game set. This generic form will be displayed to operators during setup directly. The GameSetConfigurationData file will associate this general value with a specific payvar for that theme.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string RTP
        {
            get
            {
                return rTPField;
            }
            set
            {
                rTPField = value;
            }
        }
    }
    
    /// <summary>
    /// A max bet amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    public partial class MaxBet
    {
        #region Private fields
        private long valueField;
        #endregion
        
        /// <summary>
        /// A max bet value to be used for a game set. This value is the final value. That is to say, it is not resolved by the theme to a more specific value, but used directly.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public long Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd", IsNullable=true)]
    public partial class VersionedGameSetSections
    {
        #region Private fields
        private List<VersionedSection> versionedSectionField;
        #endregion
        
        /// <summary>
        /// VersionedGameSetSections class constructor
        /// </summary>
        public VersionedGameSetSections()
        {
            versionedSectionField = new List<VersionedSection>();
        }
        
        /// <summary>
        /// Contains the game set definitions by version.
        /// </summary>
        [XmlElement("VersionedSection")]
        public List<VersionedSection> VersionedSection
        {
            get
            {
                return versionedSectionField;
            }
            set
            {
                versionedSectionField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of available sets of denominations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd", IsNullable=true)]
    public partial class DenomSetList
    {
        #region Private fields
        private List<DenomSet> denomSetField;
        #endregion
        
        /// <summary>
        /// DenomSetList class constructor
        /// </summary>
        public DenomSetList()
        {
            denomSetField = new List<DenomSet>();
        }
        
        /// <summary>
        /// Describes a denomination set. A denom set will include between 1 and 6 available denoms, and describe the settings for each denom within the set. That data is matched to the GameSetConfigData file, to match configurations between the extension and themes.
        /// </summary>
        [XmlElement("DenomSet")]
        public List<DenomSet> DenomSet
        {
            get
            {
                return denomSetField;
            }
            set
            {
                denomSetField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of available Link Map Group names for use with the Game Set. The group name is an identifier that the operator will see, as well as an identifier used by the GameSetConfigData to define which specific link map to enable for each configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd", IsNullable=true)]
    public partial class LinkMapGroupList
    {
        #region Private fields
        private List<string> linkMapGroupField;
        #endregion
        
        /// <summary>
        /// LinkMapGroupList class constructor
        /// </summary>
        public LinkMapGroupList()
        {
            linkMapGroupField = new List<string>();
        }
        
        /// <summary>
        /// The Link Map Group name is an identifier that the operator will see, as well as an identifier used by the GameSetConfigData to define which specific link map to enable for each configuration.
        /// </summary>
        [XmlElement("LinkMapGroup")]
        public List<string> LinkMapGroup
        {
            get
            {
                return linkMapGroupField;
            }
            set
            {
                linkMapGroupField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of Payvars that will be selectable by the operator. Each Payvar has an associated RTP that is a generalized value (e.g. "98%", not "97.89%") as this is for the entire game set. This generic form will be displayed to operators during setup directly. The GameSetConfigurationData file will associate this general value with a specific payvar for that theme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd", IsNullable=true)]
    public partial class PayvarMapList
    {
        #region Private fields
        private List<PayvarMap> payvarMapField;
        #endregion
        
        /// <summary>
        /// PayvarMapList class constructor
        /// </summary>
        public PayvarMapList()
        {
            payvarMapField = new List<PayvarMap>();
        }
        
        /// <summary>
        /// A payvar that is available for configuration. Each Payvar is associated with an RTP, which are generalized values (e.g. "98%", not "97.89%") as this is for the entire game set. This generic form will be displayed to operators during setup directly. The GameSetConfigurationData file will associate this general value with a specific payvar for that theme.
        /// </summary>
        [XmlElement("PayvarMap")]
        public List<PayvarMap> PayvarMap
        {
            get
            {
                return payvarMapField;
            }
            set
            {
                payvarMapField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of max bets that are available for configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetInterfaceRegistryVer2.xsd", IsNullable=true)]
    public partial class MaxBetList
    {
        #region Private fields
        private List<MaxBet> maxBetField;
        #endregion
        
        /// <summary>
        /// MaxBetList class constructor
        /// </summary>
        public MaxBetList()
        {
            maxBetField = new List<MaxBet>();
        }
        
        /// <summary>
        /// A max bet value to be used for a game set. This value is the final value. That is to say, it is not resolved by the theme to a more specific value, but used directly.
        /// </summary>
        [XmlElement("MaxBet")]
        public List<MaxBet> MaxBet
        {
            get
            {
                return maxBetField;
            }
            set
            {
                maxBetField = value;
            }
        }
    }
}
#pragma warning restore
