// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XPatchExtensionRegistryVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;IGT.Game.Core.Registries.Internal.F2X.F2XBaseExtensionRegistryVer1</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XPatchExtensionRegistryVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using IGT.Game.Core.Registries.Internal.F2X.F2XBaseExtensionRegistryVer1;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Registry defining executable patches and requirements that must be met to apply that patch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd", IsNullable=false)]
    public partial class PatchExtensionRegistry : BaseExtensionRegistry
    {
        #region Private fields
        private List<GameExecutablePatch> gameExecutablePatchField;
        #endregion
        
        /// <summary>
        /// PatchExtensionRegistry class constructor
        /// </summary>
        public PatchExtensionRegistry()
        {
            gameExecutablePatchField = new List<GameExecutablePatch>();
        }
        
        /// <summary>
        /// An executable patch and the requirements that must be met to apply it.
        /// </summary>
        [XmlElement("GameExecutablePatch")]
        public List<GameExecutablePatch> GameExecutablePatch
        {
            get
            {
                return gameExecutablePatchField;
            }
            set
            {
                gameExecutablePatchField = value;
            }
        }
    }
    
    /// <summary>
    /// An executable patch and the requirements that must be met to apply it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    public partial class GameExecutablePatch
    {
        #region Private fields
        private GameReplacementExecutable replacementField;
        private GameRequirementList requirementsField;
        #endregion
        
        /// <summary>
        /// The replacement executable and it's data.
        /// </summary>
        public GameReplacementExecutable Replacement
        {
            get
            {
                return replacementField;
            }
            set
            {
                replacementField = value;
            }
        }
        
        /// <summary>
        /// A list of requirements. All requirements in the list must be met in order for the patch to be applied.
        /// </summary>
        public GameRequirementList Requirements
        {
            get
            {
                return requirementsField;
            }
            set
            {
                requirementsField = value;
            }
        }
    }
    
    /// <summary>
    /// The replacement executable and it's data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    public partial class GameReplacementExecutable
    {
        #region Private fields
        private string binField;
        private List<CommandLineArgumentsArgument> commandLineArgumentsField;
        private string commandLineField;
        #endregion
        
        /// <summary>
        /// GameReplacementExecutable class constructor
        /// </summary>
        public GameReplacementExecutable()
        {
            commandLineArgumentsField = new List<CommandLineArgumentsArgument>();
        }
        
        /// <summary>
        /// The relative path of the replacement executable.
        /// </summary>
        public string Bin
        {
            get
            {
                return binField;
            }
            set
            {
                binField = value;
            }
        }
        
        /// <summary>
        /// Collection of arguments to be used as references in a CommandLineType element.
        /// </summary>
        [XmlArrayItemAttribute("Argument", Namespace="F2XRegistryTypesVer1.xsd", IsNullable=false)]
        public List<CommandLineArgumentsArgument> CommandLineArguments
        {
            get
            {
                return commandLineArgumentsField;
            }
            set
            {
                commandLineArgumentsField = value;
            }
        }
        
        /// <summary>
        /// Named arguments can be used to compose the command line used to launch the executable. They should be prefixed with “-g” flag to be distinguished from Foundation side arguments.  For example, an argument named "Arg1" with a value of "ArgOne", and "Arg2" with a value of "ArgTwo" can be referenced in this element as "-g1$(Arg1) –g2$(Arg2)", such that the executable will be launched as  "absolute_path/client.exe –g1ArgOne –g2ArgTwo". The Foundation will also provide the following variables: "PackageRoot" so files may be referenced relative to the package root, For example, "$(PackageRoot)/relative_path/client.dll"; "$(GameClient)" which is only valid on Game package types and is the game client name from the xbinreg; "$(ProductVersion)", which is only available on patch commend lines and provides the product version from the executable being replaced. These arguments will be appended to any existing arguments generated by the game bin or foundation.
        /// </summary>
        public string CommandLine
        {
            get
            {
                return commandLineField;
            }
            set
            {
                commandLineField = value;
            }
        }
    }
    
    /// <summary>
    /// A requirement based on properties embedded in the original executable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    public partial class ExecutablePropertyRequirement
    {
        #region Private fields
        private string propertyNameField;
        private List<string> propertyValueField;
        #endregion
        
        /// <summary>
        /// ExecutablePropertyRequirement class constructor
        /// </summary>
        public ExecutablePropertyRequirement()
        {
            propertyValueField = new List<string>();
        }
        
        /// <summary>
        /// The name of the property on the original executable.
        /// </summary>
        public string PropertyName
        {
            get
            {
                return propertyNameField;
            }
            set
            {
                propertyNameField = value;
            }
        }
        
        /// <summary>
        /// Acceptable values for the executable. When multiple values are specified, only one must match for the requirement to be met.
        /// </summary>
        [XmlElement("PropertyValue")]
        public List<string> PropertyValue
        {
            get
            {
                return propertyValueField;
            }
            set
            {
                propertyValueField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of requirements. All requirements in the list must be met in order for the patch to be valid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    public partial class GameRequirementList
    {
        #region Private fields
        private List<ExecutablePropertyRequirement> executablePropertyRequirementField;
        private List<GamePlatform> gamePlatformRequirementField;
        private List<HardwarePlatformVersion> hardwarePlatformRequirementField;
        #endregion
        
        /// <summary>
        /// GameRequirementList class constructor
        /// </summary>
        public GameRequirementList()
        {
            hardwarePlatformRequirementField = new List<HardwarePlatformVersion>();
            gamePlatformRequirementField = new List<GamePlatform>();
            executablePropertyRequirementField = new List<ExecutablePropertyRequirement>();
        }
        
        /// <summary>
        /// A requirement based on properties embedded in the original executable.
        /// </summary>
        [XmlElement("ExecutablePropertyRequirement")]
        public List<ExecutablePropertyRequirement> ExecutablePropertyRequirement
        {
            get
            {
                return executablePropertyRequirementField;
            }
            set
            {
                executablePropertyRequirementField = value;
            }
        }
        
        /// <summary>
        /// A requirement on the platform defined in a package name.
        /// </summary>
        [XmlArrayItemAttribute("Platform", IsNullable=false)]
        public List<GamePlatform> GamePlatformRequirement
        {
            get
            {
                return gamePlatformRequirementField;
            }
            set
            {
                gamePlatformRequirementField = value;
            }
        }
        
        /// <summary>
        /// A requirement on the current hardware platform.
        /// </summary>
        [XmlArrayItemAttribute("Platform", IsNullable=false)]
        public List<HardwarePlatformVersion> HardwarePlatformRequirement
        {
            get
            {
                return hardwarePlatformRequirementField;
            }
            set
            {
                hardwarePlatformRequirementField = value;
            }
        }
    }
    
    /// <summary>
    /// Game package values, derived from the values specified in a package name.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    public enum GamePlatform
    {
        /// <summary>
        /// GAME_PLATFORM_VIDEO
        /// </summary>
        [XmlEnumAttribute("1")]
        Item1,
        /// <summary>
        /// GAME_PLATFORM_MLD_ONLY
        /// </summary>
        [XmlEnumAttribute("2")]
        Item2,
        /// <summary>
        /// GAME_PLATFORM_STEPPER_ONLY
        /// </summary>
        [XmlEnumAttribute("3")]
        Item3,
        /// <summary>
        /// GAME_PLATFORM_MLD_STEPPER_ONLY
        /// </summary>
        [XmlEnumAttribute("4")]
        Item4,
        /// <summary>
        /// GAME_PLATFORM_VIDEO_MLD
        /// </summary>
        [XmlEnumAttribute("5")]
        Item5,
    }
    
    /// <summary>
    /// Hardware platform version (brainbox type).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    public enum HardwarePlatformVersion
    {
        [XmlEnumAttribute("AVP 3.0")]
        AVP30,
        [XmlEnumAttribute("AVP 4.0")]
        AVP40,
        [XmlEnumAttribute("AVP 4.0 ME")]
        AVP40ME,
        [XmlEnumAttribute("AVP 4.0 MEv2")]
        AVP40MEv2,
        [XmlEnumAttribute("AVP 4.0 Plus")]
        AVP40Plus,
        [XmlEnumAttribute("AVP 4.1")]
        AVP41,
    }
    
    /// <summary>
    /// A requirement on the game platform contained in the package name.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd", IsNullable=true)]
    public partial class GamePackagePlatformRequirement
    {
        #region Private fields
        private List<GamePlatform> platformField;
        #endregion
        
        /// <summary>
        /// GamePackagePlatformRequirement class constructor
        /// </summary>
        public GamePackagePlatformRequirement()
        {
            platformField = new List<GamePlatform>();
        }
        
        /// <summary>
        /// Acceptable values for the package platform. When multiple values are specified, only one must match for the requirement to be met.
        /// </summary>
        [XmlElement("Platform")]
        public List<GamePlatform> Platform
        {
            get
            {
                return platformField;
            }
            set
            {
                platformField = value;
            }
        }
    }
    
    /// <summary>
    /// A requirement on the hardware platform.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XPatchExtensionRegistryVer1.xsd", IsNullable=true)]
    public partial class HardwarePlatformVersionRequirement
    {
        #region Private fields
        private List<HardwarePlatformVersion> platformField;
        #endregion
        
        /// <summary>
        /// HardwarePlatformVersionRequirement class constructor
        /// </summary>
        public HardwarePlatformVersionRequirement()
        {
            platformField = new List<HardwarePlatformVersion>();
        }
        
        /// <summary>
        /// Acceptable values for the hardware platform. When multiple values are specified, only one must match for the requirement to be met.
        /// </summary>
        [XmlElement("Platform")]
        public List<HardwarePlatformVersion> Platform
        {
            get
            {
                return platformField;
            }
            set
            {
                platformField = value;
            }
        }
    }
}
#pragma warning restore
