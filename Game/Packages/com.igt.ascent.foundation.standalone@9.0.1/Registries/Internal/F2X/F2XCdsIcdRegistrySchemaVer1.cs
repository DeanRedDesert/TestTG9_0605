// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XCdsIcdRegistryVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XCdsIcdRegistryVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Registry for describing the information to allow a theme to support the Cds ICD protocol. Some of this data is aggregated into a string that is sent to the host that is used to configure active games on the EGM. Using an example of a UPCNumber of 1777, two enabled paytable indicies of 10001 and 10002, and a game configuration option of 300: The string sent would be "1777|10001|10002:300". It is very important to note that the resulting string may NOT exceed 255 characters, per the protocol's limits.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XCdsIcdRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XCdsIcdRegistryVer1.xsd", IsNullable=false)]
    public partial class CdsIcdRegistry
    {
        #region Private fields
        private int uPCNumberField;
        private string themeRegistryField;
        private string gameConfigurationOptionField;
        private SupportedPaytableConfigurations supportedPaytableConfigurationsField;
        #endregion
        
        /// <summary>
        /// The ICD number that identifies the game theme to the host. ("GameUPCNumbers are assigned in blocks by MGAM for the use of vendors.")
        /// </summary>
        public int UPCNumber
        {
            get
            {
                return uPCNumberField;
            }
            set
            {
                uPCNumberField = value;
            }
        }
        
        /// <summary>
        /// Relative path to the (main) theme registry that this registry is supporting.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ThemeRegistry
        {
            get
            {
                return themeRegistryField;
            }
            set
            {
                themeRegistryField = value;
            }
        }
        
        /// <summary>
        /// The default value of game-specific option data (after game installation or ICD configuration reset). The meaning of this data is opaque to the Foundation.  This field must NOT contain the "|" character.
        /// </summary>
        public string GameConfigurationOption
        {
            get
            {
                return gameConfigurationOptionField;
            }
            set
            {
                gameConfigurationOptionField = value;
            }
        }
        
        /// <summary>
        /// List of paytable configurations supported by the theme for use in the ICD protocol.
        /// </summary>
        public SupportedPaytableConfigurations SupportedPaytableConfigurations
        {
            get
            {
                return supportedPaytableConfigurationsField;
            }
            set
            {
                supportedPaytableConfigurationsField = value;
            }
        }
    }
    
    /// <summary>
    /// List of paytable configurations supported by the theme for use in the ICD protocol.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XCdsIcdRegistryVer1.xsd")]
    public partial class SupportedPaytableConfigurations
    {
        #region Private fields
        private List<PaytableConfigurationData> paytableConfigurationField;
        private List<PaytableConfigurationSetData> paytableConfigurationSetField;
        #endregion
        
        /// <summary>
        /// SupportedPaytableConfigurations class constructor
        /// </summary>
        public SupportedPaytableConfigurations()
        {
            paytableConfigurationSetField = new List<PaytableConfigurationSetData>();
            paytableConfigurationField = new List<PaytableConfigurationData>();
        }
        
        /// <summary>
        /// Identifies an ICD paytable configuration supported by the game theme.
        /// </summary>
        [XmlElement("PaytableConfiguration")]
        public List<PaytableConfigurationData> PaytableConfiguration
        {
            get
            {
                return paytableConfigurationField;
            }
            set
            {
                paytableConfigurationField = value;
            }
        }
        
        /// <summary>
        /// Identifies an ICD paytable configuration set supported by the game theme. If sets are not used the old method of using explicit paytable configurations will be used.
        /// </summary>
        [XmlElement("PaytableConfigurationSet")]
        public List<PaytableConfigurationSetData> PaytableConfigurationSet
        {
            get
            {
                return paytableConfigurationSetField;
            }
            set
            {
                paytableConfigurationSetField = value;
            }
        }
    }
    
    /// <summary>
    /// Identifies an ICD paytable configuration supported by the game theme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XCdsIcdRegistryVer1.xsd")]
    public partial class PaytableConfigurationData
    {
        #region Private fields
        private int paytableIndexField;
        private string paytableDescriptionField;
        private int numberOfCreditsField;
        private bool offerableByDefaultField;
        #endregion
        
        /// <summary>
        /// PaytableConfigurationData class constructor
        /// </summary>
        public PaytableConfigurationData()
        {
            offerableByDefaultField = false;
        }
        
        /// <summary>
        /// ICD PaytableIndex, an ID that identifies the paytable being used.
        /// </summary>
        public int PaytableIndex
        {
            get
            {
                return paytableIndexField;
            }
            set
            {
                paytableIndexField = value;
            }
        }
        
        /// <summary>
        /// PaytableIndex description (e.g. "Line 1 Bet 1"). This string must be no longer than 255 characters, per the protocol.
        /// </summary>
        public string PaytableDescription
        {
            get
            {
                return paytableDescriptionField;
            }
            set
            {
                paytableDescriptionField = value;
            }
        }
        
        /// <summary>
        /// The number of credits bet for the Paytable Index.
        /// </summary>
        public int NumberOfCredits
        {
            get
            {
                return numberOfCreditsField;
            }
            set
            {
                numberOfCreditsField = value;
            }
        }
        
        /// <summary>
        /// If "true" this PaytableIndex is offerable by default (after game installation or ICD configuration reset).
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool OfferableByDefault
        {
            get
            {
                return offerableByDefaultField;
            }
            set
            {
                offerableByDefaultField = value;
            }
        }
    }
    
    /// <summary>
    /// Identifies an ICD paytable set and defines an associated list of paytable configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XCdsIcdRegistryVer1.xsd")]
    public partial class PaytableConfigurationSetData
    {
        #region Private fields
        private string paytableConfigurationSetIdentifierField;
        private List<int> paytableConfigurationIndexField;
        private bool offerableByDefaultField;
        #endregion
        
        /// <summary>
        /// PaytableConfigurationSetData class constructor
        /// </summary>
        public PaytableConfigurationSetData()
        {
            paytableConfigurationIndexField = new List<int>();
            offerableByDefaultField = false;
        }
        
        /// <summary>
        /// Identifies an ICD paytable configuration set. The restriction ensures that the string has at least 1 letter somewhere in it.
        /// </summary>
        public string PaytableConfigurationSetIdentifier
        {
            get
            {
                return paytableConfigurationSetIdentifierField;
            }
            set
            {
                paytableConfigurationSetIdentifierField = value;
            }
        }
        
        /// <summary>
        /// Identifies an ICD paytable configuration supported by the game theme.
        /// </summary>
        [XmlElement("PaytableConfigurationIndex")]
        public List<int> PaytableConfigurationIndex
        {
            get
            {
                return paytableConfigurationIndexField;
            }
            set
            {
                paytableConfigurationIndexField = value;
            }
        }
        
        /// <summary>
        /// If "true" this paytable set is offerable by default (after game installation or ICD configuration reset).
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public bool OfferableByDefault
        {
            get
            {
                return offerableByDefaultField;
            }
            set
            {
                offerableByDefaultField = value;
            }
        }
    }
}
#pragma warning restore
