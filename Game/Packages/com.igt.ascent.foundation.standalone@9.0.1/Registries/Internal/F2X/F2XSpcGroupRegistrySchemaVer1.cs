// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XSpcGroupRegistryVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XSpcGroupRegistryVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Registry for instantiating a group of Standalone Progressive Controller levels. The file extension will be called: xspcreg.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XSpcGroupRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd", IsNullable=false)]
    public partial class SpcGroupRegistry
    {
        #region Private fields
        private SpcGroupRegistrySpcGroups spcGroupsField;
        #endregion
        
        /// <summary>
        /// List of Standalone Progressive Controller groups that may be instantiated.
        /// </summary>
        public SpcGroupRegistrySpcGroups SpcGroups
        {
            get
            {
                return spcGroupsField;
            }
            set
            {
                spcGroupsField = value;
            }
        }
    }
    
    /// <summary>
    /// List of Standalone Progressive Controller groups that may be instantiated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class SpcGroupRegistrySpcGroups
    {
        #region Private fields
        private List<SpcGroupTemplateByDenomType> spcGroupTemplateByDenomField;
        private List<SpcGroupType> spcGroupField;
        #endregion
        
        /// <summary>
        /// SpcGroupRegistrySpcGroups class constructor
        /// </summary>
        public SpcGroupRegistrySpcGroups()
        {
            spcGroupField = new List<SpcGroupType>();
            spcGroupTemplateByDenomField = new List<SpcGroupTemplateByDenomType>();
        }
        
        /// <summary>
        /// Template for instantiating a Standalone Progressive Controller group of levels, based on a denomination parameter.  Includes attributes that restrict when the template may be instantiated.
        /// </summary>
        [XmlElement("SpcGroupTemplateByDenom")]
        public List<SpcGroupTemplateByDenomType> SpcGroupTemplateByDenom
        {
            get
            {
                return spcGroupTemplateByDenomField;
            }
            set
            {
                spcGroupTemplateByDenomField = value;
            }
        }
        
        /// <summary>
        /// Standalone Progressive Controller group that may be instantiated when needed.
        /// </summary>
        [XmlElement("SpcGroup")]
        public List<SpcGroupType> SpcGroup
        {
            get
            {
                return spcGroupField;
            }
            set
            {
                spcGroupField = value;
            }
        }
    }
    
    /// <summary>
    /// Template for instantiating a Standalone Progressive Controller group of levels, based on a denomination parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class SpcGroupTemplateByDenomType
    {
        #region Private fields
        private SpcGroupTemplateIdentifierType spcGroupTemplateIdentifierField;
        private bool? warnOperatorIfMultipleInstancesField;
        private List<uint> denominationConstraintField;
        private List<ControllerLevelCreditsType> controllerLevelsField;
        #endregion
        
        /// <summary>
        /// SpcGroupTemplateByDenomType class constructor
        /// </summary>
        public SpcGroupTemplateByDenomType()
        {
            controllerLevelsField = new List<ControllerLevelCreditsType>();
            denominationConstraintField = new List<uint>();
        }
        
        /// <summary>
        /// Unique identifier of the template.
        /// </summary>
        public SpcGroupTemplateIdentifierType SpcGroupTemplateIdentifier
        {
            get
            {
                return spcGroupTemplateIdentifierField;
            }
            set
            {
                spcGroupTemplateIdentifierField = value;
            }
        }
        
        /// <summary>
        /// If "true", the operator is to be warned (where practical) if/when this template has been selected to create a new instance but an instance of this template (at another denomination) already exists.  If omitted, the default is "false".  This warning may be helpful to the operator in a case where the game designer wishes the SPC levels to be scaled by denomination, but the designer expects games to consistently use the SPC group at a single denomination (presumably the denomination first selected by the operator).
        /// </summary>
        public bool WarnOperatorIfMultipleInstances
        {
            get
            {
                if (warnOperatorIfMultipleInstancesField.HasValue)
                {
                    return warnOperatorIfMultipleInstancesField.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                warnOperatorIfMultipleInstancesField = value;
            }
        }
        
        [XmlIgnore]
        public bool WarnOperatorIfMultipleInstancesSpecified
        {
            get
            {
                return warnOperatorIfMultipleInstancesField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    warnOperatorIfMultipleInstancesField = null;
                }
            }
        }
        
        /// <summary>
        /// List of valid denominations for which this template may be instantiated.  If this element is omitted than ALL denominations are considered valid.
        /// </summary>
        [XmlArrayItemAttribute("DenomRequirement", IsNullable=false)]
        public List<uint> DenominationConstraint
        {
            get
            {
                return denominationConstraintField;
            }
            set
            {
                denominationConstraintField = value;
            }
        }
        
        /// <summary>
        /// List of controller levels.  The controller level entry is referenced by a zero based index based on the order of entries in this list.
        /// </summary>
        [XmlArrayItemAttribute("ControllerLevel", IsNullable=false)]
        public List<ControllerLevelCreditsType> ControllerLevels
        {
            get
            {
                return controllerLevelsField;
            }
            set
            {
                controllerLevelsField = value;
            }
        }
    }
    
    /// <summary>
    /// The maximum progressive value expressed as an amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class MaxLimitAmountChoiceType
    {
        #region Private fields
        private MaxLimitAmountType itemField;
        #endregion
        
        [XmlElement("MaxLimitAmount")]
        public MaxLimitAmountType Item
        {
            get
            {
                return itemField;
            }
            set
            {
                itemField = value;
            }
        }
    }
    
    /// <summary>
    /// Maximum amount for this controller-level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class MaxLimitAmountType
    {
        #region Private fields
        private System.Nullable<SettingModifiableType> modifiabilityField;
        private ulong valueField;
        #endregion
        
        /// <summary>
        /// This option controls  the modifiability of the settings value.  Immutable - the limit is fixed, as per the registry.  Mutable - there is some way of setting/changing the limit - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public ulong Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// This option controls  the modifiability of the settings value.  Immutable - The value is fixed, as per the registry.  Mutable - There is some way of setting/changing the value - e.g. an operator menu or exposed protocol setting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public enum SettingModifiableType
    {
        Immutable,
        Mutable,
    }
    
    /// <summary>
    /// The start/reset amount as expressed as an amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class StartValueAmountChoiceType
    {
        #region Private fields
        private StartAmountType itemField;
        #endregion
        
        [XmlElement("StartAmount")]
        public StartAmountType Item
        {
            get
            {
                return itemField;
            }
            set
            {
                itemField = value;
            }
        }
    }
    
    /// <summary>
    /// The starting amount for the progressive level.  The amount is expressed in "base monetary units" which is the smallest value for the currency in the jurisdiction (e.g. cents, Lira, etc.); for example a value of "1" is equal to one cent for US currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class StartAmountType
    {
        #region Private fields
        private System.Nullable<SettingModifiableType> modifiabilityField;
        private ulong valueField;
        #endregion
        
        /// <summary>
        /// This option controls  the modifiability of the settings value.  Immutable - the limit is fixed, as per the registry.  Mutable - there is some way of setting/changing the limit - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public ulong Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Type that describes a set of level settings to be instantiated based on amounts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerContributionLevelSettingsAmountType
    {
        #region Private fields
        private StartValueAmountChoiceType startValueField;
        private ControllerContributionLevelSettingsAmountTypeBetContributionPercentage betContributionPercentageField;
        private MaxLimitAmountChoiceType maxLimitField;
        #endregion
        
        /// <summary>
        /// The start/reset amount as expressed as an amount.
        /// </summary>
        public StartValueAmountChoiceType StartValue
        {
            get
            {
                return startValueField;
            }
            set
            {
                startValueField = value;
            }
        }
        
        /// <summary>
        /// Bet contribution percentage to three decimal places.
        /// </summary>
        public ControllerContributionLevelSettingsAmountTypeBetContributionPercentage BetContributionPercentage
        {
            get
            {
                return betContributionPercentageField;
            }
            set
            {
                betContributionPercentageField = value;
            }
        }
        
        /// <summary>
        /// The maximum progressive value expressed as an amount.
        /// </summary>
        public MaxLimitAmountChoiceType MaxLimit
        {
            get
            {
                return maxLimitField;
            }
            set
            {
                maxLimitField = value;
            }
        }
    }
    
    /// <summary>
    /// Bet contribution percentage to three decimal places.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerContributionLevelSettingsAmountTypeBetContributionPercentage
    {
        #region Private fields
        private System.Nullable<SettingModifiableType> modifiabilityField;
        private string valueField;
        #endregion
        
        /// <summary>
        /// This option controls  the modifiability of the settings value.  Immutable - the percentage is fixed as per the registry and may never be changed.  Mutable - there is some way of setting/changing the percentage  - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Type where the value of the pool is either a jackpot prize string or an accumulating value from bet contributions.  Instantiated settings are specified in amounts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerLevelAmountPoolType
    {
        #region Private fields
        private object itemField;
        #endregion
        
        [XmlElement("ContributionLevelSettings", typeof(ControllerContributionLevelSettingsAmountType))]
        [XmlElement("JackpotPrize", typeof(JackpotPrizeType))]
        public object Item
        {
            get
            {
                return itemField;
            }
            set
            {
                itemField = value;
            }
        }
    }
    
    /// <summary>
    /// The prize string settings for a controller level.  If this element is omitted  a ContributionLevelSettings element must be present.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class JackpotPrizeType
    {
        #region Private fields
        private List<PrizeDescriptionLocalizationType> prizeDescriptionField;
        private PrizeSelectionOptionType prizeSelectionOptionField;
        #endregion
        
        /// <summary>
        /// JackpotPrizeType class constructor
        /// </summary>
        public JackpotPrizeType()
        {
            prizeDescriptionField = new List<PrizeDescriptionLocalizationType>();
        }
        
        /// <summary>
        /// The localized description of the jackpot prize string.
        /// </summary>
        [XmlArrayItemAttribute("DescriptionLocalization", IsNullable=false)]
        public List<PrizeDescriptionLocalizationType> PrizeDescription
        {
            get
            {
                return prizeDescriptionField;
            }
            set
            {
                prizeDescriptionField = value;
            }
        }
        
        /// <summary>
        /// This setting determines how the prize string may be modified.  MutablePrize - The prize string is always used as the value of the level, and there is some means of (the operator) changing the prize string (but it may never be set to an empty string).  The ContributionLevelSettings element must NOT be present. ImmutablePrize - The prize string must be used as the value of the level and the prize string is fixed as per the registry (and may not be empty).  The ContributionLevelSettings element must NOT be present.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public PrizeSelectionOptionType PrizeSelectionOption
        {
            get
            {
                return prizeSelectionOptionField;
            }
            set
            {
                prizeSelectionOptionField = value;
            }
        }
    }
    
    /// <summary>
    /// Localized text description of a prize string.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class PrizeDescriptionLocalizationType
    {
        #region Private fields
        private string descriptionField;
        private string cultureField;
        #endregion
        
        /// <summary>
        /// Description associated with the culture.
        /// </summary>
        public string Description
        {
            get
            {
                return descriptionField;
            }
            set
            {
                descriptionField = value;
            }
        }
        
        /// <summary>
        /// The culture associated with the localized description.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Culture
        {
            get
            {
                return cultureField;
            }
            set
            {
                cultureField = value;
            }
        }
    }
    
    /// <summary>
    /// This setting determines how the prize string may be modified.  MutablePrize - The prize string is always used as the value of the level, and there is some means of (the operator) changing the prize string (but it may never be set to an empty string).  The ContributionLevelSettings element must NOT be present. ImmutablePrize - The prize string must be used as the value of the level and the prize string is fixed as per the registry (and may not be empty).  The ContributionLevelSettings element must NOT be present.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public enum PrizeSelectionOptionType
    {
        ImmutablePrize,
        MutablePrize,
    }
    
    /// <summary>
    /// Type that describes a controller level to be instantiated based on amounts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerLevelAmountType
    {
        #region Private fields
        private List<ControllerLevelDescriptionLocalizationType> levelDescriptionField;
        private ControllerLevelAmountPoolType controllerLevelAmountPoolField;
        #endregion
        
        /// <summary>
        /// ControllerLevelAmountType class constructor
        /// </summary>
        public ControllerLevelAmountType()
        {
            levelDescriptionField = new List<ControllerLevelDescriptionLocalizationType>();
        }
        
        /// <summary>
        /// Localized text description of the controller level.
        /// </summary>
        [XmlArrayItemAttribute("DescriptionLocalization", IsNullable=false)]
        public List<ControllerLevelDescriptionLocalizationType> LevelDescription
        {
            get
            {
                return levelDescriptionField;
            }
            set
            {
                levelDescriptionField = value;
            }
        }
        
        /// <summary>
        /// The value of the pool as either a jackpot prize string or an accumulating value from bet contributions.  Instantiated settings are specified in amounts.
        /// </summary>
        public ControllerLevelAmountPoolType ControllerLevelAmountPool
        {
            get
            {
                return controllerLevelAmountPoolField;
            }
            set
            {
                controllerLevelAmountPoolField = value;
            }
        }
    }
    
    /// <summary>
    /// Localized descriptive name of the controller level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerLevelDescriptionLocalizationType
    {
        #region Private fields
        private string descriptionField;
        private string cultureField;
        #endregion
        
        /// <summary>
        /// Description associated with the culture.
        /// </summary>
        public string Description
        {
            get
            {
                return descriptionField;
            }
            set
            {
                descriptionField = value;
            }
        }
        
        /// <summary>
        /// The culture associated with the localized description.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Culture
        {
            get
            {
                return cultureField;
            }
            set
            {
                cultureField = value;
            }
        }
    }
    
    /// <summary>
    /// Template for instantiating a Standalone Progressive Controller group of levels, based on a denomination parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class SpcGroupType
    {
        #region Private fields
        private SpcGroupIdentifierType spcGroupIdentifierField;
        private List<uint> denominationConstraintField;
        private List<ControllerLevelAmountType> controllerLevelsField;
        #endregion
        
        /// <summary>
        /// SpcGroupType class constructor
        /// </summary>
        public SpcGroupType()
        {
            controllerLevelsField = new List<ControllerLevelAmountType>();
            denominationConstraintField = new List<uint>();
        }
        
        /// <summary>
        /// Unique identifier of the Standalone Progressive Controller group when instantiated.
        /// </summary>
        public SpcGroupIdentifierType SpcGroupIdentifier
        {
            get
            {
                return spcGroupIdentifierField;
            }
            set
            {
                spcGroupIdentifierField = value;
            }
        }
        
        /// <summary>
        /// List of denominations that are considered valid to allow the SPC group to be instantiated. If this element is omitted than ALL denominations are considered valid.
        /// </summary>
        [XmlArrayItemAttribute("DenomRequirement", IsNullable=false)]
        public List<uint> DenominationConstraint
        {
            get
            {
                return denominationConstraintField;
            }
            set
            {
                denominationConstraintField = value;
            }
        }
        
        /// <summary>
        /// List of controller levels.  The controller level entry is referenced by a zero based index based on the order of entries in this list.
        /// </summary>
        [XmlArrayItemAttribute("ControllerLevel", IsNullable=false)]
        public List<ControllerLevelAmountType> ControllerLevels
        {
            get
            {
                return controllerLevelsField;
            }
            set
            {
                controllerLevelsField = value;
            }
        }
    }
    
    /// <summary>
    /// Maximum number of credits for this controller-level. This limit will be scaled by denomination..
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class MaxLimitCreditsType
    {
        #region Private fields
        private System.Nullable<SettingModifiableType> modifiabilityField;
        private ulong valueField;
        #endregion
        
        /// <summary>
        /// This option controls the modifiability of the settings value.  Immutable - the limit is fixed, as per the registry.  Mutable - there is some way of setting/changing the limit - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public ulong Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The maximum progressive value expressed as credits scaled by the denomination or as an unscaled amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class MaxLimitCreditChoiceType
    {
        #region Private fields
        private object itemField;
        #endregion
        
        [XmlElement("MaxLimitAmount", typeof(MaxLimitAmountType))]
        [XmlElement("MaxLimitCredits", typeof(MaxLimitCreditsType))]
        public object Item
        {
            get
            {
                return itemField;
            }
            set
            {
                itemField = value;
            }
        }
    }
    
    /// <summary>
    /// Number of start credits for the progressive level.  This value will be scaled by denomination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class StartCreditsType
    {
        #region Private fields
        private System.Nullable<SettingModifiableType> modifiabilityField;
        private ulong valueField;
        #endregion
        
        /// <summary>
        /// This option controls  the modifiability of the settings value. Immutable - the start amount is fixed, as per the registry, as the start credits scaled by denomination.  Mutable - there is some way of setting/changing the start credits/amount - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public ulong Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The start/reset amount as expressed as credits scaled by the denomination or as an unscaled amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class StartValueCreditChoiceType
    {
        #region Private fields
        private object itemField;
        #endregion
        
        [XmlElement("StartAmount", typeof(StartAmountType))]
        [XmlElement("StartCredits", typeof(StartCreditsType))]
        public object Item
        {
            get
            {
                return itemField;
            }
            set
            {
                itemField = value;
            }
        }
    }
    
    /// <summary>
    /// Type that describes a set of level settings to be instantiated based on credits scaled by denomination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerContributionLevelSettingsCreditsType
    {
        #region Private fields
        private StartValueCreditChoiceType startValueField;
        private ControllerContributionLevelSettingsCreditsTypeBetContributionPercentage betContributionPercentageField;
        private MaxLimitCreditChoiceType maxLimitField;
        #endregion
        
        /// <summary>
        /// The start/reset amount as expressed as credits scaled by the denomination or as an unscaled amount.
        /// </summary>
        public StartValueCreditChoiceType StartValue
        {
            get
            {
                return startValueField;
            }
            set
            {
                startValueField = value;
            }
        }
        
        /// <summary>
        /// Bet contribution percentage to three decimal places.
        /// </summary>
        public ControllerContributionLevelSettingsCreditsTypeBetContributionPercentage BetContributionPercentage
        {
            get
            {
                return betContributionPercentageField;
            }
            set
            {
                betContributionPercentageField = value;
            }
        }
        
        /// <summary>
        /// The maximum progressive value expressed as credits scaled by the denomination or as an unscaled amount.
        /// </summary>
        public MaxLimitCreditChoiceType MaxLimit
        {
            get
            {
                return maxLimitField;
            }
            set
            {
                maxLimitField = value;
            }
        }
    }
    
    /// <summary>
    /// Bet contribution percentage to three decimal places.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerContributionLevelSettingsCreditsTypeBetContributionPercentage
    {
        #region Private fields
        private System.Nullable<SettingModifiableType> modifiabilityField;
        private string valueField;
        #endregion
        
        /// <summary>
        /// This option controls  the modifiability of the settings value. Immutable - the percentage is fixed as per the registry and may never be changed.  Mutable - there is some way of setting/changing the percentage  - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Type where the value of the pool is either a jackpot prize string or an accumulating value from bet contributions.  Instantiated settings are specified in credits.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerLevelCreditsPoolType
    {
        #region Private fields
        private object itemField;
        #endregion
        
        [XmlElement("ContributionLevelSettings", typeof(ControllerContributionLevelSettingsCreditsType))]
        [XmlElement("JackpotPrize", typeof(JackpotPrizeType))]
        public object Item
        {
            get
            {
                return itemField;
            }
            set
            {
                itemField = value;
            }
        }
    }
    
    /// <summary>
    /// Type that describes a controller level to be instantiated based on credits scaled by denomination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    public partial class ControllerLevelCreditsType
    {
        #region Private fields
        private List<ControllerLevelDescriptionLocalizationType> levelDescriptionField;
        private ControllerLevelCreditsPoolType controllerLevelCreditsPoolField;
        #endregion
        
        /// <summary>
        /// ControllerLevelCreditsType class constructor
        /// </summary>
        public ControllerLevelCreditsType()
        {
            levelDescriptionField = new List<ControllerLevelDescriptionLocalizationType>();
        }
        
        /// <summary>
        /// Localized text description of the controller level.
        /// </summary>
        [XmlArrayItemAttribute("DescriptionLocalization", IsNullable=false)]
        public List<ControllerLevelDescriptionLocalizationType> LevelDescription
        {
            get
            {
                return levelDescriptionField;
            }
            set
            {
                levelDescriptionField = value;
            }
        }
        
        /// <summary>
        /// The value of the pool as either a jackpot prize string or an accumulating value from bet contributions.  Instantiated settings may be scaled by denomination.
        /// </summary>
        public ControllerLevelCreditsPoolType ControllerLevelCreditsPool
        {
            get
            {
                return controllerLevelCreditsPoolField;
            }
            set
            {
                controllerLevelCreditsPoolField = value;
            }
        }
    }
    
    /// <summary>
    /// List of valid denominations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd", IsNullable=true)]
    public partial class DenominationConstraintType
    {
        #region Private fields
        private List<uint> denomRequirementField;
        #endregion
        
        /// <summary>
        /// DenominationConstraintType class constructor
        /// </summary>
        public DenominationConstraintType()
        {
            denomRequirementField = new List<uint>();
        }
        
        /// <summary>
        /// Valid denomination for the denomination constraint.
        /// </summary>
        [XmlElement("DenomRequirement")]
        public List<uint> DenomRequirement
        {
            get
            {
                return denomRequirementField;
            }
            set
            {
                denomRequirementField = value;
            }
        }
    }
    
    /// <summary>
    /// Localized text description of the controller level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd", IsNullable=true)]
    public partial class LevelDescriptionType
    {
        #region Private fields
        private List<ControllerLevelDescriptionLocalizationType> descriptionLocalizationField;
        #endregion
        
        /// <summary>
        /// LevelDescriptionType class constructor
        /// </summary>
        public LevelDescriptionType()
        {
            descriptionLocalizationField = new List<ControllerLevelDescriptionLocalizationType>();
        }
        
        /// <summary>
        /// Descriptive name of the controller level.
        /// </summary>
        [XmlElement("DescriptionLocalization")]
        public List<ControllerLevelDescriptionLocalizationType> DescriptionLocalization
        {
            get
            {
                return descriptionLocalizationField;
            }
            set
            {
                descriptionLocalizationField = value;
            }
        }
    }
    
    /// <summary>
    /// Localized text description of a prize.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XSpcGroupRegistryVer1.xsd", IsNullable=true)]
    public partial class PrizeDescriptionType
    {
        #region Private fields
        private List<PrizeDescriptionLocalizationType> descriptionLocalizationField;
        #endregion
        
        /// <summary>
        /// PrizeDescriptionType class constructor
        /// </summary>
        public PrizeDescriptionType()
        {
            descriptionLocalizationField = new List<PrizeDescriptionLocalizationType>();
        }
        
        /// <summary>
        /// Descriptive name of the prize.
        /// </summary>
        [XmlElement("DescriptionLocalization")]
        public List<PrizeDescriptionLocalizationType> DescriptionLocalization
        {
            get
            {
                return descriptionLocalizationField;
            }
            set
            {
                descriptionLocalizationField = value;
            }
        }
    }
}
#pragma warning restore
