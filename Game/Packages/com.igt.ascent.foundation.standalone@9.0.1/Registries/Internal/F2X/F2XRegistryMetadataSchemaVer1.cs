// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryMetadataVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryVer1;IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XRegistryMetadataVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryVer1;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Provides metadata about specific registry types, and data on how to update or extract certain information from those registries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryMetadataVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryMetadataVer1.xsd", IsNullable=false)]
    public partial class RegistryMetadata
    {
        #region Private fields
        private List<Registry> registryTypesField;
        private List<Key> keysField;
        #endregion
        
        /// <summary>
        /// RegistryMetadata class constructor
        /// </summary>
        public RegistryMetadata()
        {
            keysField = new List<Key>();
            registryTypesField = new List<Registry>();
        }
        
        [XmlArrayItemAttribute("RegistryType", IsNullable=false)]
        public List<Registry> RegistryTypes
        {
            get
            {
                return registryTypesField;
            }
            set
            {
                registryTypesField = value;
            }
        }
        
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<Key> Keys
        {
            get
            {
                return keysField;
            }
            set
            {
                keysField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class NamespaceListNamespace
    {
        #region Private fields
        private string prefixField;
        private string uriField;
        #endregion
        
        /// <summary>
        /// Specifies the namespace prefix that will be used inside of transforms and xpath select statements.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="NCName")]
        public string Prefix
        {
            get
            {
                return prefixField;
            }
            set
            {
                prefixField = value;
            }
        }
        
        /// <summary>
        /// Specifies the target namespace, associated with the prefix, that will be used inside of transforms and xpath select statements.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="anyURI")]
        public string Uri
        {
            get
            {
                return uriField;
            }
            set
            {
                uriField = value;
            }
        }
    }
    
    /// <summary>
    /// Provides a list of keys that can be used to verify registries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class Key
    {
        #region Private fields
        private string publicKeyField;
        private string privateKeyField;
        private string nameField;
        #endregion
        
        /// <summary>
        /// Provides the public key portion of the key.
        /// </summary>
        public string PublicKey
        {
            get
            {
                return publicKeyField;
            }
            set
            {
                publicKeyField = value;
            }
        }
        
        /// <summary>
        /// Provides the private key portion of the key.
        /// </summary>
        public string PrivateKey
        {
            get
            {
                return privateKeyField;
            }
            set
            {
                privateKeyField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Name
        {
            get
            {
                return nameField;
            }
            set
            {
                nameField = value;
            }
        }
    }
    
    /// <summary>
    /// Given a Provider registry, generating a matching interface registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class CreateInterfaceFunction
    {
        #region Private fields
        private OperationBase[] operationsField;
        #endregion
        
        [XmlArrayItemAttribute("File", typeof(FileOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Hash", typeof(HashOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Sign", typeof(SignOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Value", typeof(ValueOperation), IsNullable=false)]
        public OperationBase[] Operations
        {
            get
            {
                return operationsField;
            }
            set
            {
                operationsField = value;
            }
        }
    }
    
    /// <summary>
    /// Specifies information for generating file data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class FileOperation : OperationBase
    {
        #region Private fields
        private FileOperationFileName fileNameField;
        private System.Xml.XmlElement transformField;
        #endregion
        
        public FileOperationFileName FileName
        {
            get
            {
                return fileNameField;
            }
            set
            {
                fileNameField = value;
            }
        }
        
        /// <summary>
        /// A transform to perform and then store in the output file name.
        /// </summary>
        public System.Xml.XmlElement Transform
        {
            get
            {
                return transformField;
            }
            set
            {
                transformField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class FileOperationFileName
    {
        #region Private fields
        private ValueOperation valueField;
        private string fileExtensionField;
        #endregion
        
        /// <summary>
        /// Optional value to use as a filename, otherwise the file extension will be used with the original file name.
        /// </summary>
        public ValueOperation Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string FileExtension
        {
            get
            {
                return fileExtensionField;
            }
            set
            {
                fileExtensionField = value;
            }
        }
    }
    
    /// <summary>
    /// Specifies information for querying a value from the input registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class ValueOperation : OperationBase
    {
        #region Private fields
        private System.Xml.XmlElement transformField;
        #endregion
        
        /// <summary>
        /// An optional transform to extract a value from the schema.
        /// </summary>
        public System.Xml.XmlElement Transform
        {
            get
            {
                return transformField;
            }
            set
            {
                transformField = value;
            }
        }
    }
    
    /// <summary>
    /// Base class of operations for common attributes. Allows common behavior for defining the input and output of an operation.
    /// </summary>
    [XmlIncludeAttribute(typeof(FileOperation))]
    [XmlIncludeAttribute(typeof(ValueOperation))]
    [XmlIncludeAttribute(typeof(SignOperation))]
    [XmlIncludeAttribute(typeof(HashOperation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public abstract partial class OperationBase
    {
        #region Private fields
        private string sourceSelectField;
        private string targetSelectField;
        private string targetVariableField;
        #endregion
        
        /// <summary>
        /// Query used to select a single node or set of nodes (depending on the operation), that the operation will be performed on.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="token")]
        public string SourceSelect
        {
            get
            {
                return sourceSelectField;
            }
            set
            {
                sourceSelectField = value;
            }
        }
        
        /// <summary>
        /// Query used to select a single node to store the result of the operation in.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="token")]
        public string TargetSelect
        {
            get
            {
                return targetSelectField;
            }
            set
            {
                targetSelectField = value;
            }
        }
        
        /// <summary>
        /// Save the output of the operation into a named variable.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string TargetVariable
        {
            get
            {
                return targetVariableField;
            }
            set
            {
                targetVariableField = value;
            }
        }
    }
    
    /// <summary>
    /// Specifies information for generating a registry signature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class SignOperation : OperationBase
    {
        #region Private fields
        private System.Xml.XmlElement transformField;
        private HashType hashTypeField;
        private SignatureType signatureTypeField;
        private uint bitsField;
        private string keyField;
        #endregion
        
        public System.Xml.XmlElement Transform
        {
            get
            {
                return transformField;
            }
            set
            {
                transformField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public HashType HashType
        {
            get
            {
                return hashTypeField;
            }
            set
            {
                hashTypeField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SignatureType SignatureType
        {
            get
            {
                return signatureTypeField;
            }
            set
            {
                signatureTypeField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public uint Bits
        {
            get
            {
                return bitsField;
            }
            set
            {
                bitsField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Key
        {
            get
            {
                return keyField;
            }
            set
            {
                keyField = value;
            }
        }
    }
    
    /// <summary>
    /// Specifies the hash (or digest) algorithm.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public enum HashType
    {
        MD5,
        [XmlEnumAttribute("SHA-1")]
        SHA1,
        [XmlEnumAttribute("SHA-256")]
        SHA256,
    }
    
    /// <summary>
    /// Specifies the signature algorithm.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public enum SignatureType
    {
        DSA,
        ECDSA,
    }
    
    /// <summary>
    /// Specifies information for generating a hash over a portion of a registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class HashOperation : OperationBase
    {
        #region Private fields
        private System.Xml.XmlElement transformField;
        private HashType hashTypeField;
        #endregion
        
        public System.Xml.XmlElement Transform
        {
            get
            {
                return transformField;
            }
            set
            {
                transformField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public HashType HashType
        {
            get
            {
                return hashTypeField;
            }
            set
            {
                hashTypeField = value;
            }
        }
    }
    
    /// <summary>
    /// Perform a signature operation on the target registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class SignFunction
    {
        #region Private fields
        private OperationBase[] operationsField;
        #endregion
        
        [XmlArrayItemAttribute("File", typeof(FileOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Hash", typeof(HashOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Sign", typeof(SignOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Value", typeof(ValueOperation), IsNullable=false)]
        public OperationBase[] Operations
        {
            get
            {
                return operationsField;
            }
            set
            {
                operationsField = value;
            }
        }
    }
    
    /// <summary>
    /// Perform a hash operation on the target registry, generating provider hash values by version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class ProviderHashFunction
    {
        #region Private fields
        private OperationBase[] operationsField;
        private string sourceSelectField;
        #endregion
        
        [XmlArrayItemAttribute("File", typeof(FileOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Hash", typeof(HashOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Sign", typeof(SignOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Value", typeof(ValueOperation), IsNullable=false)]
        public OperationBase[] Operations
        {
            get
            {
                return operationsField;
            }
            set
            {
                operationsField = value;
            }
        }
        
        /// <summary>
        /// Query used to select a initial node set for hasing.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="token")]
        public string SourceSelect
        {
            get
            {
                return sourceSelectField;
            }
            set
            {
                sourceSelectField = value;
            }
        }
    }
    
    /// <summary>
    /// Perform a hash operation on the target registry, generating interface hash values by version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class InterfaceHashFunction
    {
        #region Private fields
        private OperationBase[] operationsField;
        private string sourceSelectField;
        #endregion
        
        [XmlArrayItemAttribute("File", typeof(FileOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Hash", typeof(HashOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Sign", typeof(SignOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Value", typeof(ValueOperation), IsNullable=false)]
        public OperationBase[] Operations
        {
            get
            {
                return operationsField;
            }
            set
            {
                operationsField = value;
            }
        }
        
        /// <summary>
        /// Query used to select a initial node set for hasing.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="token")]
        public string SourceSelect
        {
            get
            {
                return sourceSelectField;
            }
            set
            {
                sourceSelectField = value;
            }
        }
    }
    
    /// <summary>
    /// Query common information from the registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    public partial class InformationFunction
    {
        #region Private fields
        private OperationBase[] operationsField;
        #endregion
        
        [XmlArrayItemAttribute("File", typeof(FileOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Hash", typeof(HashOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Sign", typeof(SignOperation), IsNullable=false)]
        [XmlArrayItemAttribute("Value", typeof(ValueOperation), IsNullable=false)]
        public OperationBase[] Operations
        {
            get
            {
                return operationsField;
            }
            set
            {
                operationsField = value;
            }
        }
    }
    
    /// <summary>
    /// Providers a list of functions that can be performed on a registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryMetadataVer1.xsd", IsNullable=true)]
    public partial class FunctionList
    {
        #region Private fields
        private List<object> itemsField;
        #endregion
        
        /// <summary>
        /// FunctionList class constructor
        /// </summary>
        public FunctionList()
        {
            itemsField = new List<object>();
        }
        
        [XmlElement("CreateInterface", typeof(CreateInterfaceFunction))]
        [XmlElement("Information", typeof(InformationFunction))]
        [XmlElement("InterfaceHash", typeof(InterfaceHashFunction))]
        [XmlElement("ProviderHash", typeof(ProviderHashFunction))]
        [XmlElement("Sign", typeof(SignFunction))]
        public List<object> Items
        {
            get
            {
                return itemsField;
            }
            set
            {
                itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// Contains a set of operations to perform on an registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryMetadataVer1.xsd", IsNullable=true)]
    public partial class OperationList
    {
        #region Private fields
        private List<OperationBase> itemsField;
        #endregion
        
        /// <summary>
        /// OperationList class constructor
        /// </summary>
        public OperationList()
        {
            itemsField = new List<OperationBase>();
        }
        
        [XmlElement("File", typeof(FileOperation))]
        [XmlElement("Hash", typeof(HashOperation))]
        [XmlElement("Sign", typeof(SignOperation))]
        [XmlElement("Value", typeof(ValueOperation))]
        public List<OperationBase> Items
        {
            get
            {
                return itemsField;
            }
            set
            {
                itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// Specifies a list of XML namespaces for the target registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryMetadataVer1.xsd", IsNullable=true)]
    public partial class NamespaceList
    {
        #region Private fields
        private List<NamespaceListNamespace> namespaceField;
        #endregion
        
        /// <summary>
        /// NamespaceList class constructor
        /// </summary>
        public NamespaceList()
        {
            namespaceField = new List<NamespaceListNamespace>();
        }
        
        [XmlElement("Namespace")]
        public List<NamespaceListNamespace> Namespace
        {
            get
            {
                return namespaceField;
            }
            set
            {
                namespaceField = value;
            }
        }
    }
    
    /// <summary>
    /// Provides a list of RegistryTypes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryMetadataVer1.xsd", IsNullable=true)]
    public partial class RegistryTypeList
    {
        #region Private fields
        private List<Registry> registryTypeField;
        #endregion
        
        /// <summary>
        /// RegistryTypeList class constructor
        /// </summary>
        public RegistryTypeList()
        {
            registryTypeField = new List<Registry>();
        }
        
        [XmlElement("RegistryType")]
        public List<Registry> RegistryType
        {
            get
            {
                return registryTypeField;
            }
            set
            {
                registryTypeField = value;
            }
        }
    }
    
    /// <summary>
    /// Provides a list of RegistryTypes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryMetadataVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryMetadataVer1.xsd", IsNullable=true)]
    public partial class KeyList
    {
        #region Private fields
        private List<Key> keyField;
        #endregion
        
        /// <summary>
        /// KeyList class constructor
        /// </summary>
        public KeyList()
        {
            keyField = new List<Key>();
        }
        
        [XmlElement("Key")]
        public List<Key> Key
        {
            get
            {
                return keyField;
            }
            set
            {
                keyField = value;
            }
        }
    }
}
#pragma warning restore
