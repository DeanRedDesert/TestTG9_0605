// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XNetProgressiveControllerGroupRegistryVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XNetProgressiveControllerGroupRegistryVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Registry for instantiating groups of Net Progressive Controller levels. The file extension will be called: xnpcreg.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd", IsNullable=false)]
    public partial class NetProgressiveGroupRegistry
    {
        #region Private fields
        private List<GroupType> groupsField;
        #endregion
        
        /// <summary>
        /// NetProgressiveGroupRegistry class constructor
        /// </summary>
        public NetProgressiveGroupRegistry()
        {
            groupsField = new List<GroupType>();
        }
        
        /// <summary>
        /// List of Net Progressive controller groups that may be instantiated.
        /// </summary>
        [XmlArrayItemAttribute("Group", IsNullable=false)]
        public List<GroupType> Groups
        {
            get
            {
                return groupsField;
            }
            set
            {
                groupsField = value;
            }
        }
    }
    
    /// <summary>
    /// Type for instantiating a Net Progressive Controller group of levels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public partial class GroupType
    {
        #region Private fields
        private NetProgressiveControllerGroupIdentifierType groupIdentifierField;
        private System.Nullable<LevelIncrementType> incrementTypeField;
        private List<ControllerLevelType> controllerLevelsField;
        #endregion
        
        /// <summary>
        /// GroupType class constructor
        /// </summary>
        public GroupType()
        {
            controllerLevelsField = new List<ControllerLevelType>();
        }
        
        /// <summary>
        /// Unique identifier of the Net Progressive Controller group when instantiated.
        /// </summary>
        public NetProgressiveControllerGroupIdentifierType GroupIdentifier
        {
            get
            {
                return groupIdentifierField;
            }
            set
            {
                groupIdentifierField = value;
            }
        }
        
        /// <summary>
        /// Type of increment for the controller levels. Default is WagerBased.
        /// </summary>
        public LevelIncrementType IncrementType
        {
            get
            {
                if (incrementTypeField.HasValue)
                {
                    return incrementTypeField.Value;
                }
                else
                {
                    return default(LevelIncrementType);
                }
            }
            set
            {
                incrementTypeField = value;
            }
        }
        
        [XmlIgnore]
        public bool IncrementTypeSpecified
        {
            get
            {
                return incrementTypeField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    incrementTypeField = null;
                }
            }
        }
        
        /// <summary>
        /// List of controller levels.  The controller level entry is referenced by a zero based index based on the order of entries in this list.
        /// </summary>
        [XmlArrayItemAttribute("ControllerLevel", IsNullable=false)]
        public List<ControllerLevelType> ControllerLevels
        {
            get
            {
                return controllerLevelsField;
            }
            set
            {
                controllerLevelsField = value;
            }
        }
    }
    
    /// <summary>
    /// The maximum limit range and value for the progressive level.  The amounts are expressed in "base monetary units" which is the smallest value for the currency in the jurisdiction (e.g. cents, Lira, etc.); for example a value of "1" is equal to one cent for US currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public partial class MaxLimitType
    {
        #region Private fields
        private MaxLimitTypeRange rangeField;
        private ulong valueField;
        private System.Nullable<SettingModifiableType> modifiabilityField;
        #endregion
        
        /// <summary>
        /// The range for the maximum limit for the progressive level.  Value must be greater than or equal to min and less than or equal to max for the registry to be valid.
        /// </summary>
        public MaxLimitTypeRange Range
        {
            get
            {
                return rangeField;
            }
            set
            {
                rangeField = value;
            }
        }
        
        /// <summary>
        /// The default maximum amount value for the progressive level.  Must be greater or equal to min and less than or equal to max.
        /// </summary>
        public ulong Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
        
        /// <summary>
        /// This option controls  the modifiability of the settings value. Immutable - the value is fixed as per the registry and may never be changed.  Mutable - there is some way of setting/changing the value  - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
    }
    
    /// <summary>
    /// The range for the maximum limit for the progressive level.  Value must be greater than or equal to min and less than or equal to max for the registry to be valid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public partial class MaxLimitTypeRange
    {
        #region Private fields
        private ulong minField;
        private ulong maxField;
        #endregion
        
        /// <summary>
        /// The minimum maximum amount value for the progressive level.  Must be less than or equal to max.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public ulong Min
        {
            get
            {
                return minField;
            }
            set
            {
                minField = value;
            }
        }
        
        /// <summary>
        /// The maximum maximum amount value for the progressive level.  Must be greater than or equal to min.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public ulong Max
        {
            get
            {
                return maxField;
            }
            set
            {
                maxField = value;
            }
        }
    }
    
    /// <summary>
    /// This option controls the modifiability of the settings value.  Immutable - The value is fixed, as per the registry.  Mutable - There is some way of setting/changing the value - e.g. an operator menu or exposed protocol setting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public enum SettingModifiableType
    {
        Immutable,
        Mutable,
    }
    
    /// <summary>
    /// The bet contribution percentage range and value for the progressive level.  The percentages are to three decimal places.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public partial class BetContributionPercentageType
    {
        #region Private fields
        private BetContributionPercentageTypeRange rangeField;
        private string valueField;
        private System.Nullable<SettingModifiableType> modifiabilityField;
        #endregion
        
        /// <summary>
        /// The range for the bet contribution percentage for the progressive level.
        /// </summary>
        public BetContributionPercentageTypeRange Range
        {
            get
            {
                return rangeField;
            }
            set
            {
                rangeField = value;
            }
        }
        
        /// <summary>
        /// The default bet contribution percentage value for the progressive level.  Must be greater or equal to min and less than or equal to max.
        /// </summary>
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
        
        /// <summary>
        /// This option controls the modifiability of the settings value. Immutable - the value is fixed as per the registry and may never be changed.  Mutable - there is some way of setting/changing the value  - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
    }
    
    /// <summary>
    /// The range for the bet contribution percentage for the progressive level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public partial class BetContributionPercentageTypeRange
    {
        #region Private fields
        private string minField;
        private string maxField;
        #endregion
        
        /// <summary>
        /// The minimum bet contribution percentage value for the progressive level.  Must be less than or equal to max.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Min
        {
            get
            {
                return minField;
            }
            set
            {
                minField = value;
            }
        }
        
        /// <summary>
        /// The maximum bet contribution percentage value for the progressive level.  Must be greater than or equal to min.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Max
        {
            get
            {
                return maxField;
            }
            set
            {
                maxField = value;
            }
        }
    }
    
    /// <summary>
    /// The starting amount range and value for the progressive level.  The amounts are expressed in "base monetary units" which is the smallest value for the currency in the jurisdiction (e.g. cents, Lira, etc.); for example a value of "1" is equal to one cent for US currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public partial class StartAmountType
    {
        #region Private fields
        private StartAmountTypeRange rangeField;
        private ulong valueField;
        private System.Nullable<SettingModifiableType> modifiabilityField;
        #endregion
        
        /// <summary>
        /// The range for the starting starting amount for the progressive level.
        /// </summary>
        public StartAmountTypeRange Range
        {
            get
            {
                return rangeField;
            }
            set
            {
                rangeField = value;
            }
        }
        
        /// <summary>
        /// The default starting amount value for the progressive level.  Must be greater or equal to min and less than or equal to max.
        /// </summary>
        public ulong Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
        
        /// <summary>
        /// This option controls the modifiability of the settings value. Immutable - the value is fixed as per the registry and may never be changed.  Mutable - there is some way of setting/changing the value - e.g. an operator menu or exposed protocol setting. If omitted the default value is "Immutable".
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SettingModifiableType Modifiability
        {
            get
            {
                if (modifiabilityField.HasValue)
                {
                    return modifiabilityField.Value;
                }
                else
                {
                    return default(SettingModifiableType);
                }
            }
            set
            {
                modifiabilityField = value;
            }
        }
        
        [XmlIgnore]
        public bool ModifiabilitySpecified
        {
            get
            {
                return modifiabilityField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    modifiabilityField = null;
                }
            }
        }
    }
    
    /// <summary>
    /// The range for the starting starting amount for the progressive level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public partial class StartAmountTypeRange
    {
        #region Private fields
        private ulong minField;
        private ulong maxField;
        #endregion
        
        /// <summary>
        /// The minimum starting amount value for the progressive level.  Must be less than or equal to max.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public ulong Min
        {
            get
            {
                return minField;
            }
            set
            {
                minField = value;
            }
        }
        
        /// <summary>
        /// The maximum starting amount value for the progressive level.  Must be greater than or equal to min.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public ulong Max
        {
            get
            {
                return maxField;
            }
            set
            {
                maxField = value;
            }
        }
    }
    
    /// <summary>
    /// Type that describes a set of level settings to be instantiated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public partial class ControllerLevelType
    {
        #region Private fields
        private StartAmountType startAmountField;
        private BetContributionPercentageType betContributionPercentageField;
        private MaxLimitType maxLimitField;
        #endregion
        
        /// <summary>
        /// The starting amount for the progressive level.  Must be less than or equal to the max limit amount.  The amount is expressed in "base monetary units" which is the smallest value for the currency in the jurisdiction (e.g. cents, Lira, etc.); for example a value of "1" is equal to one cent for US currency.
        /// </summary>
        public StartAmountType StartAmount
        {
            get
            {
                return startAmountField;
            }
            set
            {
                startAmountField = value;
            }
        }
        
        /// <summary>
        /// Bet contribution percentage to three decimal places.
        /// </summary>
        public BetContributionPercentageType BetContributionPercentage
        {
            get
            {
                return betContributionPercentageField;
            }
            set
            {
                betContributionPercentageField = value;
            }
        }
        
        /// <summary>
        /// The max limit for the progressive level.  Must be greater than or equal to the start amount.  The amount is expressed in "base monetary units" which is the smallest value for the currency in the jurisdiction (e.g. cents, Lira, etc.); for example a value of "1" is equal to one cent for US currency.
        /// </summary>
        public MaxLimitType MaxLimit
        {
            get
            {
                return maxLimitField;
            }
            set
            {
                maxLimitField = value;
            }
        }
    }
    
    /// <summary>
    /// Specifies how the particular level is getting incremented.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XNetProgressiveControllerGroupRegistryVer1.xsd")]
    public enum LevelIncrementType
    {
        /// <summary>
        /// The level is increment on each bet of the payvar x denomination.
        /// </summary>
        WagerBased,
        /// <summary>
        /// The level increment is controlled by the Game Client thru the event of adding qualified contribution, the progressive hits are paid and metered as paytable win.
        /// </summary>
        EventBased,
        /// <summary>
        /// The level increment is controlled by the Game Client thru the event of adding qualified contribution, the progressive hits are paid and metered as progressive win.
        /// </summary>
        ProgressiveEventBased,
    }
}
#pragma warning restore
