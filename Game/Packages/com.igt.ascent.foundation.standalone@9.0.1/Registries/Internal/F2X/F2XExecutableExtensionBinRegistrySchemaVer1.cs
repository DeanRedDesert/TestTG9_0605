// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XExecutableExtensionBinRegistryVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XExecutableExtensionBinRegistryVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Registry for describing an extension bin/executable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XExecutableExtensionBinRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XExecutableExtensionBinRegistryVer1.xsd", IsNullable=false)]
    public partial class ExecutableExtensionBinRegistry
    {
        #region Private fields
        private string extensionClientField;
        private List<CommandLineArgumentsArgument> commandLineArgumentsField;
        private string commandLineField;
        private TagDataFileType tagDataFileField;
        private List<string> jurisdictionalStartupConstraintField;
        private string maxCaptureDirectorySizeField;
        #endregion
        
        /// <summary>
        /// ExecutableExtensionBinRegistry class constructor
        /// </summary>
        public ExecutableExtensionBinRegistry()
        {
            jurisdictionalStartupConstraintField = new List<string>();
            commandLineArgumentsField = new List<CommandLineArgumentsArgument>();
        }
        
        /// <summary>
        /// The relative path, from the package root directory, to the extension executable.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ExtensionClient
        {
            get
            {
                return extensionClientField;
            }
            set
            {
                extensionClientField = value;
            }
        }
        
        /// <summary>
        /// Collection of arguments to be used as references in a CommandLineType element.
        /// </summary>
        [XmlArrayItemAttribute("Argument", Namespace="F2XRegistryTypesVer1.xsd", IsNullable=false)]
        public List<CommandLineArgumentsArgument> CommandLineArguments
        {
            get
            {
                return commandLineArgumentsField;
            }
            set
            {
                commandLineArgumentsField = value;
            }
        }
        
        /// <summary>
        /// Named arguments can be used to compose the command line used to launch the executable. They should be prefixed with “-g” flag to be distinguished from Foundation side arguments.  For example, an argument named "Arg1" with a value of "ArgOne", and "Arg2" with a value of "ArgTwo" can be referenced in this element as "-g1$(Arg1) –g2$(Arg2)", such that the executable will be launched as  "absolute_path/client.exe –g1ArgOne –g2ArgTwo".
        /// </summary>
        public string CommandLine
        {
            get
            {
                return commandLineField;
            }
            set
            {
                commandLineField = value;
            }
        }
        
        /// <summary>
        /// Custom executable-related file for use with the executable.  Passed to the executable during startup.  Opaque to the Foundation.
        /// </summary>
        public TagDataFileType TagDataFile
        {
            get
            {
                return tagDataFileField;
            }
            set
            {
                tagDataFileField = value;
            }
        }
        
        /// <summary>
        /// Provides the ability to restrict the bin startup to a subset of jurisdictions. In case the element is obmitted no restrictions apply.
        /// </summary>
        [XmlArrayItemAttribute("Jurisdiction", IsNullable=false)]
        public List<string> JurisdictionalStartupConstraint
        {
            get
            {
                return jurisdictionalStartupConstraintField;
            }
            set
            {
                jurisdictionalStartupConstraintField = value;
            }
        }
        
        /// <summary>
        /// The maximum capture size needed by the extension. The final word on capping the size is at the foundation side. The foundation provides the capture_size to the bin on startup.
        /// </summary>
        [XmlElement(DataType="integer")]
        public string MaxCaptureDirectorySize
        {
            get
            {
                return maxCaptureDirectorySizeField;
            }
            set
            {
                maxCaptureDirectorySizeField = value;
            }
        }
    }
    
    /// <summary>
    /// List of jurisdictions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionBinRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XExecutableExtensionBinRegistryVer1.xsd", IsNullable=true)]
    public partial class JurisdictionList
    {
        #region Private fields
        private List<string> jurisdictionField;
        #endregion
        
        /// <summary>
        /// JurisdictionList class constructor
        /// </summary>
        public JurisdictionList()
        {
            jurisdictionField = new List<string>();
        }
        
        [XmlElement("Jurisdiction")]
        public List<string> Jurisdiction
        {
            get
            {
                return jurisdictionField;
            }
            set
            {
                jurisdictionField = value;
            }
        }
    }
}
#pragma warning restore
