// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XGameSetDataRegistryVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;IGT.Game.Core.Registries.Internal.F2X.F2XBaseExtensionRegistryVer1</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XGameSetDataRegistryVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using IGT.Game.Core.Registries.Internal.F2X.F2XBaseExtensionRegistryVer1;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Theme details for a game set. This maps general values from the GameSetInterface file to values for this theme (e.g. "87%" = AVV001234).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XGameSetDataRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd", IsNullable=false)]
    public partial class GameSetData : BaseExtensionRegistry
    {
        #region Private fields
        private List<VersionedSection> versionedGameSetDataSectionsField;
        #endregion
        
        /// <summary>
        /// GameSetData class constructor
        /// </summary>
        public GameSetData()
        {
            versionedGameSetDataSectionsField = new List<VersionedSection>();
        }
        
        /// <summary>
        /// Contains the game set data sections in any available versions.
        /// </summary>
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<VersionedSection> VersionedGameSetDataSections
        {
            get
            {
                return versionedGameSetDataSectionsField;
            }
            set
            {
                versionedGameSetDataSectionsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    public partial class VersionedSection
    {
        #region Private fields
        private GameSet gameSetField;
        private string versionField;
        private string sectionHashField;
        #endregion
        
        /// <summary>
        /// The details of the game set specific to this theme.
        /// </summary>
        public GameSet GameSet
        {
            get
            {
                return gameSetField;
            }
            set
            {
                gameSetField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Version
        {
            get
            {
                return versionField;
            }
            set
            {
                versionField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string SectionHash
        {
            get
            {
                return sectionHashField;
            }
            set
            {
                sectionHashField = value;
            }
        }
    }
    
    /// <summary>
    /// The details of the game set specific to this theme. This contains any number of denom sets that will include the further details for each entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    public partial class GameSet
    {
        #region Private fields
        private List<Denom> denomSetField;
        private string gameSetNameField;
        private string themeRegistryField;
        #endregion
        
        /// <summary>
        /// GameSet class constructor
        /// </summary>
        public GameSet()
        {
            denomSetField = new List<Denom>();
        }
        
        /// <summary>
        /// A set of 1-6 denominations that are part of a single denom set. A denom set is enabled all at once, with various settings for each specific denom.
        /// </summary>
        [XmlArrayItemAttribute(typeof(Denom), IsNullable=false)]
        public List<Denom> DenomSet
        {
            get
            {
                return denomSetField;
            }
            set
            {
                denomSetField = value;
            }
        }
        
        /// <summary>
        /// The name of the game set. This will be displayed to operators during setup. This must match the value in the Interface file.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string GameSetName
        {
            get
            {
                return gameSetNameField;
            }
            set
            {
                gameSetNameField = value;
            }
        }
        
        /// <summary>
        /// The theme registry that this game set controls configuration for.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string ThemeRegistry
        {
            get
            {
                return themeRegistryField;
            }
            set
            {
                themeRegistryField = value;
            }
        }
    }
    
    /// <summary>
    /// A denom contains the specific mapping of payvar and link map values for that denom. These denoms must match a denom in the Game Set Interface registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    public partial class Denom
    {
        #region Private fields
        private List<PayvarMap> payvarMapsField;
        private List<long> maxBetListField;
        private uint valueField;
        #endregion
        
        /// <summary>
        /// Denom class constructor
        /// </summary>
        public Denom()
        {
            maxBetListField = new List<long>();
            payvarMapsField = new List<PayvarMap>();
        }
        
        /// <summary>
        /// The list of available Payvars for configuration in this denom. These values provide details for the values specified in the Game Set Interface registry.
        /// </summary>
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<PayvarMap> PayvarMaps
        {
            get
            {
                return payvarMapsField;
            }
            set
            {
                payvarMapsField = value;
            }
        }
        
        /// <summary>
        /// The list of max bets available for configuration in this denom.
        /// </summary>
        [XmlArrayItemAttribute("MaxBet", IsNullable=false)]
        public List<long> MaxBetList
        {
            get
            {
                return maxBetListField;
            }
            set
            {
                maxBetListField = value;
            }
        }
        
        /// <summary>
        /// The denom being defined. This denom must match a denom in the Game Set Interface Registry.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public uint Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The PayvarMap links the GameSetInterface's general values (e.g. RTP = "95%") to a specific paytable for this theme (e.g. Payvar = "AVV001234").
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    public partial class PayvarMap
    {
        #region Private fields
        private string payvarField;
        private List<LinkMapGroup> linkMapGroupField;
        private string rTPField;
        #endregion
        
        /// <summary>
        /// PayvarMap class constructor
        /// </summary>
        public PayvarMap()
        {
            linkMapGroupField = new List<LinkMapGroup>();
        }
        
        /// <summary>
        /// The case sensitive name of a payvar to use for the generic RTP string.
        /// </summary>
        public string Payvar
        {
            get
            {
                return payvarField;
            }
            set
            {
                payvarField = value;
            }
        }
        
        /// <summary>
        /// The Link Map Group maps the GameSetInterface's general value (e.g. "LinkMapGroup 1") to this theme's specific link map for that group (e.g. LinkMap000001001).
        /// </summary>
        [XmlElement("LinkMapGroup")]
        public List<LinkMapGroup> LinkMapGroup
        {
            get
            {
                return linkMapGroupField;
            }
            set
            {
                linkMapGroupField = value;
            }
        }
        
        /// <summary>
        /// The generic RTP string specified in the GameSetInterface file that this PayvarMap is detailing. This RTP must match an RTP in the Game Set Interface Registry.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string RTP
        {
            get
            {
                return rTPField;
            }
            set
            {
                rTPField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of link map group names to map to specific link maps.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    public partial class LinkMapGroup
    {
        #region Private fields
        private LinkMapIdentifierType linkMapIdField;
        private string nameField;
        #endregion
        
        /// <summary>
        /// The link map identifier to use. This should map a link map available to the theme.
        /// </summary>
        public LinkMapIdentifierType LinkMapId
        {
            get
            {
                return linkMapIdField;
            }
            set
            {
                linkMapIdField = value;
            }
        }
        
        /// <summary>
        /// The generic link map group name that is being mapped here.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Name
        {
            get
            {
                return nameField;
            }
            set
            {
                nameField = value;
            }
        }
    }
    
    /// <summary>
    /// Versioned sections
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd", IsNullable=true)]
    public partial class VersionedGameSetDataSections
    {
        #region Private fields
        private List<VersionedSection> versionedSectionField;
        #endregion
        
        /// <summary>
        /// VersionedGameSetDataSections class constructor
        /// </summary>
        public VersionedGameSetDataSections()
        {
            versionedSectionField = new List<VersionedSection>();
        }
        
        /// <summary>
        /// Contains the game set data by version.
        /// </summary>
        [XmlElement("VersionedSection")]
        public List<VersionedSection> VersionedSection
        {
            get
            {
                return versionedSectionField;
            }
            set
            {
                versionedSectionField = value;
            }
        }
    }
    
    /// <summary>
    /// A set of 1-6 denominations that are part of a single denom set. A denom set is enabled all at once, with various settings for each specific denom. This set must match a set in the Game Set Interface Registry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd", IsNullable=true)]
    public partial class DenomSet
    {
        #region Private fields
        private List<Denom> denomField;
        #endregion
        
        /// <summary>
        /// DenomSet class constructor
        /// </summary>
        public DenomSet()
        {
            denomField = new List<Denom>();
        }
        
        /// <summary>
        /// A denom contains the specific mapping of payvar and link map values for that denom. These denoms must match a denom in the Game Set Interface Registry.
        /// </summary>
        [XmlElement("Denom")]
        public List<Denom> Denom
        {
            get
            {
                return denomField;
            }
            set
            {
                denomField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of all available payvar map definitions. The payvar maps links
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd", IsNullable=true)]
    public partial class PayvarMapList
    {
        #region Private fields
        private List<PayvarMap> payvarMapField;
        #endregion
        
        /// <summary>
        /// PayvarMapList class constructor
        /// </summary>
        public PayvarMapList()
        {
            payvarMapField = new List<PayvarMap>();
        }
        
        /// <summary>
        /// The PayvarMap links the GameSetInterface's general values (e.g. RTP = "95%") to a specific paytable for this theme (e.g. Payvar = "AVV001234").
        /// </summary>
        [XmlElement("PayvarMap")]
        public List<PayvarMap> PayvarMap
        {
            get
            {
                return payvarMapField;
            }
            set
            {
                payvarMapField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of available max bets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XGameSetDataRegistryVer1.xsd", IsNullable=true)]
    public partial class MaxBetList
    {
        #region Private fields
        private List<long> maxBetField;
        #endregion
        
        /// <summary>
        /// MaxBetList class constructor
        /// </summary>
        public MaxBetList()
        {
            maxBetField = new List<long>();
        }
        
        /// <summary>
        /// A max bet value to be used for a game set. This value is the final value. That is to say, it is not resolved by the theme to a more specific value, but used directly. All themes using the denom set for this game set must have these values as available settings for the denom or an error will be raised.
        /// </summary>
        [XmlElement("MaxBet")]
        public List<long> MaxBet
        {
            get
            {
                return maxBetField;
            }
            set
            {
                maxBetField = value;
            }
        }
    }
}
#pragma warning restore
