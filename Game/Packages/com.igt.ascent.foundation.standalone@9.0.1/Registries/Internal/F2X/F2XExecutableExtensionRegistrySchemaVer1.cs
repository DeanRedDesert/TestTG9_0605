// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XExecutableExtensionRegistryVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;IGT.Game.Core.Registries.Internal.F2X.F2XBaseExtensionRegistryVer1</CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XExecutableExtensionRegistryVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1;
    using IGT.Game.Core.Registries.Internal.F2X.F2XBaseExtensionRegistryVer1;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Registry for describing an executable extension.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd", IsNullable=false)]
    public partial class ExecutableExtensionRegistry : BaseExtensionRegistry
    {
        #region Private fields
        private SystemExtensionActivationBehavior systemExtensionActivationBehaviorField;
        private AppExtensionConfiguration appExtensionActivationField;
        private string executableExtensionBinRegistryField;
        private TagDataFileType tagDataFileField;
        private List<ExtensionImportListExtensionImport> extensionImportListField;
        #endregion
        
        /// <summary>
        /// ExecutableExtensionRegistry class constructor
        /// </summary>
        public ExecutableExtensionRegistry()
        {
            extensionImportListField = new List<ExtensionImportListExtensionImport>();
            systemExtensionActivationBehaviorField = SystemExtensionActivationBehavior.NoSystemActivation;
        }
        
        /// <summary>
        /// Allows the executable extension to behave as a system extension (i.e. having a broad scope) and therefore be active independent of the activation of linked entities (i.e. theme or TSM).  The extension may still be linked/imported by other (theme and/or TSM) entities, regardless of the value of this setting.
        /// </summary>
        public SystemExtensionActivationBehavior SystemExtensionActivationBehavior
        {
            get
            {
                return systemExtensionActivationBehaviorField;
            }
            set
            {
                systemExtensionActivationBehaviorField = value;
            }
        }
        
        /// <summary>
        /// Providing this section of the registry will allow the extension to behave as an application extension.
        /// </summary>
        public AppExtensionConfiguration AppExtensionActivation
        {
            get
            {
                return appExtensionActivationField;
            }
            set
            {
                appExtensionActivationField = value;
            }
        }
        
        /// <summary>
        /// Relative path to extension executable/bin that supports this extension.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ExecutableExtensionBinRegistry
        {
            get
            {
                return executableExtensionBinRegistryField;
            }
            set
            {
                executableExtensionBinRegistryField = value;
            }
        }
        
        /// <summary>
        /// Custom extension file for use with the extension.  Passed to the executable during startup.  Opaque to the Foundation.
        /// </summary>
        public TagDataFileType TagDataFile
        {
            get
            {
                return tagDataFileField;
            }
            set
            {
                tagDataFileField = value;
            }
        }
        
        /// <summary>
        /// List of optional or required extensions to be linked at runtime.
        /// </summary>
        [XmlArrayAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
        [XmlArrayItemAttribute("ExtensionImport", IsNullable=false)]
        public List<ExtensionImportListExtensionImport> ExtensionImportList
        {
            get
            {
                return extensionImportListField;
            }
            set
            {
                extensionImportListField = value;
            }
        }
    }
    
    /// <summary>
    /// The type of system extension activation behavior.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public enum SystemExtensionActivationBehavior
    {
        /// <summary>
        /// The executable extension is NOT behaving as system extension.
        /// </summary>
        NoSystemActivation,
        /// <summary>
        /// Continually active (except during package management), in support of the Foundation or other system-level component.
        /// </summary>
        ContinuousSystemActivation,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public partial class AppExtensionConfiguration
    {
        #region Private fields
        private CultureList supportedCulturesField;
        private string resourceDirectoryField;
        private ChooserContent chooserContentField;
        private ChooserVisibility chooserVisibilityField;
        private DisplayModeList supportedDisplayModesField;
        private System.Nullable<InAppChooserSupport> inAppChooserSupportField;
        #endregion
        
        /// <summary>
        /// The list of cultures supported by the app.
        /// </summary>
        public CultureList SupportedCultures
        {
            get
            {
                return supportedCulturesField;
            }
            set
            {
                supportedCulturesField = value;
            }
        }
        
        /// <summary>
        /// Path relative to the package root that contains a localized resource table.
        /// </summary>
        [XmlElement(DataType="anyURI")]
        public string ResourceDirectory
        {
            get
            {
                return resourceDirectoryField;
            }
            set
            {
                resourceDirectoryField = value;
            }
        }
        
        /// <summary>
        /// All content for displaying this app in a Chooser.
        /// </summary>
        public ChooserContent ChooserContent
        {
            get
            {
                return chooserContentField;
            }
            set
            {
                chooserContentField = value;
            }
        }
        
        /// <summary>
        /// The expected visiblity of the app within the chooser.
        /// </summary>
        public ChooserVisibility ChooserVisibility
        {
            get
            {
                return chooserVisibilityField;
            }
            set
            {
                chooserVisibilityField = value;
            }
        }
        
        /// <summary>
        /// A list of display modes supported by the app.
        /// </summary>
        public DisplayModeList SupportedDisplayModes
        {
            get
            {
                return supportedDisplayModesField;
            }
            set
            {
                supportedDisplayModesField = value;
            }
        }
        
        /// <summary>
        /// Status of App's ability to handle chooser behavior. Defaults to Unsupported if not supplied.
        /// </summary>
        public InAppChooserSupport InAppChooserSupport
        {
            get
            {
                if (inAppChooserSupportField.HasValue)
                {
                    return inAppChooserSupportField.Value;
                }
                else
                {
                    return default(InAppChooserSupport);
                }
            }
            set
            {
                inAppChooserSupportField = value;
            }
        }
        
        [XmlIgnore]
        public bool InAppChooserSupportSpecified
        {
            get
            {
                return inAppChooserSupportField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    inAppChooserSupportField = null;
                }
            }
        }
    }
    
    /// <summary>
    /// A list of cultures.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public partial class CultureList
    {
        #region Private fields
        private List<string> cultureField;
        #endregion
        
        /// <summary>
        /// CultureList class constructor
        /// </summary>
        public CultureList()
        {
            cultureField = new List<string>();
        }
        
        /// <summary>
        /// A culture supported by the extension.
        /// </summary>
        [XmlElement("Culture")]
        public List<string> Culture
        {
            get
            {
                return cultureField;
            }
            set
            {
                cultureField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of supported display modes by the app.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public partial class DisplayModeList
    {
        #region Private fields
        private List<DisplayMode> modeField;
        #endregion
        
        /// <summary>
        /// DisplayModeList class constructor
        /// </summary>
        public DisplayModeList()
        {
            modeField = new List<DisplayMode>();
        }
        
        [XmlElement("Mode")]
        public List<DisplayMode> Mode
        {
            get
            {
                return modeField;
            }
            set
            {
                modeField = value;
            }
        }
    }
    
    /// <summary>
    /// Modes of display that are supported by the app.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public enum DisplayMode
    {
        /// <summary>
        /// The application is capable of being displayed along side of other app extensions and games.
        /// </summary>
        Shared,
        /// <summary>
        /// The application is capable of being selected and displayed by itself, without the need of another game or app extension to also be shown.
        /// </summary>
        Independent,
    }
    
    /// <summary>
    /// An object to hold the filtering hierarchy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public partial class HierarchicalCustomMenuTabNode
    {
        #region Private fields
        private string keyField;
        private List<HierarchicalCustomMenuTabNode> childrenField;
        #endregion
        
        /// <summary>
        /// HierarchicalCustomMenuTabNode class constructor
        /// </summary>
        public HierarchicalCustomMenuTabNode()
        {
            childrenField = new List<HierarchicalCustomMenuTabNode>();
        }
        
        /// <summary>
        /// A localized key representing the current filter level value.
        /// </summary>
        public string Key
        {
            get
            {
                return keyField;
            }
            set
            {
                keyField = value;
            }
        }
        
        /// <summary>
        /// The subtree off of the current tab node.
        /// </summary>
        [XmlElement("Children")]
        public List<HierarchicalCustomMenuTabNode> Children
        {
            get
            {
                return childrenField;
            }
            set
            {
                childrenField = value;
            }
        }
    }
    
    /// <summary>
    /// All content for displaying this app in a Chooser.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public partial class ChooserContent
    {
        #region Private fields
        private string nameKeyField;
        private string iconKeyField;
        private string logoKeyField;
        private string promoKeyField;
        private string loadingDisplayKeyField;
        private string attractKeyField;
        private List<HierarchicalCustomMenuTabNode> hierarchicalCustomMenuTabsField;
        #endregion
        
        /// <summary>
        /// ChooserContent class constructor
        /// </summary>
        public ChooserContent()
        {
            hierarchicalCustomMenuTabsField = new List<HierarchicalCustomMenuTabNode>();
        }
        
        /// <summary>
        /// Key used to resolve the localized app name, used for display purposes.
        /// </summary>
        public string NameKey
        {
            get
            {
                return nameKeyField;
            }
            set
            {
                nameKeyField = value;
            }
        }
        
        /// <summary>
        /// Image resource containing an icon used for app selection (e.g. Chooser).
        /// </summary>
        public string IconKey
        {
            get
            {
                return iconKeyField;
            }
            set
            {
                iconKeyField = value;
            }
        }
        
        /// <summary>
        /// Image resource containing a logo used for larger display areas (e.g. the top box).
        /// </summary>
        public string LogoKey
        {
            get
            {
                return logoKeyField;
            }
            set
            {
                logoKeyField = value;
            }
        }
        
        /// <summary>
        /// Image resource used to promote the app to the player in the Chooser (e.g. advertises major app features).
        /// </summary>
        public string PromoKey
        {
            get
            {
                return promoKeyField;
            }
            set
            {
                promoKeyField = value;
            }
        }
        
        /// <summary>
        /// Image resource to be used while the app is loading.
        /// </summary>
        public string LoadingDisplayKey
        {
            get
            {
                return loadingDisplayKeyField;
            }
            set
            {
                loadingDisplayKeyField = value;
            }
        }
        
        /// <summary>
        /// Movie resource to be used for attract (on the top box).
        /// </summary>
        public string AttractKey
        {
            get
            {
                return attractKeyField;
            }
            set
            {
                attractKeyField = value;
            }
        }
        
        /// <summary>
        /// The multilayered filtering on the chooser. Filtering depths for custom choosers will be chooser specific.
        /// </summary>
        [XmlArrayItemAttribute("Tabs", IsNullable=false)]
        public List<HierarchicalCustomMenuTabNode> HierarchicalCustomMenuTabs
        {
            get
            {
                return hierarchicalCustomMenuTabsField;
            }
            set
            {
                hierarchicalCustomMenuTabsField = value;
            }
        }
    }
    
    /// <summary>
    /// The expected visibility of the application within the chooser.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public enum ChooserVisibility
    {
        /// <summary>
        /// The application should not be independently selectable, and no icon or other information will be visible within the chooser.
        /// </summary>
        Hidden,
        /// <summary>
        /// The application should be selectable within the chooser.
        /// </summary>
        Selectable,
    }
    
    /// <summary>
    /// Levels of support for an in-app chooser.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    public enum InAppChooserSupport
    {
        /// <summary>
        /// The application has no support for an in-app chooser.
        /// </summary>
        Unsupported,
        /// <summary>
        /// The application indicates that it will query and request central app changes, but will not handle the ChooserRequested message.
        /// </summary>
        Simple,
        /// <summary>
        /// The application indicates support for taking ownership of chooser behaviors while in context. With the current support of Extension App Selection category, the application will query and request central app changes, and will also handle the ChooserRequested message.
        /// </summary>
        Exclusive,
    }
    
    /// <summary>
    /// The multilayered filtering on the chooser. Filtering depths for custom choosers will be chooser specific. If this and the CustomMenuTabs are present the CustomMenuTabs data will be ignored.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XExecutableExtensionRegistryVer1.xsd", IsNullable=true)]
    public partial class HierarchicalCustomMenuTabList
    {
        #region Private fields
        private List<HierarchicalCustomMenuTabNode> tabsField;
        #endregion
        
        /// <summary>
        /// HierarchicalCustomMenuTabList class constructor
        /// </summary>
        public HierarchicalCustomMenuTabList()
        {
            tabsField = new List<HierarchicalCustomMenuTabNode>();
        }
        
        /// <summary>
        /// Nested filtering data.
        /// </summary>
        [XmlElement("Tabs")]
        public List<HierarchicalCustomMenuTabNode> Tabs
        {
            get
            {
                return tabsField;
            }
            set
            {
                tabsField = value;
            }
        }
    }
}
#pragma warning restore
