// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>Collections</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>True</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude>System.ComponentModel.DefaultValueAttribute</AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace IGT.Game.Core.Registries.Internal.F2X.F2XRegistryTypesVer1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=false)]
    public partial class ExtensionImportList
    {
        #region Private fields
        private List<ExtensionImportListExtensionImport> extensionImportField;
        #endregion
        
        /// <summary>
        /// ExtensionImportList class constructor
        /// </summary>
        public ExtensionImportList()
        {
            extensionImportField = new List<ExtensionImportListExtensionImport>();
        }
        
        /// <summary>
        /// Declare an optional or required extension to be linked at runtime.
        /// </summary>
        [XmlElement("ExtensionImport")]
        public List<ExtensionImportListExtensionImport> ExtensionImport
        {
            get
            {
                return extensionImportField;
            }
            set
            {
                extensionImportField = value;
            }
        }
    }
    
    /// <summary>
    /// Declare an optional or required extension to be linked at runtime.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class ExtensionImportListExtensionImport
    {
        #region Private fields
        private string extensionNameField;
        private string extensionIdField;
        private bool requiredExtensionField;
        private List<ExtensionVersion> extensionVersionListField;
        #endregion
        
        /// <summary>
        /// ExtensionImportListExtensionImport class constructor
        /// </summary>
        public ExtensionImportListExtensionImport()
        {
            extensionVersionListField = new List<ExtensionVersion>();
        }
        
        /// <summary>
        /// Human-readable name for a specific extension.
        /// </summary>
        public string ExtensionName
        {
            get
            {
                return extensionNameField;
            }
            set
            {
                extensionNameField = value;
            }
        }
        
        /// <summary>
        /// Specify the unique extension identifier provided by this registry configuration.
        /// </summary>
        public string ExtensionId
        {
            get
            {
                return extensionIdField;
            }
            set
            {
                extensionIdField = value;
            }
        }
        
        /// <summary>
        /// Indicates if this extension is required to be present.  True if it is required; false if it is optional.
        /// </summary>
        public bool RequiredExtension
        {
            get
            {
                return requiredExtensionField;
            }
            set
            {
                requiredExtensionField = value;
            }
        }
        
        /// <summary>
        /// List of extension versions the import client supports.  Only one instance of each major version may be listed.
        /// </summary>
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<ExtensionVersion> ExtensionVersionList
        {
            get
            {
                return extensionVersionListField;
            }
            set
            {
                extensionVersionListField = value;
            }
        }
    }
    
    /// <summary>
    /// Version number that identifies the interface and behavior that is supported/expected for a particular major, minor, and patch version of the extension.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class ExtensionVersion
    {
        #region Private fields
        private uint majorVersionField;
        private uint minorVersionField;
        private uint patchVersionField;
        #endregion
        
        /// <summary>
        /// The major version.  A new major version is required for incompatible API changes.
        /// </summary>
        public uint MajorVersion
        {
            get
            {
                return majorVersionField;
            }
            set
            {
                majorVersionField = value;
            }
        }
        
        /// <summary>
        /// The minor version.  A minor version is backwards-compatible API changes to a major version.  A higher minor version implies support for the lower minor versions of the same major version.
        /// </summary>
        public uint MinorVersion
        {
            get
            {
                return minorVersionField;
            }
            set
            {
                minorVersionField = value;
            }
        }
        
        /// <summary>
        /// The patch version.  The patch version is for backwards-compatible bug fixes to a minor version.
        /// </summary>
        public uint PatchVersion
        {
            get
            {
                return patchVersionField;
            }
            set
            {
                patchVersionField = value;
            }
        }
    }
    
    /// <summary>
    /// Version number that identifies the major and minor revision of a product.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class Version
    {
        #region Private fields
        private System.Nullable<uint> majorVersionField;
        private System.Nullable<uint> minorVersionField;
        #endregion
        
        /// <summary>
        /// The major version.  A new major version is required for incompatible API changes.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public uint MajorVersion
        {
            get
            {
                if (majorVersionField.HasValue)
                {
                    return majorVersionField.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                majorVersionField = value;
            }
        }
        
        [XmlIgnore]
        public bool MajorVersionSpecified
        {
            get
            {
                return majorVersionField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    majorVersionField = null;
                }
            }
        }
        
        /// <summary>
        /// The minor version.  A minor version is backwards-compatible API changes to a major version.  A higher minor version implies support for the lower minor versions of the same major version.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public uint MinorVersion
        {
            get
            {
                if (minorVersionField.HasValue)
                {
                    return minorVersionField.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                minorVersionField = value;
            }
        }
        
        [XmlIgnore]
        public bool MinorVersionSpecified
        {
            get
            {
                return minorVersionField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    minorVersionField = null;
                }
            }
        }
    }
    
    /// <summary>
    /// List of extension versions the import client supports.  Only one instance of each major version may be listed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class ExtensionVersionList
    {
        #region Private fields
        private List<ExtensionVersion> extensionVersionField;
        #endregion
        
        /// <summary>
        /// ExtensionVersionList class constructor
        /// </summary>
        public ExtensionVersionList()
        {
            extensionVersionField = new List<ExtensionVersion>();
        }
        
        /// <summary>
        /// An extension version the import client supports.  The specified minor and patch version are the minimum the import client requires for the major version.
        /// Note: For Interface Definitions, the maximum version is defined by the highest version of the interface included within the same package.
        /// </summary>
        [XmlElement("ExtensionVersion")]
        public List<ExtensionVersion> ExtensionVersion
        {
            get
            {
                return extensionVersionField;
            }
            set
            {
                extensionVersionField = value;
            }
        }
    }
    
    /// <summary>
    /// Collection of arguments to be used as references in a CommandLineType element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class CommandLineArguments
    {
        #region Private fields
        private List<CommandLineArgumentsArgument> argumentField;
        #endregion
        
        /// <summary>
        /// CommandLineArguments class constructor
        /// </summary>
        public CommandLineArguments()
        {
            argumentField = new List<CommandLineArgumentsArgument>();
        }
        
        [XmlElement("Argument")]
        public List<CommandLineArgumentsArgument> Argument
        {
            get
            {
                return argumentField;
            }
            set
            {
                argumentField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class CommandLineArgumentsArgument
    {
        #region Private fields
        private string nameField;
        private string valueField;
        #endregion
        
        /// <summary>
        /// Required name of argument to be used as a reference in a CommandLineType element.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string name
        {
            get
            {
                return nameField;
            }
            set
            {
                nameField = value;
            }
        }
        
        [XmlTextAttribute]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Custom component-related file for use by the component.  Passed to the component during startup.  Opaque to the Foundation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class TagDataFileType
    {
        #region Private fields
        private string tagField;
        private string valueField;
        #endregion
        
        /// <summary>
        /// Custom component-related data for use by the executable.  Passed to the component during startup.  Opaque to the Foundation.
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Tag
        {
            get
            {
                return tagField;
            }
            set
            {
                tagField = value;
            }
        }
        
        [XmlTextAttribute(DataType="anyURI")]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// A list of localization keys.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class LocalizationKeyList
    {
        #region Private fields
        private List<string> keyField;
        #endregion
        
        /// <summary>
        /// LocalizationKeyList class constructor
        /// </summary>
        public LocalizationKeyList()
        {
            keyField = new List<string>();
        }
        
        [XmlElement("Key")]
        public List<string> Key
        {
            get
            {
                return keyField;
            }
            set
            {
                keyField = value;
            }
        }
    }
    
    /// <summary>
    /// Amount data type used in configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class AmountType
    {
        #region Private fields
        private System.Nullable<long> minField;
        private System.Nullable<long> maxField;
        private long valueField;
        #endregion
        
        /// <summary>
        /// Minimum inclusive value
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public long Min
        {
            get
            {
                if (minField.HasValue)
                {
                    return minField.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                minField = value;
            }
        }
        
        [XmlIgnore]
        public bool MinSpecified
        {
            get
            {
                return minField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    minField = null;
                }
            }
        }
        
        /// <summary>
        /// Maximum inclusive value
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public long Max
        {
            get
            {
                if (maxField.HasValue)
                {
                    return maxField.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                maxField = value;
            }
        }
        
        [XmlIgnore]
        public bool MaxSpecified
        {
            get
            {
                return maxField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    maxField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public long Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Enumeration data type used in configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class EnumerationType
    {
        #region Private fields
        private List<EnumerationTypeEnumeration> enumerationField;
        #endregion
        
        /// <summary>
        /// EnumerationType class constructor
        /// </summary>
        public EnumerationType()
        {
            enumerationField = new List<EnumerationTypeEnumeration>();
        }
        
        [XmlElement("Enumeration")]
        public List<EnumerationTypeEnumeration> Enumeration
        {
            get
            {
                return enumerationField;
            }
            set
            {
                enumerationField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class EnumerationTypeEnumeration
    {
        #region Private fields
        private string valueField;
        #endregion
        
        [XmlTextAttribute]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Flag list data type used in configuration. Contains subset of the elements defined in EnumReferenceList
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class FlagListType
    {
        #region Private fields
        private List<FlagListTypeElement> elementField;
        private string enumReferenceListField;
        #endregion
        
        /// <summary>
        /// FlagListType class constructor
        /// </summary>
        public FlagListType()
        {
            elementField = new List<FlagListTypeElement>();
        }
        
        [XmlElement("Element")]
        public List<FlagListTypeElement> Element
        {
            get
            {
                return elementField;
            }
            set
            {
                elementField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string EnumReferenceList
        {
            get
            {
                return enumReferenceListField;
            }
            set
            {
                enumReferenceListField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class FlagListTypeElement
    {
        #region Private fields
        private string valueField;
        #endregion
        
        [XmlTextAttribute]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Float data type used in configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class FloatType
    {
        #region Private fields
        private System.Nullable<float> minField;
        private System.Nullable<float> maxField;
        private float valueField;
        #endregion
        
        /// <summary>
        /// Minimum inclusive value
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public float Min
        {
            get
            {
                if (minField.HasValue)
                {
                    return minField.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                minField = value;
            }
        }
        
        [XmlIgnore]
        public bool MinSpecified
        {
            get
            {
                return minField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    minField = null;
                }
            }
        }
        
        /// <summary>
        /// Maximum inclusive value
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public float Max
        {
            get
            {
                if (maxField.HasValue)
                {
                    return maxField.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                maxField = value;
            }
        }
        
        [XmlIgnore]
        public bool MaxSpecified
        {
            get
            {
                return maxField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    maxField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public float Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Int64 data type used in configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class Int64Type
    {
        #region Private fields
        private System.Nullable<long> minField;
        private System.Nullable<long> maxField;
        private long valueField;
        #endregion
        
        /// <summary>
        /// Minimum inclusive value
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public long Min
        {
            get
            {
                if (minField.HasValue)
                {
                    return minField.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                minField = value;
            }
        }
        
        [XmlIgnore]
        public bool MinSpecified
        {
            get
            {
                return minField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    minField = null;
                }
            }
        }
        
        /// <summary>
        /// Maximum inclusive value
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public long Max
        {
            get
            {
                if (maxField.HasValue)
                {
                    return maxField.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                maxField = value;
            }
        }
        
        [XmlIgnore]
        public bool MaxSpecified
        {
            get
            {
                return maxField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    maxField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public long Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Item data type used in configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class ItemType
    {
        #region Private fields
        private string enumReferenceListField;
        private string valueField;
        #endregion
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string EnumReferenceList
        {
            get
            {
                return enumReferenceListField;
            }
            set
            {
                enumReferenceListField = value;
            }
        }
        
        [XmlTextAttribute]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// String data type used in configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class StringType
    {
        #region Private fields
        private int? minLenField;
        private int? maxLenField;
        private string valueField;
        #endregion
        
        /// <summary>
        /// Minimum length of the string
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public int MinLen
        {
            get
            {
                if (minLenField.HasValue)
                {
                    return minLenField.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                minLenField = value;
            }
        }
        
        [XmlIgnore]
        public bool MinLenSpecified
        {
            get
            {
                return minLenField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    minLenField = null;
                }
            }
        }
        
        /// <summary>
        /// Maximum length of the string
        /// </summary>
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public int MaxLen
        {
            get
            {
                if (maxLenField.HasValue)
                {
                    return maxLenField.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                maxLenField = value;
            }
        }
        
        [XmlIgnore]
        public bool MaxLenSpecified
        {
            get
            {
                return maxLenField.HasValue;
            }
            set
            {
                if (value==false)
                {
                    maxLenField = null;
                }
            }
        }
        
        [XmlTextAttribute]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Custom configuration items data type used in configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class CustomConfigItemsType
    {
        #region Private fields
        private List<CustomConfigItemsTypeConfigItem> configItemField;
        #endregion
        
        /// <summary>
        /// CustomConfigItemsType class constructor
        /// </summary>
        public CustomConfigItemsType()
        {
            configItemField = new List<CustomConfigItemsTypeConfigItem>();
        }
        
        [XmlElement("ConfigItem")]
        public List<CustomConfigItemsTypeConfigItem> ConfigItem
        {
            get
            {
                return configItemField;
            }
            set
            {
                configItemField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class CustomConfigItemsTypeConfigItem
    {
        #region Private fields
        private string nameField;
        private bool persistentField;
        private bool readOnlyField;
        private bool notTransferableField;
        private CustomConfigItemsTypeConfigItemData dataField;
        #endregion
        
        /// <summary>
        /// CustomConfigItemsTypeConfigItem class constructor
        /// </summary>
        public CustomConfigItemsTypeConfigItem()
        {
            persistentField = false;
            readOnlyField = false;
            notTransferableField = false;
        }
        
        public string Name
        {
            get
            {
                return nameField;
            }
            set
            {
                nameField = value;
            }
        }
        
        /// <summary>
        /// If true, the config item information will persist over a safe storage clear (master reset).
        /// </summary>
        public bool Persistent
        {
            get
            {
                return persistentField;
            }
            set
            {
                persistentField = value;
            }
        }
        
        /// <summary>
        /// If true, the config item will have a fixed value that is not modifiable at runtime.
        /// </summary>
        public bool ReadOnly
        {
            get
            {
                return readOnlyField;
            }
            set
            {
                readOnlyField = value;
            }
        }
        
        /// <summary>
        /// If true, the config item will not be considered for exporting to another gaming machine, due do it's affiliation to the current hardware.
        /// </summary>
        public bool NotTransferable
        {
            get
            {
                return notTransferableField;
            }
            set
            {
                notTransferableField = value;
            }
        }
        
        public CustomConfigItemsTypeConfigItemData Data
        {
            get
            {
                return dataField;
            }
            set
            {
                dataField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class CustomConfigItemsTypeConfigItemData
    {
        #region Private fields
        private object itemField;
        #endregion
        
        [XmlElement("AmountData", typeof(AmountType))]
        [XmlElement("BooleanData", typeof(bool))]
        [XmlElement("EnumerationData", typeof(EnumerationType))]
        [XmlElement("FlagListData", typeof(FlagListType))]
        [XmlElement("FloatData", typeof(FloatType))]
        [XmlElement("Int64Data", typeof(Int64Type))]
        [XmlElement("ItemData", typeof(ItemType))]
        [XmlElement("StringData", typeof(StringType))]
        public object Item
        {
            get
            {
                return itemField;
            }
            set
            {
                itemField = value;
            }
        }
    }
    
    /// <summary>
    /// This type will organize the properties
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class PropertiesType
    {
        #region Private fields
        private List<PropertiesTypeSection> sectionField;
        #endregion
        
        /// <summary>
        /// PropertiesType class constructor
        /// </summary>
        public PropertiesType()
        {
            sectionField = new List<PropertiesTypeSection>();
        }
        
        [XmlElement("Section")]
        public List<PropertiesTypeSection> Section
        {
            get
            {
                return sectionField;
            }
            set
            {
                sectionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class PropertiesTypeSection
    {
        #region Private fields
        private List<PropertiesTypeSectionProperty> propertyField;
        private string nameField;
        #endregion
        
        /// <summary>
        /// PropertiesTypeSection class constructor
        /// </summary>
        public PropertiesTypeSection()
        {
            propertyField = new List<PropertiesTypeSectionProperty>();
        }
        
        [XmlElement("Property")]
        public List<PropertiesTypeSectionProperty> Property
        {
            get
            {
                return propertyField;
            }
            set
            {
                propertyField = value;
            }
        }
        
        [XmlAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Name
        {
            get
            {
                return nameField;
            }
            set
            {
                nameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType=true, Namespace="F2XRegistryTypesVer1.xsd")]
    public partial class PropertiesTypeSectionProperty
    {
        #region Private fields
        private string nameField;
        private string valueField;
        #endregion
        
        public string Name
        {
            get
            {
                return nameField;
            }
            set
            {
                nameField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The progressive concept identifier
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class ProgressiveConceptIdentifierType
    {
        #region Private fields
        private string progressiveConceptCodeField;
        private string authorityField;
        #endregion
        
        /// <summary>
        /// The Progressive Concept Code (PCC) is a unique hash for a mathematical representation of the progressive concept.  The PCC must be unique as maintained by the issuing authority (e.g. a game studio).
        /// </summary>
        public string ProgressiveConceptCode
        {
            get
            {
                return progressiveConceptCodeField;
            }
            set
            {
                progressiveConceptCodeField = value;
            }
        }
        
        /// <summary>
        /// The authority (such as a game studio) that issued the PCC (Progressive Concept Code).
        /// </summary>
        public string Authority
        {
            get
            {
                return authorityField;
            }
            set
            {
                authorityField = value;
            }
        }
    }
    
    /// <summary>
    /// Unique identifier for a link map.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class LinkMapIdentifierType
    {
        #region Private fields
        private string linkIdField;
        private string authorityField;
        #endregion
        
        /// <summary>
        /// Link identifier as a string based name used for display purposes as assigned by the game designer (e.g. SPHINX3D_SPC).
        /// </summary>
        public string LinkId
        {
            get
            {
                return linkIdField;
            }
            set
            {
                linkIdField = value;
            }
        }
        
        /// <summary>
        /// The authority (such as a game studio) that issued the LinkId.
        /// </summary>
        public string Authority
        {
            get
            {
                return authorityField;
            }
            set
            {
                authorityField = value;
            }
        }
    }
    
    /// <summary>
    /// Standalone Progressive Controller group identifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class SpcGroupIdentifierType
    {
        #region Private fields
        private string spcGroupIdField;
        private string authorityField;
        #endregion
        
        /// <summary>
        /// String name/identifier used for display purposes as assigned by the game designer (e.g. SPHINX3D_SPCG).  This string must be unique (as issued by the Authority).  Must be composed of alphanumeric values and/or "-" and "_" separators.
        /// </summary>
        public string SpcGroupId
        {
            get
            {
                return spcGroupIdField;
            }
            set
            {
                spcGroupIdField = value;
            }
        }
        
        /// <summary>
        /// The authority (such as a game studio) that issued the identifier.
        /// </summary>
        public string Authority
        {
            get
            {
                return authorityField;
            }
            set
            {
                authorityField = value;
            }
        }
    }
    
    /// <summary>
    /// Standalone Progressive Controller group template identifier.  When the template is instantiated (e.g. at a denomination) this template identifier is used as the base to form a SPC group identifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class SpcGroupTemplateIdentifierType
    {
        #region Private fields
        private string spcGroupTemplateIdField;
        private string authorityField;
        #endregion
        
        /// <summary>
        /// String name/identifier as assigned by the game designer (e.g. SPHINX3D_SPC). When the template is instantiated (e.g. at a denomination) this template id to used as the base (string) to create a unique identifier for the controller group.   This string must be unique (as issued by the Authority).  Must be composed of alphanumeric values and/or "-" and "_" separators.   The pattern used for representation is "base_string-xxx". The xxx will be replaced by the denomination value or an unique combination.
        /// </summary>
        public string SpcGroupTemplateId
        {
            get
            {
                return spcGroupTemplateIdField;
            }
            set
            {
                spcGroupTemplateIdField = value;
            }
        }
        
        /// <summary>
        /// The authority (such as a game studio) that issued the identifier.
        /// </summary>
        public string Authority
        {
            get
            {
                return authorityField;
            }
            set
            {
                authorityField = value;
            }
        }
    }
    
    /// <summary>
    /// Unique identifier to map the game levels to levels within a Net Progressive Controller group (aka "Progressive ID X").
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class NetProgressiveControllerGroupIdentifierType
    {
        #region Private fields
        private string groupCodeField;
        private string authorityField;
        #endregion
        
        /// <summary>
        /// String name/identifier used for display purposes as assigned by the game designer (e.g. SPHINX3D_UCG).  This string must be unique (as issued by the Authority).  Must be composed of alphanumeric values and/or "-" and "_" separators.
        /// </summary>
        public string GroupCode
        {
            get
            {
                return groupCodeField;
            }
            set
            {
                groupCodeField = value;
            }
        }
        
        /// <summary>
        /// The authority (such as a game studio) that issued the identifier.
        /// </summary>
        public string Authority
        {
            get
            {
                return authorityField;
            }
            set
            {
                authorityField = value;
            }
        }
    }
    
    /// <summary>
    /// Unique identifier to map the game levels to levels within a controller group (aka "Progressive ID X").
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class GroupIdentifierType
    {
        #region Private fields
        private string groupCodeField;
        private string authorityField;
        #endregion
        
        /// <summary>
        /// String name/identifier used for display purposes as assigned by the game designer (e.g. SPHINX3D_eWAP).  This string must be unique (as issued by the Authority).  Must be composed of alphanumeric values and/or "-" and "_" separators.
        /// </summary>
        public string GroupCode
        {
            get
            {
                return groupCodeField;
            }
            set
            {
                groupCodeField = value;
            }
        }
        
        /// <summary>
        /// The authority (such as a game studio) that issued the identifier.
        /// </summary>
        public string Authority
        {
            get
            {
                return authorityField;
            }
            set
            {
                authorityField = value;
            }
        }
    }
    
    /// <summary>
    /// Contains all Wager Category information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=true)]
    public partial class WagerCategories
    {
        #region Private fields
        private List<decimal> percentageField;
        #endregion
        
        /// <summary>
        /// WagerCategories class constructor
        /// </summary>
        public WagerCategories()
        {
            percentageField = new List<decimal>();
        }
        
        /// <summary>
        /// Percentage for wager category.
        /// The wager category entry is referenced by a zero based index based on the order of entries in this list.
        /// The entries are not sorted by the foundation.
        /// </summary>
        [XmlElement("Percentage")]
        public List<decimal> Percentage
        {
            get
            {
                return percentageField;
            }
            set
            {
                percentageField = value;
            }
        }
    }
    
    /// <summary>
    /// Specifies the type of linking to perform when importing an extension interface definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=false)]
    public enum ExtensionLinkBehavior
    {
        /// <summary>
        /// When linked at runtime, only one extension provider will be instantiated to provide the interface.
        /// </summary>
        SingleInstance,
        /// <summary>
        /// When linked at runtime, one or more extension provider(s) may be instantiated to provide the interface.
        /// </summary>
        MultipleInstance,
    }
    
    /// <summary>
    /// The BankSynchronizedConfiguration type as restricted by enumeration. Enforced means the game set must be available on the host, NotAllowed means the game set cannot be available on the host for synchronization of the bank of EGMs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [Serializable]
    [XmlTypeAttribute(Namespace="F2XRegistryTypesVer1.xsd")]
    [XmlRootAttribute(Namespace="F2XRegistryTypesVer1.xsd", IsNullable=false)]
    public enum BankSynchronizedConfigType
    {
        Enforced,
        NotAllowed,
    }
}
#pragma warning restore
