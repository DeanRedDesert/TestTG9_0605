//-----------------------------------------------------------------------
// <copyright file = "HalfSequenceConfig.cs" company = "IGT">
//     Copyright (c) 2012 IGT.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace IGT.Game.Core.Presentation.PeripheralLights.Devices
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The structure for the configuration of one half of a rotate halves sequence.
    /// </summary>
    public struct HalfSequenceConfig : IEquatable<HalfSequenceConfig>
    {
        /// <summary>
        /// The direction the half should rotate.
        /// </summary>
        public LightDirection Direction { get; set; }
        /// <summary>
        /// The list of colors the half should use.
        /// </summary>
        public IList<Color> Colors { get; set; }

        #region Equality members

        // Based on code generated by ReSharper

        /// <inheritdoc />
        public bool Equals(HalfSequenceConfig other)
        {
            return Direction == other.Direction &&
                   (Equals(Colors, other.Colors) ||
                    Colors != null && other.Colors != null && Colors.SequenceEqual(other.Colors));
        }

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            return obj is HalfSequenceConfig other && Equals(other);
        }

        /// <inheritdoc />
        /// <remarks>
        /// This type does not calculate hash code based on member values,
        /// that is, all instances of this type have the same hash code.
        /// </remarks>>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Overloads the operator ==.
        /// </summary>
        public static bool operator ==(HalfSequenceConfig left, HalfSequenceConfig right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Overloads the operator !=.
        /// </summary>
        public static bool operator !=(HalfSequenceConfig left, HalfSequenceConfig right)
        {
            return !left.Equals(right);
        }

        #endregion
    }
}
