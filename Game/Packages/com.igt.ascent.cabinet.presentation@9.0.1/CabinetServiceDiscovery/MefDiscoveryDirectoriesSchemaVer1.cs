// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>IGT.Game.Core.Presentation.CabinetServiceDiscovery</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>True</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>All</PropNameSpecified><PrivateFieldName>EndWithField</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>False</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>True</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable
namespace IGT.Game.Core.Presentation.CabinetServiceDiscovery
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    /// <summary>
    /// A list of relative paths from the game's root which are to be searched for MEF assemblies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3221.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "MefDiscoveryDirectoriesVer1.xsd")]
    [XmlRootAttribute(Namespace = "MefDiscoveryDirectoriesVer1.xsd", IsNullable = false)]
    public class MefDiscoveryDirectories
    {
        #region Private fields
        private List<string> mefDirectoriesField;
        private static XmlSerializer serializer;
        private bool mefDirectoryFieldSpecified;
        #endregion

        /// <summary>
        /// MefDiscoveryDirectories class constructor
        /// </summary>
        public MefDiscoveryDirectories()
        {
            mefDirectoriesField=new List<string>();
        }

        [XmlElement("MefDirectory")]
        public List<string> MefDirectories
        {
            get
            {
                return mefDirectoriesField;
            }
            set
            {
                mefDirectoriesField=value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if((serializer==null))
                {
                    serializer=new XmlSerializerFactory().CreateSerializer(typeof(MefDiscoveryDirectories));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool MefDirectorySpecified
        {
            get
            {
                return mefDirectoryFieldSpecified;
            }
            set
            {
                mefDirectoryFieldSpecified=value;
            }
        }

        #region Serialize/Deserialize
        ///// <summary>
        ///// Serializes current MefDiscoveryDirectories object into an XML string
        ///// </summary>
        ///// <returns>string XML value</returns>
        //public virtual string Serialize()
        //{
        //    StreamReader streamReader = null;
        //    MemoryStream memoryStream = null;
        //    try
        //    {
        //        memoryStream=new MemoryStream();
        //        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        //        xmlWriterSettings.Indent=true;
        //        xmlWriterSettings.IndentChars="  ";
        //        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        //        Serializer.Serialize(xmlWriter, this);
        //        memoryStream.Seek(0, SeekOrigin.Begin);
        //        streamReader=new StreamReader(memoryStream);
        //        return streamReader.ReadToEnd();
        //    }
        //    finally
        //    {
        //        if((streamReader!=null))
        //        {
        //            streamReader.Dispose();
        //        }
        //        if((memoryStream!=null))
        //        {
        //            memoryStream.Dispose();
        //        }
        //    }
        //}

        ///// <summary>
        ///// Deserializes workflow markup into an MefDiscoveryDirectories object
        ///// </summary>
        ///// <param name="input">string workflow markup to deserialize</param>
        ///// <param name="obj">Output MefDiscoveryDirectories object</param>
        ///// <param name="exception">output Exception value if deserialize failed</param>
        ///// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        //public static bool Deserialize(string input, out MefDiscoveryDirectories obj, out Exception exception)
        //{
        //    exception=null;
        //    obj=default(MefDiscoveryDirectories);
        //    try
        //    {
        //        obj=Deserialize(input);
        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        exception=ex;
        //        return false;
        //    }
        //}

        //public static bool Deserialize(string input, out MefDiscoveryDirectories obj)
        //{
        //    Exception exception = null;
        //    return Deserialize(input, out obj, out exception);
        //}

        public static MefDiscoveryDirectories Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader=new StringReader(input);
                return ((MefDiscoveryDirectories)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if((stringReader!=null))
                {
                    stringReader.Dispose();
                }
            }
        }

        //public static MefDiscoveryDirectories Deserialize(Stream s)
        //{
        //    return ((MefDiscoveryDirectories)(Serializer.Deserialize(s)));
        //}
        #endregion

        /// <summary>
        /// Deserializes xml markup from file into an MefDiscoveryDirectories object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MefDiscoveryDirectories object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MefDiscoveryDirectories obj, out Exception exception)
        {
            exception=null;
            obj=default(MefDiscoveryDirectories);
            try
            {
                obj=LoadFromFile(fileName);
                return true;
            }
            catch(Exception ex)
            {
                exception=ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out MefDiscoveryDirectories obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static MefDiscoveryDirectories LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file=new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr=new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if((file!=null))
                {
                    file.Dispose();
                }
                if((sr!=null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
